
codMorse.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b0d4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000250  0800b264  0800b264  0000c264  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b4b4  0800b4b4  0000d088  2**0
                  CONTENTS
  4 .ARM          00000008  0800b4b4  0800b4b4  0000c4b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b4bc  0800b4bc  0000d088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b4bc  0800b4bc  0000c4bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b4c0  0800b4c0  0000c4c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  0800b4c4  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d088  2**0
                  CONTENTS
 10 .bss          00000b80  20000088  20000088  0000d088  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000c08  20000c08  0000d088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d088  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d317  00000000  00000000  0000d0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004428  00000000  00000000  0002a3cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001988  00000000  00000000  0002e7f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000013da  00000000  00000000  00030180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000261b9  00000000  00000000  0003155a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000220fe  00000000  00000000  00057713  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d815e  00000000  00000000  00079811  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0015196f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000748c  00000000  00000000  001519b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004c  00000000  00000000  00158e40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b24c 	.word	0x0800b24c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	0800b24c 	.word	0x0800b24c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b086      	sub	sp, #24
 8000584:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000586:	f001 f9eb 	bl	8001960 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058a:	f000 f8bb 	bl	8000704 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058e:	f000 fa45 	bl	8000a1c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000592:	f000 f921 	bl	80007d8 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000596:	f000 f94d 	bl	8000834 <MX_I2S3_Init>
  MX_SPI1_Init();
 800059a:	f000 f97b 	bl	8000894 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 800059e:	f009 fc0b 	bl	8009db8 <MX_USB_HOST_Init>
  MX_TIM1_Init();
 80005a2:	f000 f9ad 	bl	8000900 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 80005a6:	f000 fa0f 	bl	80009c8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 80005aa:	484c      	ldr	r0, [pc, #304]	@ (80006dc <main+0x15c>)
 80005ac:	f005 fb18 	bl	8005be0 <HAL_TIM_Base_Start>

uint32_t start_time = 0;
 80005b0:	2300      	movs	r3, #0
 80005b2:	617b      	str	r3, [r7, #20]
uint32_t press_duration = 0;
 80005b4:	2300      	movs	r3, #0
 80005b6:	613b      	str	r3, [r7, #16]
int button_was_pressed = 0;
 80005b8:	2300      	movs	r3, #0
 80005ba:	60fb      	str	r3, [r7, #12]
uint32_t debounce_time = 0;
 80005bc:	2300      	movs	r3, #0
 80005be:	60bb      	str	r3, [r7, #8]


printf("\n\r\n\rStart here \n\r");
 80005c0:	4847      	ldr	r0, [pc, #284]	@ (80006e0 <main+0x160>)
 80005c2:	f00a f883 	bl	800a6cc <iprintf>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80005c6:	f009 fc1d 	bl	8009e04 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */

    uint32_t current_time = Get_Timestamp();
 80005ca:	f000 fb13 	bl	8000bf4 <Get_Timestamp>
 80005ce:	6078      	str	r0, [r7, #4]

    int button_state = HAL_GPIO_ReadPin(GPIOA , GPIO_PIN_0);
 80005d0:	2101      	movs	r1, #1
 80005d2:	4844      	ldr	r0, [pc, #272]	@ (80006e4 <main+0x164>)
 80005d4:	f001 fd08 	bl	8001fe8 <HAL_GPIO_ReadPin>
 80005d8:	4603      	mov	r3, r0
 80005da:	603b      	str	r3, [r7, #0]

    // Debounce logic: only register the button press if the state has been stable for DEBOUNCE_DELAY
        if (button_state == GPIO_PIN_SET && !button_was_pressed && (current_time - debounce_time > DEBOUNCE_DELAY))
 80005dc:	683b      	ldr	r3, [r7, #0]
 80005de:	2b01      	cmp	r3, #1
 80005e0:	d10e      	bne.n	8000600 <main+0x80>
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d10b      	bne.n	8000600 <main+0x80>
 80005e8:	687a      	ldr	r2, [r7, #4]
 80005ea:	68bb      	ldr	r3, [r7, #8]
 80005ec:	1ad3      	subs	r3, r2, r3
 80005ee:	2b32      	cmp	r3, #50	@ 0x32
 80005f0:	d906      	bls.n	8000600 <main+0x80>
        {
            // Button press detected
            debounce_time = current_time;
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	60bb      	str	r3, [r7, #8]
            start_time = current_time;
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	617b      	str	r3, [r7, #20]
            //printf("incepe   %ld \n\r", current_time);
            button_was_pressed = 1;
 80005fa:	2301      	movs	r3, #1
 80005fc:	60fb      	str	r3, [r7, #12]
 80005fe:	e069      	b.n	80006d4 <main+0x154>

        }
        else if (button_state == GPIO_PIN_RESET && button_was_pressed && (current_time - debounce_time > DEBOUNCE_DELAY))
 8000600:	683b      	ldr	r3, [r7, #0]
 8000602:	2b00      	cmp	r3, #0
 8000604:	d166      	bne.n	80006d4 <main+0x154>
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	2b00      	cmp	r3, #0
 800060a:	d063      	beq.n	80006d4 <main+0x154>
 800060c:	687a      	ldr	r2, [r7, #4]
 800060e:	68bb      	ldr	r3, [r7, #8]
 8000610:	1ad3      	subs	r3, r2, r3
 8000612:	2b32      	cmp	r3, #50	@ 0x32
 8000614:	d95e      	bls.n	80006d4 <main+0x154>
        {
            // Button release detected
            debounce_time = current_time;
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	60bb      	str	r3, [r7, #8]

            // Calculate press duration, accounting for possible timer overflow
            if (current_time >= start_time)
 800061a:	687a      	ldr	r2, [r7, #4]
 800061c:	697b      	ldr	r3, [r7, #20]
 800061e:	429a      	cmp	r2, r3
 8000620:	d304      	bcc.n	800062c <main+0xac>
            {
                press_duration = (current_time - start_time);
 8000622:	687a      	ldr	r2, [r7, #4]
 8000624:	697b      	ldr	r3, [r7, #20]
 8000626:	1ad3      	subs	r3, r2, r3
 8000628:	613b      	str	r3, [r7, #16]
 800062a:	e005      	b.n	8000638 <main+0xb8>
            }
            else
            {
                // Handle timer overflow
                press_duration = (0xFFFF - start_time + current_time + 1);
 800062c:	687a      	ldr	r2, [r7, #4]
 800062e:	697b      	ldr	r3, [r7, #20]
 8000630:	1ad3      	subs	r3, r2, r3
 8000632:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8000636:	613b      	str	r3, [r7, #16]
            }

            button_was_pressed = 0;
 8000638:	2300      	movs	r3, #0
 800063a:	60fb      	str	r3, [r7, #12]
            //printf("termina   %ld \n\r", current_time);
            printf("Buton apasat timp de %ld ms\n\r", press_duration);
 800063c:	6939      	ldr	r1, [r7, #16]
 800063e:	482a      	ldr	r0, [pc, #168]	@ (80006e8 <main+0x168>)
 8000640:	f00a f844 	bl	800a6cc <iprintf>

            if(press_duration <= 2000)
 8000644:	693b      	ldr	r3, [r7, #16]
 8000646:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800064a:	d80c      	bhi.n	8000666 <main+0xe6>
            {
            	if (buffer_index < MAX_BUFFER_SIZE - 1)
 800064c:	4b27      	ldr	r3, [pc, #156]	@ (80006ec <main+0x16c>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	2b62      	cmp	r3, #98	@ 0x62
 8000652:	dc3f      	bgt.n	80006d4 <main+0x154>
            	        {
            	          buffer[buffer_index++] = '*'; // Adăugăm '*' în buffer
 8000654:	4b25      	ldr	r3, [pc, #148]	@ (80006ec <main+0x16c>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	1c5a      	adds	r2, r3, #1
 800065a:	4924      	ldr	r1, [pc, #144]	@ (80006ec <main+0x16c>)
 800065c:	600a      	str	r2, [r1, #0]
 800065e:	4a24      	ldr	r2, [pc, #144]	@ (80006f0 <main+0x170>)
 8000660:	212a      	movs	r1, #42	@ 0x2a
 8000662:	54d1      	strb	r1, [r2, r3]
 8000664:	e036      	b.n	80006d4 <main+0x154>
            	        }
            }else if(press_duration <= 4000)
 8000666:	693b      	ldr	r3, [r7, #16]
 8000668:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 800066c:	d80c      	bhi.n	8000688 <main+0x108>
            {
            	if (buffer_index < MAX_BUFFER_SIZE - 1)
 800066e:	4b1f      	ldr	r3, [pc, #124]	@ (80006ec <main+0x16c>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	2b62      	cmp	r3, #98	@ 0x62
 8000674:	dc2e      	bgt.n	80006d4 <main+0x154>
            	        {
            	          buffer[buffer_index++] = '-'; // Adăugăm '-' în buffer
 8000676:	4b1d      	ldr	r3, [pc, #116]	@ (80006ec <main+0x16c>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	1c5a      	adds	r2, r3, #1
 800067c:	491b      	ldr	r1, [pc, #108]	@ (80006ec <main+0x16c>)
 800067e:	600a      	str	r2, [r1, #0]
 8000680:	4a1b      	ldr	r2, [pc, #108]	@ (80006f0 <main+0x170>)
 8000682:	212d      	movs	r1, #45	@ 0x2d
 8000684:	54d1      	strb	r1, [r2, r3]
 8000686:	e025      	b.n	80006d4 <main+0x154>
            	        }
            }else if (press_duration <= 10000)
 8000688:	693b      	ldr	r3, [r7, #16]
 800068a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800068e:	4293      	cmp	r3, r2
 8000690:	d814      	bhi.n	80006bc <main+0x13c>
            {
            	// Dacă butonul a fost ținut apăsat mai mult de 7 secunde
            	        buffer[buffer_index] = '\0'; // Închidem șirul de caractere
 8000692:	4b16      	ldr	r3, [pc, #88]	@ (80006ec <main+0x16c>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	4a16      	ldr	r2, [pc, #88]	@ (80006f0 <main+0x170>)
 8000698:	2100      	movs	r1, #0
 800069a:	54d1      	strb	r1, [r2, r3]
            	        printf("Secventa: %s\n\r", buffer); // Afișăm conținutul bufferului
 800069c:	4914      	ldr	r1, [pc, #80]	@ (80006f0 <main+0x170>)
 800069e:	4815      	ldr	r0, [pc, #84]	@ (80006f4 <main+0x174>)
 80006a0:	f00a f814 	bl	800a6cc <iprintf>
            	        decode_and_print_morse(buffer);
 80006a4:	4812      	ldr	r0, [pc, #72]	@ (80006f0 <main+0x170>)
 80006a6:	f000 fab1 	bl	8000c0c <decode_and_print_morse>
            	        // Resetăm buffer-ul pentru următoarea secvență
            	        memset(buffer, 0, MAX_BUFFER_SIZE); // Curățăm buffer-ul
 80006aa:	2264      	movs	r2, #100	@ 0x64
 80006ac:	2100      	movs	r1, #0
 80006ae:	4810      	ldr	r0, [pc, #64]	@ (80006f0 <main+0x170>)
 80006b0:	f00a f861 	bl	800a776 <memset>
            	        buffer_index = 0;
 80006b4:	4b0d      	ldr	r3, [pc, #52]	@ (80006ec <main+0x16c>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	601a      	str	r2, [r3, #0]
 80006ba:	e00b      	b.n	80006d4 <main+0x154>
            }else{
            	printf("cuvantul scris este :  %s\n\r" , buffer_cuvant);
 80006bc:	490e      	ldr	r1, [pc, #56]	@ (80006f8 <main+0x178>)
 80006be:	480f      	ldr	r0, [pc, #60]	@ (80006fc <main+0x17c>)
 80006c0:	f00a f804 	bl	800a6cc <iprintf>
            	memset(buffer_cuvant, 0, MAX_BUFFER_SIZE); // Curățăm buffer-ul
 80006c4:	2264      	movs	r2, #100	@ 0x64
 80006c6:	2100      	movs	r1, #0
 80006c8:	480b      	ldr	r0, [pc, #44]	@ (80006f8 <main+0x178>)
 80006ca:	f00a f854 	bl	800a776 <memset>
            	buffer_cuvant_index = 0;
 80006ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000700 <main+0x180>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]
            }
        }

        HAL_Delay(10);  // Small delay for loop timing
 80006d4:	200a      	movs	r0, #10
 80006d6:	f001 f9b5 	bl	8001a44 <HAL_Delay>
  {
 80006da:	e774      	b.n	80005c6 <main+0x46>
 80006dc:	20000198 	.word	0x20000198
 80006e0:	0800b264 	.word	0x0800b264
 80006e4:	40020000 	.word	0x40020000
 80006e8:	0800b278 	.word	0x0800b278
 80006ec:	200002f0 	.word	0x200002f0
 80006f0:	20000228 	.word	0x20000228
 80006f4:	0800b298 	.word	0x0800b298
 80006f8:	2000028c 	.word	0x2000028c
 80006fc:	0800b2a8 	.word	0x0800b2a8
 8000700:	200002f4 	.word	0x200002f4

08000704 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b094      	sub	sp, #80	@ 0x50
 8000708:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800070a:	f107 0320 	add.w	r3, r7, #32
 800070e:	2230      	movs	r2, #48	@ 0x30
 8000710:	2100      	movs	r1, #0
 8000712:	4618      	mov	r0, r3
 8000714:	f00a f82f 	bl	800a776 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000718:	f107 030c 	add.w	r3, r7, #12
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
 8000720:	605a      	str	r2, [r3, #4]
 8000722:	609a      	str	r2, [r3, #8]
 8000724:	60da      	str	r2, [r3, #12]
 8000726:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000728:	2300      	movs	r3, #0
 800072a:	60bb      	str	r3, [r7, #8]
 800072c:	4b28      	ldr	r3, [pc, #160]	@ (80007d0 <SystemClock_Config+0xcc>)
 800072e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000730:	4a27      	ldr	r2, [pc, #156]	@ (80007d0 <SystemClock_Config+0xcc>)
 8000732:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000736:	6413      	str	r3, [r2, #64]	@ 0x40
 8000738:	4b25      	ldr	r3, [pc, #148]	@ (80007d0 <SystemClock_Config+0xcc>)
 800073a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800073c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000740:	60bb      	str	r3, [r7, #8]
 8000742:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000744:	2300      	movs	r3, #0
 8000746:	607b      	str	r3, [r7, #4]
 8000748:	4b22      	ldr	r3, [pc, #136]	@ (80007d4 <SystemClock_Config+0xd0>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4a21      	ldr	r2, [pc, #132]	@ (80007d4 <SystemClock_Config+0xd0>)
 800074e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000752:	6013      	str	r3, [r2, #0]
 8000754:	4b1f      	ldr	r3, [pc, #124]	@ (80007d4 <SystemClock_Config+0xd0>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800075c:	607b      	str	r3, [r7, #4]
 800075e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000760:	2301      	movs	r3, #1
 8000762:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000764:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000768:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800076a:	2302      	movs	r3, #2
 800076c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800076e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000772:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000774:	2308      	movs	r3, #8
 8000776:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000778:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800077c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800077e:	2302      	movs	r3, #2
 8000780:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000782:	2307      	movs	r3, #7
 8000784:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000786:	f107 0320 	add.w	r3, r7, #32
 800078a:	4618      	mov	r0, r3
 800078c:	f004 fb76 	bl	8004e7c <HAL_RCC_OscConfig>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000796:	f000 fe27 	bl	80013e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800079a:	230f      	movs	r3, #15
 800079c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800079e:	2302      	movs	r3, #2
 80007a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007a2:	2300      	movs	r3, #0
 80007a4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007a6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80007aa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007b0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007b2:	f107 030c 	add.w	r3, r7, #12
 80007b6:	2105      	movs	r1, #5
 80007b8:	4618      	mov	r0, r3
 80007ba:	f004 fdd7 	bl	800536c <HAL_RCC_ClockConfig>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80007c4:	f000 fe10 	bl	80013e8 <Error_Handler>
  }
}
 80007c8:	bf00      	nop
 80007ca:	3750      	adds	r7, #80	@ 0x50
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	40023800 	.word	0x40023800
 80007d4:	40007000 	.word	0x40007000

080007d8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007dc:	4b12      	ldr	r3, [pc, #72]	@ (8000828 <MX_I2C1_Init+0x50>)
 80007de:	4a13      	ldr	r2, [pc, #76]	@ (800082c <MX_I2C1_Init+0x54>)
 80007e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80007e2:	4b11      	ldr	r3, [pc, #68]	@ (8000828 <MX_I2C1_Init+0x50>)
 80007e4:	4a12      	ldr	r2, [pc, #72]	@ (8000830 <MX_I2C1_Init+0x58>)
 80007e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007e8:	4b0f      	ldr	r3, [pc, #60]	@ (8000828 <MX_I2C1_Init+0x50>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000828 <MX_I2C1_Init+0x50>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007f4:	4b0c      	ldr	r3, [pc, #48]	@ (8000828 <MX_I2C1_Init+0x50>)
 80007f6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80007fa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007fc:	4b0a      	ldr	r3, [pc, #40]	@ (8000828 <MX_I2C1_Init+0x50>)
 80007fe:	2200      	movs	r2, #0
 8000800:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000802:	4b09      	ldr	r3, [pc, #36]	@ (8000828 <MX_I2C1_Init+0x50>)
 8000804:	2200      	movs	r2, #0
 8000806:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000808:	4b07      	ldr	r3, [pc, #28]	@ (8000828 <MX_I2C1_Init+0x50>)
 800080a:	2200      	movs	r2, #0
 800080c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800080e:	4b06      	ldr	r3, [pc, #24]	@ (8000828 <MX_I2C1_Init+0x50>)
 8000810:	2200      	movs	r2, #0
 8000812:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000814:	4804      	ldr	r0, [pc, #16]	@ (8000828 <MX_I2C1_Init+0x50>)
 8000816:	f003 fd4d 	bl	80042b4 <HAL_I2C_Init>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000820:	f000 fde2 	bl	80013e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000824:	bf00      	nop
 8000826:	bd80      	pop	{r7, pc}
 8000828:	200000a4 	.word	0x200000a4
 800082c:	40005400 	.word	0x40005400
 8000830:	000186a0 	.word	0x000186a0

08000834 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000838:	4b13      	ldr	r3, [pc, #76]	@ (8000888 <MX_I2S3_Init+0x54>)
 800083a:	4a14      	ldr	r2, [pc, #80]	@ (800088c <MX_I2S3_Init+0x58>)
 800083c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800083e:	4b12      	ldr	r3, [pc, #72]	@ (8000888 <MX_I2S3_Init+0x54>)
 8000840:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000844:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000846:	4b10      	ldr	r3, [pc, #64]	@ (8000888 <MX_I2S3_Init+0x54>)
 8000848:	2200      	movs	r2, #0
 800084a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 800084c:	4b0e      	ldr	r3, [pc, #56]	@ (8000888 <MX_I2S3_Init+0x54>)
 800084e:	2200      	movs	r2, #0
 8000850:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000852:	4b0d      	ldr	r3, [pc, #52]	@ (8000888 <MX_I2S3_Init+0x54>)
 8000854:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000858:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800085a:	4b0b      	ldr	r3, [pc, #44]	@ (8000888 <MX_I2S3_Init+0x54>)
 800085c:	4a0c      	ldr	r2, [pc, #48]	@ (8000890 <MX_I2S3_Init+0x5c>)
 800085e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000860:	4b09      	ldr	r3, [pc, #36]	@ (8000888 <MX_I2S3_Init+0x54>)
 8000862:	2200      	movs	r2, #0
 8000864:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000866:	4b08      	ldr	r3, [pc, #32]	@ (8000888 <MX_I2S3_Init+0x54>)
 8000868:	2200      	movs	r2, #0
 800086a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800086c:	4b06      	ldr	r3, [pc, #24]	@ (8000888 <MX_I2S3_Init+0x54>)
 800086e:	2200      	movs	r2, #0
 8000870:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000872:	4805      	ldr	r0, [pc, #20]	@ (8000888 <MX_I2S3_Init+0x54>)
 8000874:	f003 fe62 	bl	800453c <HAL_I2S_Init>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800087e:	f000 fdb3 	bl	80013e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000882:	bf00      	nop
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	200000f8 	.word	0x200000f8
 800088c:	40003c00 	.word	0x40003c00
 8000890:	00017700 	.word	0x00017700

08000894 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000898:	4b17      	ldr	r3, [pc, #92]	@ (80008f8 <MX_SPI1_Init+0x64>)
 800089a:	4a18      	ldr	r2, [pc, #96]	@ (80008fc <MX_SPI1_Init+0x68>)
 800089c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800089e:	4b16      	ldr	r3, [pc, #88]	@ (80008f8 <MX_SPI1_Init+0x64>)
 80008a0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80008a4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008a6:	4b14      	ldr	r3, [pc, #80]	@ (80008f8 <MX_SPI1_Init+0x64>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008ac:	4b12      	ldr	r3, [pc, #72]	@ (80008f8 <MX_SPI1_Init+0x64>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008b2:	4b11      	ldr	r3, [pc, #68]	@ (80008f8 <MX_SPI1_Init+0x64>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008b8:	4b0f      	ldr	r3, [pc, #60]	@ (80008f8 <MX_SPI1_Init+0x64>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008be:	4b0e      	ldr	r3, [pc, #56]	@ (80008f8 <MX_SPI1_Init+0x64>)
 80008c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008c4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008c6:	4b0c      	ldr	r3, [pc, #48]	@ (80008f8 <MX_SPI1_Init+0x64>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008cc:	4b0a      	ldr	r3, [pc, #40]	@ (80008f8 <MX_SPI1_Init+0x64>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008d2:	4b09      	ldr	r3, [pc, #36]	@ (80008f8 <MX_SPI1_Init+0x64>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008d8:	4b07      	ldr	r3, [pc, #28]	@ (80008f8 <MX_SPI1_Init+0x64>)
 80008da:	2200      	movs	r2, #0
 80008dc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80008de:	4b06      	ldr	r3, [pc, #24]	@ (80008f8 <MX_SPI1_Init+0x64>)
 80008e0:	220a      	movs	r2, #10
 80008e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008e4:	4804      	ldr	r0, [pc, #16]	@ (80008f8 <MX_SPI1_Init+0x64>)
 80008e6:	f005 f8a3 	bl	8005a30 <HAL_SPI_Init>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80008f0:	f000 fd7a 	bl	80013e8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008f4:	bf00      	nop
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	20000140 	.word	0x20000140
 80008fc:	40013000 	.word	0x40013000

08000900 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b088      	sub	sp, #32
 8000904:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000906:	f107 0310 	add.w	r3, r7, #16
 800090a:	2200      	movs	r2, #0
 800090c:	601a      	str	r2, [r3, #0]
 800090e:	605a      	str	r2, [r3, #4]
 8000910:	609a      	str	r2, [r3, #8]
 8000912:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000914:	f107 0308 	add.w	r3, r7, #8
 8000918:	2200      	movs	r2, #0
 800091a:	601a      	str	r2, [r3, #0]
 800091c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	607b      	str	r3, [r7, #4]
 8000922:	4b26      	ldr	r3, [pc, #152]	@ (80009bc <MX_TIM1_Init+0xbc>)
 8000924:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000926:	4a25      	ldr	r2, [pc, #148]	@ (80009bc <MX_TIM1_Init+0xbc>)
 8000928:	f043 0301 	orr.w	r3, r3, #1
 800092c:	6453      	str	r3, [r2, #68]	@ 0x44
 800092e:	4b23      	ldr	r3, [pc, #140]	@ (80009bc <MX_TIM1_Init+0xbc>)
 8000930:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000932:	f003 0301 	and.w	r3, r3, #1
 8000936:	607b      	str	r3, [r7, #4]
 8000938:	687b      	ldr	r3, [r7, #4]
  htim1.Instance = TIM1;
 800093a:	4b21      	ldr	r3, [pc, #132]	@ (80009c0 <MX_TIM1_Init+0xc0>)
 800093c:	4a21      	ldr	r2, [pc, #132]	@ (80009c4 <MX_TIM1_Init+0xc4>)
 800093e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16000 - 1;
 8000940:	4b1f      	ldr	r3, [pc, #124]	@ (80009c0 <MX_TIM1_Init+0xc0>)
 8000942:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 8000946:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000948:	4b1d      	ldr	r3, [pc, #116]	@ (80009c0 <MX_TIM1_Init+0xc0>)
 800094a:	2200      	movs	r2, #0
 800094c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800094e:	4b1c      	ldr	r3, [pc, #112]	@ (80009c0 <MX_TIM1_Init+0xc0>)
 8000950:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000954:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000956:	4b1a      	ldr	r3, [pc, #104]	@ (80009c0 <MX_TIM1_Init+0xc0>)
 8000958:	2200      	movs	r2, #0
 800095a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800095c:	4b18      	ldr	r3, [pc, #96]	@ (80009c0 <MX_TIM1_Init+0xc0>)
 800095e:	2200      	movs	r2, #0
 8000960:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000962:	4b17      	ldr	r3, [pc, #92]	@ (80009c0 <MX_TIM1_Init+0xc0>)
 8000964:	2200      	movs	r2, #0
 8000966:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000968:	4815      	ldr	r0, [pc, #84]	@ (80009c0 <MX_TIM1_Init+0xc0>)
 800096a:	f005 f8ea 	bl	8005b42 <HAL_TIM_Base_Init>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000974:	f000 fd38 	bl	80013e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000978:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800097c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800097e:	f107 0310 	add.w	r3, r7, #16
 8000982:	4619      	mov	r1, r3
 8000984:	480e      	ldr	r0, [pc, #56]	@ (80009c0 <MX_TIM1_Init+0xc0>)
 8000986:	f005 f993 	bl	8005cb0 <HAL_TIM_ConfigClockSource>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000990:	f000 fd2a 	bl	80013e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000994:	2300      	movs	r3, #0
 8000996:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000998:	2300      	movs	r3, #0
 800099a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800099c:	f107 0308 	add.w	r3, r7, #8
 80009a0:	4619      	mov	r1, r3
 80009a2:	4807      	ldr	r0, [pc, #28]	@ (80009c0 <MX_TIM1_Init+0xc0>)
 80009a4:	f005 fb92 	bl	80060cc <HAL_TIMEx_MasterConfigSynchronization>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <MX_TIM1_Init+0xb2>
  {
    Error_Handler();
 80009ae:	f000 fd1b 	bl	80013e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80009b2:	bf00      	nop
 80009b4:	3720      	adds	r7, #32
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	40023800 	.word	0x40023800
 80009c0:	20000198 	.word	0x20000198
 80009c4:	40010000 	.word	0x40010000

080009c8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009cc:	4b11      	ldr	r3, [pc, #68]	@ (8000a14 <MX_USART3_UART_Init+0x4c>)
 80009ce:	4a12      	ldr	r2, [pc, #72]	@ (8000a18 <MX_USART3_UART_Init+0x50>)
 80009d0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80009d2:	4b10      	ldr	r3, [pc, #64]	@ (8000a14 <MX_USART3_UART_Init+0x4c>)
 80009d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009d8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009da:	4b0e      	ldr	r3, [pc, #56]	@ (8000a14 <MX_USART3_UART_Init+0x4c>)
 80009dc:	2200      	movs	r2, #0
 80009de:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000a14 <MX_USART3_UART_Init+0x4c>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009e6:	4b0b      	ldr	r3, [pc, #44]	@ (8000a14 <MX_USART3_UART_Init+0x4c>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009ec:	4b09      	ldr	r3, [pc, #36]	@ (8000a14 <MX_USART3_UART_Init+0x4c>)
 80009ee:	220c      	movs	r2, #12
 80009f0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009f2:	4b08      	ldr	r3, [pc, #32]	@ (8000a14 <MX_USART3_UART_Init+0x4c>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009f8:	4b06      	ldr	r3, [pc, #24]	@ (8000a14 <MX_USART3_UART_Init+0x4c>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009fe:	4805      	ldr	r0, [pc, #20]	@ (8000a14 <MX_USART3_UART_Init+0x4c>)
 8000a00:	f005 fbe0 	bl	80061c4 <HAL_UART_Init>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000a0a:	f000 fced 	bl	80013e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a0e:	bf00      	nop
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	200001e0 	.word	0x200001e0
 8000a18:	40004800 	.word	0x40004800

08000a1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b08c      	sub	sp, #48	@ 0x30
 8000a20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a22:	f107 031c 	add.w	r3, r7, #28
 8000a26:	2200      	movs	r2, #0
 8000a28:	601a      	str	r2, [r3, #0]
 8000a2a:	605a      	str	r2, [r3, #4]
 8000a2c:	609a      	str	r2, [r3, #8]
 8000a2e:	60da      	str	r2, [r3, #12]
 8000a30:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a32:	2300      	movs	r3, #0
 8000a34:	61bb      	str	r3, [r7, #24]
 8000a36:	4b69      	ldr	r3, [pc, #420]	@ (8000bdc <MX_GPIO_Init+0x1c0>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a3a:	4a68      	ldr	r2, [pc, #416]	@ (8000bdc <MX_GPIO_Init+0x1c0>)
 8000a3c:	f043 0310 	orr.w	r3, r3, #16
 8000a40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a42:	4b66      	ldr	r3, [pc, #408]	@ (8000bdc <MX_GPIO_Init+0x1c0>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a46:	f003 0310 	and.w	r3, r3, #16
 8000a4a:	61bb      	str	r3, [r7, #24]
 8000a4c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	617b      	str	r3, [r7, #20]
 8000a52:	4b62      	ldr	r3, [pc, #392]	@ (8000bdc <MX_GPIO_Init+0x1c0>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a56:	4a61      	ldr	r2, [pc, #388]	@ (8000bdc <MX_GPIO_Init+0x1c0>)
 8000a58:	f043 0304 	orr.w	r3, r3, #4
 8000a5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a5e:	4b5f      	ldr	r3, [pc, #380]	@ (8000bdc <MX_GPIO_Init+0x1c0>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a62:	f003 0304 	and.w	r3, r3, #4
 8000a66:	617b      	str	r3, [r7, #20]
 8000a68:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	613b      	str	r3, [r7, #16]
 8000a6e:	4b5b      	ldr	r3, [pc, #364]	@ (8000bdc <MX_GPIO_Init+0x1c0>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a72:	4a5a      	ldr	r2, [pc, #360]	@ (8000bdc <MX_GPIO_Init+0x1c0>)
 8000a74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a7a:	4b58      	ldr	r3, [pc, #352]	@ (8000bdc <MX_GPIO_Init+0x1c0>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a82:	613b      	str	r3, [r7, #16]
 8000a84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a86:	2300      	movs	r3, #0
 8000a88:	60fb      	str	r3, [r7, #12]
 8000a8a:	4b54      	ldr	r3, [pc, #336]	@ (8000bdc <MX_GPIO_Init+0x1c0>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a8e:	4a53      	ldr	r2, [pc, #332]	@ (8000bdc <MX_GPIO_Init+0x1c0>)
 8000a90:	f043 0301 	orr.w	r3, r3, #1
 8000a94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a96:	4b51      	ldr	r3, [pc, #324]	@ (8000bdc <MX_GPIO_Init+0x1c0>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a9a:	f003 0301 	and.w	r3, r3, #1
 8000a9e:	60fb      	str	r3, [r7, #12]
 8000aa0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	60bb      	str	r3, [r7, #8]
 8000aa6:	4b4d      	ldr	r3, [pc, #308]	@ (8000bdc <MX_GPIO_Init+0x1c0>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aaa:	4a4c      	ldr	r2, [pc, #304]	@ (8000bdc <MX_GPIO_Init+0x1c0>)
 8000aac:	f043 0302 	orr.w	r3, r3, #2
 8000ab0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ab2:	4b4a      	ldr	r3, [pc, #296]	@ (8000bdc <MX_GPIO_Init+0x1c0>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab6:	f003 0302 	and.w	r3, r3, #2
 8000aba:	60bb      	str	r3, [r7, #8]
 8000abc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	607b      	str	r3, [r7, #4]
 8000ac2:	4b46      	ldr	r3, [pc, #280]	@ (8000bdc <MX_GPIO_Init+0x1c0>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac6:	4a45      	ldr	r2, [pc, #276]	@ (8000bdc <MX_GPIO_Init+0x1c0>)
 8000ac8:	f043 0308 	orr.w	r3, r3, #8
 8000acc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ace:	4b43      	ldr	r3, [pc, #268]	@ (8000bdc <MX_GPIO_Init+0x1c0>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad2:	f003 0308 	and.w	r3, r3, #8
 8000ad6:	607b      	str	r3, [r7, #4]
 8000ad8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000ada:	2200      	movs	r2, #0
 8000adc:	2108      	movs	r1, #8
 8000ade:	4840      	ldr	r0, [pc, #256]	@ (8000be0 <MX_GPIO_Init+0x1c4>)
 8000ae0:	f001 fa9a 	bl	8002018 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	2101      	movs	r1, #1
 8000ae8:	483e      	ldr	r0, [pc, #248]	@ (8000be4 <MX_GPIO_Init+0x1c8>)
 8000aea:	f001 fa95 	bl	8002018 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000aee:	2200      	movs	r2, #0
 8000af0:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000af4:	483c      	ldr	r0, [pc, #240]	@ (8000be8 <MX_GPIO_Init+0x1cc>)
 8000af6:	f001 fa8f 	bl	8002018 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000afa:	2308      	movs	r3, #8
 8000afc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000afe:	2301      	movs	r3, #1
 8000b00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b02:	2300      	movs	r3, #0
 8000b04:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b06:	2300      	movs	r3, #0
 8000b08:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000b0a:	f107 031c 	add.w	r3, r7, #28
 8000b0e:	4619      	mov	r1, r3
 8000b10:	4833      	ldr	r0, [pc, #204]	@ (8000be0 <MX_GPIO_Init+0x1c4>)
 8000b12:	f001 f8cd 	bl	8001cb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000b16:	2301      	movs	r3, #1
 8000b18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b22:	2300      	movs	r3, #0
 8000b24:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b26:	f107 031c 	add.w	r3, r7, #28
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	482d      	ldr	r0, [pc, #180]	@ (8000be4 <MX_GPIO_Init+0x1c8>)
 8000b2e:	f001 f8bf 	bl	8001cb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000b32:	2308      	movs	r3, #8
 8000b34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b36:	2302      	movs	r3, #2
 8000b38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b42:	2305      	movs	r3, #5
 8000b44:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000b46:	f107 031c 	add.w	r3, r7, #28
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	4825      	ldr	r0, [pc, #148]	@ (8000be4 <MX_GPIO_Init+0x1c8>)
 8000b4e:	f001 f8af 	bl	8001cb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b52:	2301      	movs	r3, #1
 8000b54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b56:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b60:	f107 031c 	add.w	r3, r7, #28
 8000b64:	4619      	mov	r1, r3
 8000b66:	4821      	ldr	r0, [pc, #132]	@ (8000bec <MX_GPIO_Init+0x1d0>)
 8000b68:	f001 f8a2 	bl	8001cb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000b6c:	2304      	movs	r3, #4
 8000b6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b70:	2300      	movs	r3, #0
 8000b72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b74:	2300      	movs	r3, #0
 8000b76:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000b78:	f107 031c 	add.w	r3, r7, #28
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	481c      	ldr	r0, [pc, #112]	@ (8000bf0 <MX_GPIO_Init+0x1d4>)
 8000b80:	f001 f896 	bl	8001cb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000b84:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000b88:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b92:	2300      	movs	r3, #0
 8000b94:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b96:	f107 031c 	add.w	r3, r7, #28
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	4812      	ldr	r0, [pc, #72]	@ (8000be8 <MX_GPIO_Init+0x1cc>)
 8000b9e:	f001 f887 	bl	8001cb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000ba2:	2320      	movs	r3, #32
 8000ba4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000baa:	2300      	movs	r3, #0
 8000bac:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000bae:	f107 031c 	add.w	r3, r7, #28
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	480c      	ldr	r0, [pc, #48]	@ (8000be8 <MX_GPIO_Init+0x1cc>)
 8000bb6:	f001 f87b 	bl	8001cb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000bba:	2302      	movs	r3, #2
 8000bbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000bbe:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000bc2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000bc8:	f107 031c 	add.w	r3, r7, #28
 8000bcc:	4619      	mov	r1, r3
 8000bce:	4804      	ldr	r0, [pc, #16]	@ (8000be0 <MX_GPIO_Init+0x1c4>)
 8000bd0:	f001 f86e 	bl	8001cb0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bd4:	bf00      	nop
 8000bd6:	3730      	adds	r7, #48	@ 0x30
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	40023800 	.word	0x40023800
 8000be0:	40021000 	.word	0x40021000
 8000be4:	40020800 	.word	0x40020800
 8000be8:	40020c00 	.word	0x40020c00
 8000bec:	40020000 	.word	0x40020000
 8000bf0:	40020400 	.word	0x40020400

08000bf4 <Get_Timestamp>:

/* USER CODE BEGIN 4 */
uint32_t Get_Timestamp(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
	 return __HAL_TIM_GET_COUNTER(&htim1);
 8000bf8:	4b03      	ldr	r3, [pc, #12]	@ (8000c08 <Get_Timestamp+0x14>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24

}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr
 8000c08:	20000198 	.word	0x20000198

08000c0c <decode_and_print_morse>:

void decode_and_print_morse(char *buffer)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
    printf("Codul Morse receptionat: %s -> ", buffer);
 8000c14:	6879      	ldr	r1, [r7, #4]
 8000c16:	4897      	ldr	r0, [pc, #604]	@ (8000e74 <decode_and_print_morse+0x268>)
 8000c18:	f009 fd58 	bl	800a6cc <iprintf>

    // Folosim un switch pentru a decodifica codul Morse
    if (strcmp(buffer, "*-") == 0 && buffer_cuvant_index < MAX_BUFFER_SIZE - 1)
 8000c1c:	4996      	ldr	r1, [pc, #600]	@ (8000e78 <decode_and_print_morse+0x26c>)
 8000c1e:	6878      	ldr	r0, [r7, #4]
 8000c20:	f7ff fad6 	bl	80001d0 <strcmp>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d10f      	bne.n	8000c4a <decode_and_print_morse+0x3e>
 8000c2a:	4b94      	ldr	r3, [pc, #592]	@ (8000e7c <decode_and_print_morse+0x270>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	2b62      	cmp	r3, #98	@ 0x62
 8000c30:	dc0b      	bgt.n	8000c4a <decode_and_print_morse+0x3e>
        printf("A\n\r"),buffer_cuvant[buffer_cuvant_index++] = 'A';
 8000c32:	4893      	ldr	r0, [pc, #588]	@ (8000e80 <decode_and_print_morse+0x274>)
 8000c34:	f009 fd4a 	bl	800a6cc <iprintf>
 8000c38:	4b90      	ldr	r3, [pc, #576]	@ (8000e7c <decode_and_print_morse+0x270>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	1c5a      	adds	r2, r3, #1
 8000c3e:	498f      	ldr	r1, [pc, #572]	@ (8000e7c <decode_and_print_morse+0x270>)
 8000c40:	600a      	str	r2, [r1, #0]
 8000c42:	4a90      	ldr	r2, [pc, #576]	@ (8000e84 <decode_and_print_morse+0x278>)
 8000c44:	2141      	movs	r1, #65	@ 0x41
 8000c46:	54d1      	strb	r1, [r2, r3]
 8000c48:	e39c      	b.n	8001384 <decode_and_print_morse+0x778>
    else if (strcmp(buffer, "-***") == 0 && buffer_cuvant_index < MAX_BUFFER_SIZE - 1)
 8000c4a:	498f      	ldr	r1, [pc, #572]	@ (8000e88 <decode_and_print_morse+0x27c>)
 8000c4c:	6878      	ldr	r0, [r7, #4]
 8000c4e:	f7ff fabf 	bl	80001d0 <strcmp>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d10f      	bne.n	8000c78 <decode_and_print_morse+0x6c>
 8000c58:	4b88      	ldr	r3, [pc, #544]	@ (8000e7c <decode_and_print_morse+0x270>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	2b62      	cmp	r3, #98	@ 0x62
 8000c5e:	dc0b      	bgt.n	8000c78 <decode_and_print_morse+0x6c>
        printf("B\n\r"),buffer_cuvant[buffer_cuvant_index++] = 'B';
 8000c60:	488a      	ldr	r0, [pc, #552]	@ (8000e8c <decode_and_print_morse+0x280>)
 8000c62:	f009 fd33 	bl	800a6cc <iprintf>
 8000c66:	4b85      	ldr	r3, [pc, #532]	@ (8000e7c <decode_and_print_morse+0x270>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	1c5a      	adds	r2, r3, #1
 8000c6c:	4983      	ldr	r1, [pc, #524]	@ (8000e7c <decode_and_print_morse+0x270>)
 8000c6e:	600a      	str	r2, [r1, #0]
 8000c70:	4a84      	ldr	r2, [pc, #528]	@ (8000e84 <decode_and_print_morse+0x278>)
 8000c72:	2142      	movs	r1, #66	@ 0x42
 8000c74:	54d1      	strb	r1, [r2, r3]
 8000c76:	e385      	b.n	8001384 <decode_and_print_morse+0x778>
    else if (strcmp(buffer, "-*-*") == 0 && buffer_cuvant_index < MAX_BUFFER_SIZE - 1)
 8000c78:	4985      	ldr	r1, [pc, #532]	@ (8000e90 <decode_and_print_morse+0x284>)
 8000c7a:	6878      	ldr	r0, [r7, #4]
 8000c7c:	f7ff faa8 	bl	80001d0 <strcmp>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d10f      	bne.n	8000ca6 <decode_and_print_morse+0x9a>
 8000c86:	4b7d      	ldr	r3, [pc, #500]	@ (8000e7c <decode_and_print_morse+0x270>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	2b62      	cmp	r3, #98	@ 0x62
 8000c8c:	dc0b      	bgt.n	8000ca6 <decode_and_print_morse+0x9a>
        printf("C\n\r"),buffer_cuvant[buffer_cuvant_index++] = 'C';
 8000c8e:	4881      	ldr	r0, [pc, #516]	@ (8000e94 <decode_and_print_morse+0x288>)
 8000c90:	f009 fd1c 	bl	800a6cc <iprintf>
 8000c94:	4b79      	ldr	r3, [pc, #484]	@ (8000e7c <decode_and_print_morse+0x270>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	1c5a      	adds	r2, r3, #1
 8000c9a:	4978      	ldr	r1, [pc, #480]	@ (8000e7c <decode_and_print_morse+0x270>)
 8000c9c:	600a      	str	r2, [r1, #0]
 8000c9e:	4a79      	ldr	r2, [pc, #484]	@ (8000e84 <decode_and_print_morse+0x278>)
 8000ca0:	2143      	movs	r1, #67	@ 0x43
 8000ca2:	54d1      	strb	r1, [r2, r3]
 8000ca4:	e36e      	b.n	8001384 <decode_and_print_morse+0x778>
    else if (strcmp(buffer, "-**") == 0 && buffer_cuvant_index < MAX_BUFFER_SIZE - 1)
 8000ca6:	497c      	ldr	r1, [pc, #496]	@ (8000e98 <decode_and_print_morse+0x28c>)
 8000ca8:	6878      	ldr	r0, [r7, #4]
 8000caa:	f7ff fa91 	bl	80001d0 <strcmp>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d10f      	bne.n	8000cd4 <decode_and_print_morse+0xc8>
 8000cb4:	4b71      	ldr	r3, [pc, #452]	@ (8000e7c <decode_and_print_morse+0x270>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	2b62      	cmp	r3, #98	@ 0x62
 8000cba:	dc0b      	bgt.n	8000cd4 <decode_and_print_morse+0xc8>
        printf("D\n\r"),buffer_cuvant[buffer_cuvant_index++] = 'D';
 8000cbc:	4877      	ldr	r0, [pc, #476]	@ (8000e9c <decode_and_print_morse+0x290>)
 8000cbe:	f009 fd05 	bl	800a6cc <iprintf>
 8000cc2:	4b6e      	ldr	r3, [pc, #440]	@ (8000e7c <decode_and_print_morse+0x270>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	1c5a      	adds	r2, r3, #1
 8000cc8:	496c      	ldr	r1, [pc, #432]	@ (8000e7c <decode_and_print_morse+0x270>)
 8000cca:	600a      	str	r2, [r1, #0]
 8000ccc:	4a6d      	ldr	r2, [pc, #436]	@ (8000e84 <decode_and_print_morse+0x278>)
 8000cce:	2144      	movs	r1, #68	@ 0x44
 8000cd0:	54d1      	strb	r1, [r2, r3]
 8000cd2:	e357      	b.n	8001384 <decode_and_print_morse+0x778>
    else if (strcmp(buffer, "*") == 0 && buffer_cuvant_index < MAX_BUFFER_SIZE - 1)
 8000cd4:	4972      	ldr	r1, [pc, #456]	@ (8000ea0 <decode_and_print_morse+0x294>)
 8000cd6:	6878      	ldr	r0, [r7, #4]
 8000cd8:	f7ff fa7a 	bl	80001d0 <strcmp>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d10f      	bne.n	8000d02 <decode_and_print_morse+0xf6>
 8000ce2:	4b66      	ldr	r3, [pc, #408]	@ (8000e7c <decode_and_print_morse+0x270>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	2b62      	cmp	r3, #98	@ 0x62
 8000ce8:	dc0b      	bgt.n	8000d02 <decode_and_print_morse+0xf6>
        printf("E\n\r"),buffer_cuvant[buffer_cuvant_index++] = 'E';
 8000cea:	486e      	ldr	r0, [pc, #440]	@ (8000ea4 <decode_and_print_morse+0x298>)
 8000cec:	f009 fcee 	bl	800a6cc <iprintf>
 8000cf0:	4b62      	ldr	r3, [pc, #392]	@ (8000e7c <decode_and_print_morse+0x270>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	1c5a      	adds	r2, r3, #1
 8000cf6:	4961      	ldr	r1, [pc, #388]	@ (8000e7c <decode_and_print_morse+0x270>)
 8000cf8:	600a      	str	r2, [r1, #0]
 8000cfa:	4a62      	ldr	r2, [pc, #392]	@ (8000e84 <decode_and_print_morse+0x278>)
 8000cfc:	2145      	movs	r1, #69	@ 0x45
 8000cfe:	54d1      	strb	r1, [r2, r3]
 8000d00:	e340      	b.n	8001384 <decode_and_print_morse+0x778>
    else if (strcmp(buffer, "**-*") == 0 && buffer_cuvant_index < MAX_BUFFER_SIZE - 1)
 8000d02:	4969      	ldr	r1, [pc, #420]	@ (8000ea8 <decode_and_print_morse+0x29c>)
 8000d04:	6878      	ldr	r0, [r7, #4]
 8000d06:	f7ff fa63 	bl	80001d0 <strcmp>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d10f      	bne.n	8000d30 <decode_and_print_morse+0x124>
 8000d10:	4b5a      	ldr	r3, [pc, #360]	@ (8000e7c <decode_and_print_morse+0x270>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	2b62      	cmp	r3, #98	@ 0x62
 8000d16:	dc0b      	bgt.n	8000d30 <decode_and_print_morse+0x124>
        printf("F\n\r"),buffer_cuvant[buffer_cuvant_index++] = 'F';
 8000d18:	4864      	ldr	r0, [pc, #400]	@ (8000eac <decode_and_print_morse+0x2a0>)
 8000d1a:	f009 fcd7 	bl	800a6cc <iprintf>
 8000d1e:	4b57      	ldr	r3, [pc, #348]	@ (8000e7c <decode_and_print_morse+0x270>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	1c5a      	adds	r2, r3, #1
 8000d24:	4955      	ldr	r1, [pc, #340]	@ (8000e7c <decode_and_print_morse+0x270>)
 8000d26:	600a      	str	r2, [r1, #0]
 8000d28:	4a56      	ldr	r2, [pc, #344]	@ (8000e84 <decode_and_print_morse+0x278>)
 8000d2a:	2146      	movs	r1, #70	@ 0x46
 8000d2c:	54d1      	strb	r1, [r2, r3]
 8000d2e:	e329      	b.n	8001384 <decode_and_print_morse+0x778>
    else if (strcmp(buffer, "--*") == 0 && buffer_cuvant_index < MAX_BUFFER_SIZE - 1)
 8000d30:	495f      	ldr	r1, [pc, #380]	@ (8000eb0 <decode_and_print_morse+0x2a4>)
 8000d32:	6878      	ldr	r0, [r7, #4]
 8000d34:	f7ff fa4c 	bl	80001d0 <strcmp>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d10f      	bne.n	8000d5e <decode_and_print_morse+0x152>
 8000d3e:	4b4f      	ldr	r3, [pc, #316]	@ (8000e7c <decode_and_print_morse+0x270>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	2b62      	cmp	r3, #98	@ 0x62
 8000d44:	dc0b      	bgt.n	8000d5e <decode_and_print_morse+0x152>
        printf("G\n\r"),buffer_cuvant[buffer_cuvant_index++] = 'G';
 8000d46:	485b      	ldr	r0, [pc, #364]	@ (8000eb4 <decode_and_print_morse+0x2a8>)
 8000d48:	f009 fcc0 	bl	800a6cc <iprintf>
 8000d4c:	4b4b      	ldr	r3, [pc, #300]	@ (8000e7c <decode_and_print_morse+0x270>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	1c5a      	adds	r2, r3, #1
 8000d52:	494a      	ldr	r1, [pc, #296]	@ (8000e7c <decode_and_print_morse+0x270>)
 8000d54:	600a      	str	r2, [r1, #0]
 8000d56:	4a4b      	ldr	r2, [pc, #300]	@ (8000e84 <decode_and_print_morse+0x278>)
 8000d58:	2147      	movs	r1, #71	@ 0x47
 8000d5a:	54d1      	strb	r1, [r2, r3]
 8000d5c:	e312      	b.n	8001384 <decode_and_print_morse+0x778>
    else if (strcmp(buffer, "****") == 0 && buffer_cuvant_index < MAX_BUFFER_SIZE - 1)
 8000d5e:	4956      	ldr	r1, [pc, #344]	@ (8000eb8 <decode_and_print_morse+0x2ac>)
 8000d60:	6878      	ldr	r0, [r7, #4]
 8000d62:	f7ff fa35 	bl	80001d0 <strcmp>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d10f      	bne.n	8000d8c <decode_and_print_morse+0x180>
 8000d6c:	4b43      	ldr	r3, [pc, #268]	@ (8000e7c <decode_and_print_morse+0x270>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	2b62      	cmp	r3, #98	@ 0x62
 8000d72:	dc0b      	bgt.n	8000d8c <decode_and_print_morse+0x180>
        printf("H\n\r"),buffer_cuvant[buffer_cuvant_index++] = 'H';
 8000d74:	4851      	ldr	r0, [pc, #324]	@ (8000ebc <decode_and_print_morse+0x2b0>)
 8000d76:	f009 fca9 	bl	800a6cc <iprintf>
 8000d7a:	4b40      	ldr	r3, [pc, #256]	@ (8000e7c <decode_and_print_morse+0x270>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	1c5a      	adds	r2, r3, #1
 8000d80:	493e      	ldr	r1, [pc, #248]	@ (8000e7c <decode_and_print_morse+0x270>)
 8000d82:	600a      	str	r2, [r1, #0]
 8000d84:	4a3f      	ldr	r2, [pc, #252]	@ (8000e84 <decode_and_print_morse+0x278>)
 8000d86:	2148      	movs	r1, #72	@ 0x48
 8000d88:	54d1      	strb	r1, [r2, r3]
 8000d8a:	e2fb      	b.n	8001384 <decode_and_print_morse+0x778>
    else if (strcmp(buffer, "**") == 0 && buffer_cuvant_index < MAX_BUFFER_SIZE - 1)
 8000d8c:	494c      	ldr	r1, [pc, #304]	@ (8000ec0 <decode_and_print_morse+0x2b4>)
 8000d8e:	6878      	ldr	r0, [r7, #4]
 8000d90:	f7ff fa1e 	bl	80001d0 <strcmp>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d10f      	bne.n	8000dba <decode_and_print_morse+0x1ae>
 8000d9a:	4b38      	ldr	r3, [pc, #224]	@ (8000e7c <decode_and_print_morse+0x270>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	2b62      	cmp	r3, #98	@ 0x62
 8000da0:	dc0b      	bgt.n	8000dba <decode_and_print_morse+0x1ae>
        printf("I\n\r"),buffer_cuvant[buffer_cuvant_index++] = 'I';
 8000da2:	4848      	ldr	r0, [pc, #288]	@ (8000ec4 <decode_and_print_morse+0x2b8>)
 8000da4:	f009 fc92 	bl	800a6cc <iprintf>
 8000da8:	4b34      	ldr	r3, [pc, #208]	@ (8000e7c <decode_and_print_morse+0x270>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	1c5a      	adds	r2, r3, #1
 8000dae:	4933      	ldr	r1, [pc, #204]	@ (8000e7c <decode_and_print_morse+0x270>)
 8000db0:	600a      	str	r2, [r1, #0]
 8000db2:	4a34      	ldr	r2, [pc, #208]	@ (8000e84 <decode_and_print_morse+0x278>)
 8000db4:	2149      	movs	r1, #73	@ 0x49
 8000db6:	54d1      	strb	r1, [r2, r3]
 8000db8:	e2e4      	b.n	8001384 <decode_and_print_morse+0x778>
    else if (strcmp(buffer, "*---") == 0 && buffer_cuvant_index < MAX_BUFFER_SIZE - 1)
 8000dba:	4943      	ldr	r1, [pc, #268]	@ (8000ec8 <decode_and_print_morse+0x2bc>)
 8000dbc:	6878      	ldr	r0, [r7, #4]
 8000dbe:	f7ff fa07 	bl	80001d0 <strcmp>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d10f      	bne.n	8000de8 <decode_and_print_morse+0x1dc>
 8000dc8:	4b2c      	ldr	r3, [pc, #176]	@ (8000e7c <decode_and_print_morse+0x270>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	2b62      	cmp	r3, #98	@ 0x62
 8000dce:	dc0b      	bgt.n	8000de8 <decode_and_print_morse+0x1dc>
        printf("J\n\r"),buffer_cuvant[buffer_cuvant_index++] = 'J';
 8000dd0:	483e      	ldr	r0, [pc, #248]	@ (8000ecc <decode_and_print_morse+0x2c0>)
 8000dd2:	f009 fc7b 	bl	800a6cc <iprintf>
 8000dd6:	4b29      	ldr	r3, [pc, #164]	@ (8000e7c <decode_and_print_morse+0x270>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	1c5a      	adds	r2, r3, #1
 8000ddc:	4927      	ldr	r1, [pc, #156]	@ (8000e7c <decode_and_print_morse+0x270>)
 8000dde:	600a      	str	r2, [r1, #0]
 8000de0:	4a28      	ldr	r2, [pc, #160]	@ (8000e84 <decode_and_print_morse+0x278>)
 8000de2:	214a      	movs	r1, #74	@ 0x4a
 8000de4:	54d1      	strb	r1, [r2, r3]
 8000de6:	e2cd      	b.n	8001384 <decode_and_print_morse+0x778>
    else if (strcmp(buffer, "-*-") == 0 && buffer_cuvant_index < MAX_BUFFER_SIZE - 1)
 8000de8:	4939      	ldr	r1, [pc, #228]	@ (8000ed0 <decode_and_print_morse+0x2c4>)
 8000dea:	6878      	ldr	r0, [r7, #4]
 8000dec:	f7ff f9f0 	bl	80001d0 <strcmp>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d10f      	bne.n	8000e16 <decode_and_print_morse+0x20a>
 8000df6:	4b21      	ldr	r3, [pc, #132]	@ (8000e7c <decode_and_print_morse+0x270>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	2b62      	cmp	r3, #98	@ 0x62
 8000dfc:	dc0b      	bgt.n	8000e16 <decode_and_print_morse+0x20a>
        printf("K\n\r"),buffer_cuvant[buffer_cuvant_index++] = 'K';
 8000dfe:	4835      	ldr	r0, [pc, #212]	@ (8000ed4 <decode_and_print_morse+0x2c8>)
 8000e00:	f009 fc64 	bl	800a6cc <iprintf>
 8000e04:	4b1d      	ldr	r3, [pc, #116]	@ (8000e7c <decode_and_print_morse+0x270>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	1c5a      	adds	r2, r3, #1
 8000e0a:	491c      	ldr	r1, [pc, #112]	@ (8000e7c <decode_and_print_morse+0x270>)
 8000e0c:	600a      	str	r2, [r1, #0]
 8000e0e:	4a1d      	ldr	r2, [pc, #116]	@ (8000e84 <decode_and_print_morse+0x278>)
 8000e10:	214b      	movs	r1, #75	@ 0x4b
 8000e12:	54d1      	strb	r1, [r2, r3]
 8000e14:	e2b6      	b.n	8001384 <decode_and_print_morse+0x778>
    else if (strcmp(buffer, "*-**") == 0 && buffer_cuvant_index < MAX_BUFFER_SIZE - 1)
 8000e16:	4930      	ldr	r1, [pc, #192]	@ (8000ed8 <decode_and_print_morse+0x2cc>)
 8000e18:	6878      	ldr	r0, [r7, #4]
 8000e1a:	f7ff f9d9 	bl	80001d0 <strcmp>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d10f      	bne.n	8000e44 <decode_and_print_morse+0x238>
 8000e24:	4b15      	ldr	r3, [pc, #84]	@ (8000e7c <decode_and_print_morse+0x270>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	2b62      	cmp	r3, #98	@ 0x62
 8000e2a:	dc0b      	bgt.n	8000e44 <decode_and_print_morse+0x238>
        printf("L\n\r"),buffer_cuvant[buffer_cuvant_index++] = 'L';
 8000e2c:	482b      	ldr	r0, [pc, #172]	@ (8000edc <decode_and_print_morse+0x2d0>)
 8000e2e:	f009 fc4d 	bl	800a6cc <iprintf>
 8000e32:	4b12      	ldr	r3, [pc, #72]	@ (8000e7c <decode_and_print_morse+0x270>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	1c5a      	adds	r2, r3, #1
 8000e38:	4910      	ldr	r1, [pc, #64]	@ (8000e7c <decode_and_print_morse+0x270>)
 8000e3a:	600a      	str	r2, [r1, #0]
 8000e3c:	4a11      	ldr	r2, [pc, #68]	@ (8000e84 <decode_and_print_morse+0x278>)
 8000e3e:	214c      	movs	r1, #76	@ 0x4c
 8000e40:	54d1      	strb	r1, [r2, r3]
 8000e42:	e29f      	b.n	8001384 <decode_and_print_morse+0x778>
    else if (strcmp(buffer, "--") == 0 && buffer_cuvant_index < MAX_BUFFER_SIZE - 1)
 8000e44:	4926      	ldr	r1, [pc, #152]	@ (8000ee0 <decode_and_print_morse+0x2d4>)
 8000e46:	6878      	ldr	r0, [r7, #4]
 8000e48:	f7ff f9c2 	bl	80001d0 <strcmp>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d14a      	bne.n	8000ee8 <decode_and_print_morse+0x2dc>
 8000e52:	4b0a      	ldr	r3, [pc, #40]	@ (8000e7c <decode_and_print_morse+0x270>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	2b62      	cmp	r3, #98	@ 0x62
 8000e58:	dc46      	bgt.n	8000ee8 <decode_and_print_morse+0x2dc>
        printf("M\n\r"),buffer_cuvant[buffer_cuvant_index++] = 'M';
 8000e5a:	4822      	ldr	r0, [pc, #136]	@ (8000ee4 <decode_and_print_morse+0x2d8>)
 8000e5c:	f009 fc36 	bl	800a6cc <iprintf>
 8000e60:	4b06      	ldr	r3, [pc, #24]	@ (8000e7c <decode_and_print_morse+0x270>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	1c5a      	adds	r2, r3, #1
 8000e66:	4905      	ldr	r1, [pc, #20]	@ (8000e7c <decode_and_print_morse+0x270>)
 8000e68:	600a      	str	r2, [r1, #0]
 8000e6a:	4a06      	ldr	r2, [pc, #24]	@ (8000e84 <decode_and_print_morse+0x278>)
 8000e6c:	214d      	movs	r1, #77	@ 0x4d
 8000e6e:	54d1      	strb	r1, [r2, r3]
 8000e70:	e288      	b.n	8001384 <decode_and_print_morse+0x778>
 8000e72:	bf00      	nop
 8000e74:	0800b2c4 	.word	0x0800b2c4
 8000e78:	0800b2e4 	.word	0x0800b2e4
 8000e7c:	200002f4 	.word	0x200002f4
 8000e80:	0800b2e8 	.word	0x0800b2e8
 8000e84:	2000028c 	.word	0x2000028c
 8000e88:	0800b2ec 	.word	0x0800b2ec
 8000e8c:	0800b2f4 	.word	0x0800b2f4
 8000e90:	0800b2f8 	.word	0x0800b2f8
 8000e94:	0800b300 	.word	0x0800b300
 8000e98:	0800b304 	.word	0x0800b304
 8000e9c:	0800b308 	.word	0x0800b308
 8000ea0:	0800b30c 	.word	0x0800b30c
 8000ea4:	0800b310 	.word	0x0800b310
 8000ea8:	0800b314 	.word	0x0800b314
 8000eac:	0800b31c 	.word	0x0800b31c
 8000eb0:	0800b320 	.word	0x0800b320
 8000eb4:	0800b324 	.word	0x0800b324
 8000eb8:	0800b328 	.word	0x0800b328
 8000ebc:	0800b330 	.word	0x0800b330
 8000ec0:	0800b334 	.word	0x0800b334
 8000ec4:	0800b338 	.word	0x0800b338
 8000ec8:	0800b33c 	.word	0x0800b33c
 8000ecc:	0800b344 	.word	0x0800b344
 8000ed0:	0800b348 	.word	0x0800b348
 8000ed4:	0800b34c 	.word	0x0800b34c
 8000ed8:	0800b350 	.word	0x0800b350
 8000edc:	0800b358 	.word	0x0800b358
 8000ee0:	0800b35c 	.word	0x0800b35c
 8000ee4:	0800b360 	.word	0x0800b360
    else if (strcmp(buffer, "-*") == 0 && buffer_cuvant_index < MAX_BUFFER_SIZE - 1)
 8000ee8:	4995      	ldr	r1, [pc, #596]	@ (8001140 <decode_and_print_morse+0x534>)
 8000eea:	6878      	ldr	r0, [r7, #4]
 8000eec:	f7ff f970 	bl	80001d0 <strcmp>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d10f      	bne.n	8000f16 <decode_and_print_morse+0x30a>
 8000ef6:	4b93      	ldr	r3, [pc, #588]	@ (8001144 <decode_and_print_morse+0x538>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	2b62      	cmp	r3, #98	@ 0x62
 8000efc:	dc0b      	bgt.n	8000f16 <decode_and_print_morse+0x30a>
        printf("N\n\r"),buffer_cuvant[buffer_cuvant_index++] = 'N';
 8000efe:	4892      	ldr	r0, [pc, #584]	@ (8001148 <decode_and_print_morse+0x53c>)
 8000f00:	f009 fbe4 	bl	800a6cc <iprintf>
 8000f04:	4b8f      	ldr	r3, [pc, #572]	@ (8001144 <decode_and_print_morse+0x538>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	1c5a      	adds	r2, r3, #1
 8000f0a:	498e      	ldr	r1, [pc, #568]	@ (8001144 <decode_and_print_morse+0x538>)
 8000f0c:	600a      	str	r2, [r1, #0]
 8000f0e:	4a8f      	ldr	r2, [pc, #572]	@ (800114c <decode_and_print_morse+0x540>)
 8000f10:	214e      	movs	r1, #78	@ 0x4e
 8000f12:	54d1      	strb	r1, [r2, r3]
 8000f14:	e236      	b.n	8001384 <decode_and_print_morse+0x778>
    else if (strcmp(buffer, "---") == 0 && buffer_cuvant_index < MAX_BUFFER_SIZE - 1)
 8000f16:	498e      	ldr	r1, [pc, #568]	@ (8001150 <decode_and_print_morse+0x544>)
 8000f18:	6878      	ldr	r0, [r7, #4]
 8000f1a:	f7ff f959 	bl	80001d0 <strcmp>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d10f      	bne.n	8000f44 <decode_and_print_morse+0x338>
 8000f24:	4b87      	ldr	r3, [pc, #540]	@ (8001144 <decode_and_print_morse+0x538>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	2b62      	cmp	r3, #98	@ 0x62
 8000f2a:	dc0b      	bgt.n	8000f44 <decode_and_print_morse+0x338>
        printf("O\n\r"),buffer_cuvant[buffer_cuvant_index++] = 'O';
 8000f2c:	4889      	ldr	r0, [pc, #548]	@ (8001154 <decode_and_print_morse+0x548>)
 8000f2e:	f009 fbcd 	bl	800a6cc <iprintf>
 8000f32:	4b84      	ldr	r3, [pc, #528]	@ (8001144 <decode_and_print_morse+0x538>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	1c5a      	adds	r2, r3, #1
 8000f38:	4982      	ldr	r1, [pc, #520]	@ (8001144 <decode_and_print_morse+0x538>)
 8000f3a:	600a      	str	r2, [r1, #0]
 8000f3c:	4a83      	ldr	r2, [pc, #524]	@ (800114c <decode_and_print_morse+0x540>)
 8000f3e:	214f      	movs	r1, #79	@ 0x4f
 8000f40:	54d1      	strb	r1, [r2, r3]
 8000f42:	e21f      	b.n	8001384 <decode_and_print_morse+0x778>
    else if (strcmp(buffer, "*--*") == 0 && buffer_cuvant_index < MAX_BUFFER_SIZE - 1)
 8000f44:	4984      	ldr	r1, [pc, #528]	@ (8001158 <decode_and_print_morse+0x54c>)
 8000f46:	6878      	ldr	r0, [r7, #4]
 8000f48:	f7ff f942 	bl	80001d0 <strcmp>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d10f      	bne.n	8000f72 <decode_and_print_morse+0x366>
 8000f52:	4b7c      	ldr	r3, [pc, #496]	@ (8001144 <decode_and_print_morse+0x538>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	2b62      	cmp	r3, #98	@ 0x62
 8000f58:	dc0b      	bgt.n	8000f72 <decode_and_print_morse+0x366>
        printf("P\n\r"),buffer_cuvant[buffer_cuvant_index++] = 'P';
 8000f5a:	4880      	ldr	r0, [pc, #512]	@ (800115c <decode_and_print_morse+0x550>)
 8000f5c:	f009 fbb6 	bl	800a6cc <iprintf>
 8000f60:	4b78      	ldr	r3, [pc, #480]	@ (8001144 <decode_and_print_morse+0x538>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	1c5a      	adds	r2, r3, #1
 8000f66:	4977      	ldr	r1, [pc, #476]	@ (8001144 <decode_and_print_morse+0x538>)
 8000f68:	600a      	str	r2, [r1, #0]
 8000f6a:	4a78      	ldr	r2, [pc, #480]	@ (800114c <decode_and_print_morse+0x540>)
 8000f6c:	2150      	movs	r1, #80	@ 0x50
 8000f6e:	54d1      	strb	r1, [r2, r3]
 8000f70:	e208      	b.n	8001384 <decode_and_print_morse+0x778>
    else if (strcmp(buffer, "--*-") == 0 && buffer_cuvant_index < MAX_BUFFER_SIZE - 1)
 8000f72:	497b      	ldr	r1, [pc, #492]	@ (8001160 <decode_and_print_morse+0x554>)
 8000f74:	6878      	ldr	r0, [r7, #4]
 8000f76:	f7ff f92b 	bl	80001d0 <strcmp>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d10f      	bne.n	8000fa0 <decode_and_print_morse+0x394>
 8000f80:	4b70      	ldr	r3, [pc, #448]	@ (8001144 <decode_and_print_morse+0x538>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	2b62      	cmp	r3, #98	@ 0x62
 8000f86:	dc0b      	bgt.n	8000fa0 <decode_and_print_morse+0x394>
        printf("Q\n\r"),buffer_cuvant[buffer_cuvant_index++] = 'Q';
 8000f88:	4876      	ldr	r0, [pc, #472]	@ (8001164 <decode_and_print_morse+0x558>)
 8000f8a:	f009 fb9f 	bl	800a6cc <iprintf>
 8000f8e:	4b6d      	ldr	r3, [pc, #436]	@ (8001144 <decode_and_print_morse+0x538>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	1c5a      	adds	r2, r3, #1
 8000f94:	496b      	ldr	r1, [pc, #428]	@ (8001144 <decode_and_print_morse+0x538>)
 8000f96:	600a      	str	r2, [r1, #0]
 8000f98:	4a6c      	ldr	r2, [pc, #432]	@ (800114c <decode_and_print_morse+0x540>)
 8000f9a:	2151      	movs	r1, #81	@ 0x51
 8000f9c:	54d1      	strb	r1, [r2, r3]
 8000f9e:	e1f1      	b.n	8001384 <decode_and_print_morse+0x778>
    else if (strcmp(buffer, "*-*") == 0 && buffer_cuvant_index < MAX_BUFFER_SIZE - 1)
 8000fa0:	4971      	ldr	r1, [pc, #452]	@ (8001168 <decode_and_print_morse+0x55c>)
 8000fa2:	6878      	ldr	r0, [r7, #4]
 8000fa4:	f7ff f914 	bl	80001d0 <strcmp>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d10f      	bne.n	8000fce <decode_and_print_morse+0x3c2>
 8000fae:	4b65      	ldr	r3, [pc, #404]	@ (8001144 <decode_and_print_morse+0x538>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	2b62      	cmp	r3, #98	@ 0x62
 8000fb4:	dc0b      	bgt.n	8000fce <decode_and_print_morse+0x3c2>
        printf("R\n\r"),buffer_cuvant[buffer_cuvant_index++] = 'R';
 8000fb6:	486d      	ldr	r0, [pc, #436]	@ (800116c <decode_and_print_morse+0x560>)
 8000fb8:	f009 fb88 	bl	800a6cc <iprintf>
 8000fbc:	4b61      	ldr	r3, [pc, #388]	@ (8001144 <decode_and_print_morse+0x538>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	1c5a      	adds	r2, r3, #1
 8000fc2:	4960      	ldr	r1, [pc, #384]	@ (8001144 <decode_and_print_morse+0x538>)
 8000fc4:	600a      	str	r2, [r1, #0]
 8000fc6:	4a61      	ldr	r2, [pc, #388]	@ (800114c <decode_and_print_morse+0x540>)
 8000fc8:	2152      	movs	r1, #82	@ 0x52
 8000fca:	54d1      	strb	r1, [r2, r3]
 8000fcc:	e1da      	b.n	8001384 <decode_and_print_morse+0x778>
    else if (strcmp(buffer, "***") == 0 && buffer_cuvant_index < MAX_BUFFER_SIZE - 1)
 8000fce:	4968      	ldr	r1, [pc, #416]	@ (8001170 <decode_and_print_morse+0x564>)
 8000fd0:	6878      	ldr	r0, [r7, #4]
 8000fd2:	f7ff f8fd 	bl	80001d0 <strcmp>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d10f      	bne.n	8000ffc <decode_and_print_morse+0x3f0>
 8000fdc:	4b59      	ldr	r3, [pc, #356]	@ (8001144 <decode_and_print_morse+0x538>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	2b62      	cmp	r3, #98	@ 0x62
 8000fe2:	dc0b      	bgt.n	8000ffc <decode_and_print_morse+0x3f0>
        printf("S\n\r"),buffer_cuvant[buffer_cuvant_index++] = 'S';
 8000fe4:	4863      	ldr	r0, [pc, #396]	@ (8001174 <decode_and_print_morse+0x568>)
 8000fe6:	f009 fb71 	bl	800a6cc <iprintf>
 8000fea:	4b56      	ldr	r3, [pc, #344]	@ (8001144 <decode_and_print_morse+0x538>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	1c5a      	adds	r2, r3, #1
 8000ff0:	4954      	ldr	r1, [pc, #336]	@ (8001144 <decode_and_print_morse+0x538>)
 8000ff2:	600a      	str	r2, [r1, #0]
 8000ff4:	4a55      	ldr	r2, [pc, #340]	@ (800114c <decode_and_print_morse+0x540>)
 8000ff6:	2153      	movs	r1, #83	@ 0x53
 8000ff8:	54d1      	strb	r1, [r2, r3]
 8000ffa:	e1c3      	b.n	8001384 <decode_and_print_morse+0x778>
    else if (strcmp(buffer, "-") == 0 && buffer_cuvant_index < MAX_BUFFER_SIZE - 1)
 8000ffc:	495e      	ldr	r1, [pc, #376]	@ (8001178 <decode_and_print_morse+0x56c>)
 8000ffe:	6878      	ldr	r0, [r7, #4]
 8001000:	f7ff f8e6 	bl	80001d0 <strcmp>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d10f      	bne.n	800102a <decode_and_print_morse+0x41e>
 800100a:	4b4e      	ldr	r3, [pc, #312]	@ (8001144 <decode_and_print_morse+0x538>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	2b62      	cmp	r3, #98	@ 0x62
 8001010:	dc0b      	bgt.n	800102a <decode_and_print_morse+0x41e>
        printf("T\n\r"),buffer_cuvant[buffer_cuvant_index++] = 'T';
 8001012:	485a      	ldr	r0, [pc, #360]	@ (800117c <decode_and_print_morse+0x570>)
 8001014:	f009 fb5a 	bl	800a6cc <iprintf>
 8001018:	4b4a      	ldr	r3, [pc, #296]	@ (8001144 <decode_and_print_morse+0x538>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	1c5a      	adds	r2, r3, #1
 800101e:	4949      	ldr	r1, [pc, #292]	@ (8001144 <decode_and_print_morse+0x538>)
 8001020:	600a      	str	r2, [r1, #0]
 8001022:	4a4a      	ldr	r2, [pc, #296]	@ (800114c <decode_and_print_morse+0x540>)
 8001024:	2154      	movs	r1, #84	@ 0x54
 8001026:	54d1      	strb	r1, [r2, r3]
 8001028:	e1ac      	b.n	8001384 <decode_and_print_morse+0x778>
    else if (strcmp(buffer, "**-") == 0 && buffer_cuvant_index < MAX_BUFFER_SIZE - 1)
 800102a:	4955      	ldr	r1, [pc, #340]	@ (8001180 <decode_and_print_morse+0x574>)
 800102c:	6878      	ldr	r0, [r7, #4]
 800102e:	f7ff f8cf 	bl	80001d0 <strcmp>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d10f      	bne.n	8001058 <decode_and_print_morse+0x44c>
 8001038:	4b42      	ldr	r3, [pc, #264]	@ (8001144 <decode_and_print_morse+0x538>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	2b62      	cmp	r3, #98	@ 0x62
 800103e:	dc0b      	bgt.n	8001058 <decode_and_print_morse+0x44c>
        printf("U\n\r"),buffer_cuvant[buffer_cuvant_index++] = 'U';
 8001040:	4850      	ldr	r0, [pc, #320]	@ (8001184 <decode_and_print_morse+0x578>)
 8001042:	f009 fb43 	bl	800a6cc <iprintf>
 8001046:	4b3f      	ldr	r3, [pc, #252]	@ (8001144 <decode_and_print_morse+0x538>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	1c5a      	adds	r2, r3, #1
 800104c:	493d      	ldr	r1, [pc, #244]	@ (8001144 <decode_and_print_morse+0x538>)
 800104e:	600a      	str	r2, [r1, #0]
 8001050:	4a3e      	ldr	r2, [pc, #248]	@ (800114c <decode_and_print_morse+0x540>)
 8001052:	2155      	movs	r1, #85	@ 0x55
 8001054:	54d1      	strb	r1, [r2, r3]
 8001056:	e195      	b.n	8001384 <decode_and_print_morse+0x778>
    else if (strcmp(buffer, "***-") == 0 && buffer_cuvant_index < MAX_BUFFER_SIZE - 1)
 8001058:	494b      	ldr	r1, [pc, #300]	@ (8001188 <decode_and_print_morse+0x57c>)
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	f7ff f8b8 	bl	80001d0 <strcmp>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d10f      	bne.n	8001086 <decode_and_print_morse+0x47a>
 8001066:	4b37      	ldr	r3, [pc, #220]	@ (8001144 <decode_and_print_morse+0x538>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	2b62      	cmp	r3, #98	@ 0x62
 800106c:	dc0b      	bgt.n	8001086 <decode_and_print_morse+0x47a>
        printf("V\n\r"),buffer_cuvant[buffer_cuvant_index++] = 'V';
 800106e:	4847      	ldr	r0, [pc, #284]	@ (800118c <decode_and_print_morse+0x580>)
 8001070:	f009 fb2c 	bl	800a6cc <iprintf>
 8001074:	4b33      	ldr	r3, [pc, #204]	@ (8001144 <decode_and_print_morse+0x538>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	1c5a      	adds	r2, r3, #1
 800107a:	4932      	ldr	r1, [pc, #200]	@ (8001144 <decode_and_print_morse+0x538>)
 800107c:	600a      	str	r2, [r1, #0]
 800107e:	4a33      	ldr	r2, [pc, #204]	@ (800114c <decode_and_print_morse+0x540>)
 8001080:	2156      	movs	r1, #86	@ 0x56
 8001082:	54d1      	strb	r1, [r2, r3]
 8001084:	e17e      	b.n	8001384 <decode_and_print_morse+0x778>
    else if (strcmp(buffer, "*--") == 0 && buffer_cuvant_index < MAX_BUFFER_SIZE - 1)
 8001086:	4942      	ldr	r1, [pc, #264]	@ (8001190 <decode_and_print_morse+0x584>)
 8001088:	6878      	ldr	r0, [r7, #4]
 800108a:	f7ff f8a1 	bl	80001d0 <strcmp>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d10f      	bne.n	80010b4 <decode_and_print_morse+0x4a8>
 8001094:	4b2b      	ldr	r3, [pc, #172]	@ (8001144 <decode_and_print_morse+0x538>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	2b62      	cmp	r3, #98	@ 0x62
 800109a:	dc0b      	bgt.n	80010b4 <decode_and_print_morse+0x4a8>
        printf("W\n\r"),buffer_cuvant[buffer_cuvant_index++] = 'W';
 800109c:	483d      	ldr	r0, [pc, #244]	@ (8001194 <decode_and_print_morse+0x588>)
 800109e:	f009 fb15 	bl	800a6cc <iprintf>
 80010a2:	4b28      	ldr	r3, [pc, #160]	@ (8001144 <decode_and_print_morse+0x538>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	1c5a      	adds	r2, r3, #1
 80010a8:	4926      	ldr	r1, [pc, #152]	@ (8001144 <decode_and_print_morse+0x538>)
 80010aa:	600a      	str	r2, [r1, #0]
 80010ac:	4a27      	ldr	r2, [pc, #156]	@ (800114c <decode_and_print_morse+0x540>)
 80010ae:	2157      	movs	r1, #87	@ 0x57
 80010b0:	54d1      	strb	r1, [r2, r3]
 80010b2:	e167      	b.n	8001384 <decode_and_print_morse+0x778>
    else if (strcmp(buffer, "-**-") == 0 && buffer_cuvant_index < MAX_BUFFER_SIZE - 1)
 80010b4:	4938      	ldr	r1, [pc, #224]	@ (8001198 <decode_and_print_morse+0x58c>)
 80010b6:	6878      	ldr	r0, [r7, #4]
 80010b8:	f7ff f88a 	bl	80001d0 <strcmp>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d10f      	bne.n	80010e2 <decode_and_print_morse+0x4d6>
 80010c2:	4b20      	ldr	r3, [pc, #128]	@ (8001144 <decode_and_print_morse+0x538>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	2b62      	cmp	r3, #98	@ 0x62
 80010c8:	dc0b      	bgt.n	80010e2 <decode_and_print_morse+0x4d6>
        printf("X\n\r"),buffer_cuvant[buffer_cuvant_index++] = 'X';
 80010ca:	4834      	ldr	r0, [pc, #208]	@ (800119c <decode_and_print_morse+0x590>)
 80010cc:	f009 fafe 	bl	800a6cc <iprintf>
 80010d0:	4b1c      	ldr	r3, [pc, #112]	@ (8001144 <decode_and_print_morse+0x538>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	1c5a      	adds	r2, r3, #1
 80010d6:	491b      	ldr	r1, [pc, #108]	@ (8001144 <decode_and_print_morse+0x538>)
 80010d8:	600a      	str	r2, [r1, #0]
 80010da:	4a1c      	ldr	r2, [pc, #112]	@ (800114c <decode_and_print_morse+0x540>)
 80010dc:	2158      	movs	r1, #88	@ 0x58
 80010de:	54d1      	strb	r1, [r2, r3]
 80010e0:	e150      	b.n	8001384 <decode_and_print_morse+0x778>
    else if (strcmp(buffer, "-*--") == 0 && buffer_cuvant_index < MAX_BUFFER_SIZE - 1)
 80010e2:	492f      	ldr	r1, [pc, #188]	@ (80011a0 <decode_and_print_morse+0x594>)
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	f7ff f873 	bl	80001d0 <strcmp>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d10f      	bne.n	8001110 <decode_and_print_morse+0x504>
 80010f0:	4b14      	ldr	r3, [pc, #80]	@ (8001144 <decode_and_print_morse+0x538>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	2b62      	cmp	r3, #98	@ 0x62
 80010f6:	dc0b      	bgt.n	8001110 <decode_and_print_morse+0x504>
        printf("Y\n\r"),buffer_cuvant[buffer_cuvant_index++] = 'Y';
 80010f8:	482a      	ldr	r0, [pc, #168]	@ (80011a4 <decode_and_print_morse+0x598>)
 80010fa:	f009 fae7 	bl	800a6cc <iprintf>
 80010fe:	4b11      	ldr	r3, [pc, #68]	@ (8001144 <decode_and_print_morse+0x538>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	1c5a      	adds	r2, r3, #1
 8001104:	490f      	ldr	r1, [pc, #60]	@ (8001144 <decode_and_print_morse+0x538>)
 8001106:	600a      	str	r2, [r1, #0]
 8001108:	4a10      	ldr	r2, [pc, #64]	@ (800114c <decode_and_print_morse+0x540>)
 800110a:	2159      	movs	r1, #89	@ 0x59
 800110c:	54d1      	strb	r1, [r2, r3]
 800110e:	e139      	b.n	8001384 <decode_and_print_morse+0x778>
    else if (strcmp(buffer, "--**") == 0 && buffer_cuvant_index < MAX_BUFFER_SIZE - 1)
 8001110:	4925      	ldr	r1, [pc, #148]	@ (80011a8 <decode_and_print_morse+0x59c>)
 8001112:	6878      	ldr	r0, [r7, #4]
 8001114:	f7ff f85c 	bl	80001d0 <strcmp>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d148      	bne.n	80011b0 <decode_and_print_morse+0x5a4>
 800111e:	4b09      	ldr	r3, [pc, #36]	@ (8001144 <decode_and_print_morse+0x538>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	2b62      	cmp	r3, #98	@ 0x62
 8001124:	dc44      	bgt.n	80011b0 <decode_and_print_morse+0x5a4>
        printf("Z\n\r"),buffer_cuvant[buffer_cuvant_index++] = 'Z';
 8001126:	4821      	ldr	r0, [pc, #132]	@ (80011ac <decode_and_print_morse+0x5a0>)
 8001128:	f009 fad0 	bl	800a6cc <iprintf>
 800112c:	4b05      	ldr	r3, [pc, #20]	@ (8001144 <decode_and_print_morse+0x538>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	1c5a      	adds	r2, r3, #1
 8001132:	4904      	ldr	r1, [pc, #16]	@ (8001144 <decode_and_print_morse+0x538>)
 8001134:	600a      	str	r2, [r1, #0]
 8001136:	4a05      	ldr	r2, [pc, #20]	@ (800114c <decode_and_print_morse+0x540>)
 8001138:	215a      	movs	r1, #90	@ 0x5a
 800113a:	54d1      	strb	r1, [r2, r3]
 800113c:	e122      	b.n	8001384 <decode_and_print_morse+0x778>
 800113e:	bf00      	nop
 8001140:	0800b364 	.word	0x0800b364
 8001144:	200002f4 	.word	0x200002f4
 8001148:	0800b368 	.word	0x0800b368
 800114c:	2000028c 	.word	0x2000028c
 8001150:	0800b36c 	.word	0x0800b36c
 8001154:	0800b370 	.word	0x0800b370
 8001158:	0800b374 	.word	0x0800b374
 800115c:	0800b37c 	.word	0x0800b37c
 8001160:	0800b380 	.word	0x0800b380
 8001164:	0800b388 	.word	0x0800b388
 8001168:	0800b38c 	.word	0x0800b38c
 800116c:	0800b390 	.word	0x0800b390
 8001170:	0800b394 	.word	0x0800b394
 8001174:	0800b398 	.word	0x0800b398
 8001178:	0800b39c 	.word	0x0800b39c
 800117c:	0800b3a0 	.word	0x0800b3a0
 8001180:	0800b3a4 	.word	0x0800b3a4
 8001184:	0800b3a8 	.word	0x0800b3a8
 8001188:	0800b3ac 	.word	0x0800b3ac
 800118c:	0800b3b4 	.word	0x0800b3b4
 8001190:	0800b3b8 	.word	0x0800b3b8
 8001194:	0800b3bc 	.word	0x0800b3bc
 8001198:	0800b3c0 	.word	0x0800b3c0
 800119c:	0800b3c8 	.word	0x0800b3c8
 80011a0:	0800b3cc 	.word	0x0800b3cc
 80011a4:	0800b3d4 	.word	0x0800b3d4
 80011a8:	0800b3d8 	.word	0x0800b3d8
 80011ac:	0800b3e0 	.word	0x0800b3e0
    else if (strcmp(buffer, "*----") == 0 && buffer_cuvant_index < MAX_BUFFER_SIZE - 1)
 80011b0:	4976      	ldr	r1, [pc, #472]	@ (800138c <decode_and_print_morse+0x780>)
 80011b2:	6878      	ldr	r0, [r7, #4]
 80011b4:	f7ff f80c 	bl	80001d0 <strcmp>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d10f      	bne.n	80011de <decode_and_print_morse+0x5d2>
 80011be:	4b74      	ldr	r3, [pc, #464]	@ (8001390 <decode_and_print_morse+0x784>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	2b62      	cmp	r3, #98	@ 0x62
 80011c4:	dc0b      	bgt.n	80011de <decode_and_print_morse+0x5d2>
        printf("1\n\r"),buffer_cuvant[buffer_cuvant_index++] = '1';
 80011c6:	4873      	ldr	r0, [pc, #460]	@ (8001394 <decode_and_print_morse+0x788>)
 80011c8:	f009 fa80 	bl	800a6cc <iprintf>
 80011cc:	4b70      	ldr	r3, [pc, #448]	@ (8001390 <decode_and_print_morse+0x784>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	1c5a      	adds	r2, r3, #1
 80011d2:	496f      	ldr	r1, [pc, #444]	@ (8001390 <decode_and_print_morse+0x784>)
 80011d4:	600a      	str	r2, [r1, #0]
 80011d6:	4a70      	ldr	r2, [pc, #448]	@ (8001398 <decode_and_print_morse+0x78c>)
 80011d8:	2131      	movs	r1, #49	@ 0x31
 80011da:	54d1      	strb	r1, [r2, r3]
 80011dc:	e0d2      	b.n	8001384 <decode_and_print_morse+0x778>
    else if (strcmp(buffer, "**---") == 0 && buffer_cuvant_index < MAX_BUFFER_SIZE - 1)
 80011de:	496f      	ldr	r1, [pc, #444]	@ (800139c <decode_and_print_morse+0x790>)
 80011e0:	6878      	ldr	r0, [r7, #4]
 80011e2:	f7fe fff5 	bl	80001d0 <strcmp>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d10f      	bne.n	800120c <decode_and_print_morse+0x600>
 80011ec:	4b68      	ldr	r3, [pc, #416]	@ (8001390 <decode_and_print_morse+0x784>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	2b62      	cmp	r3, #98	@ 0x62
 80011f2:	dc0b      	bgt.n	800120c <decode_and_print_morse+0x600>
        printf("2\n\r"),buffer_cuvant[buffer_cuvant_index++] = '2';
 80011f4:	486a      	ldr	r0, [pc, #424]	@ (80013a0 <decode_and_print_morse+0x794>)
 80011f6:	f009 fa69 	bl	800a6cc <iprintf>
 80011fa:	4b65      	ldr	r3, [pc, #404]	@ (8001390 <decode_and_print_morse+0x784>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	1c5a      	adds	r2, r3, #1
 8001200:	4963      	ldr	r1, [pc, #396]	@ (8001390 <decode_and_print_morse+0x784>)
 8001202:	600a      	str	r2, [r1, #0]
 8001204:	4a64      	ldr	r2, [pc, #400]	@ (8001398 <decode_and_print_morse+0x78c>)
 8001206:	2132      	movs	r1, #50	@ 0x32
 8001208:	54d1      	strb	r1, [r2, r3]
 800120a:	e0bb      	b.n	8001384 <decode_and_print_morse+0x778>
    else if (strcmp(buffer, "***--") == 0 && buffer_cuvant_index < MAX_BUFFER_SIZE - 1)
 800120c:	4965      	ldr	r1, [pc, #404]	@ (80013a4 <decode_and_print_morse+0x798>)
 800120e:	6878      	ldr	r0, [r7, #4]
 8001210:	f7fe ffde 	bl	80001d0 <strcmp>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d10f      	bne.n	800123a <decode_and_print_morse+0x62e>
 800121a:	4b5d      	ldr	r3, [pc, #372]	@ (8001390 <decode_and_print_morse+0x784>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	2b62      	cmp	r3, #98	@ 0x62
 8001220:	dc0b      	bgt.n	800123a <decode_and_print_morse+0x62e>
        printf("3\n\r"),buffer_cuvant[buffer_cuvant_index++] = '3';
 8001222:	4861      	ldr	r0, [pc, #388]	@ (80013a8 <decode_and_print_morse+0x79c>)
 8001224:	f009 fa52 	bl	800a6cc <iprintf>
 8001228:	4b59      	ldr	r3, [pc, #356]	@ (8001390 <decode_and_print_morse+0x784>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	1c5a      	adds	r2, r3, #1
 800122e:	4958      	ldr	r1, [pc, #352]	@ (8001390 <decode_and_print_morse+0x784>)
 8001230:	600a      	str	r2, [r1, #0]
 8001232:	4a59      	ldr	r2, [pc, #356]	@ (8001398 <decode_and_print_morse+0x78c>)
 8001234:	2133      	movs	r1, #51	@ 0x33
 8001236:	54d1      	strb	r1, [r2, r3]
 8001238:	e0a4      	b.n	8001384 <decode_and_print_morse+0x778>
    else if (strcmp(buffer, "***-") == 0 && buffer_cuvant_index < MAX_BUFFER_SIZE - 1)
 800123a:	495c      	ldr	r1, [pc, #368]	@ (80013ac <decode_and_print_morse+0x7a0>)
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f7fe ffc7 	bl	80001d0 <strcmp>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d10f      	bne.n	8001268 <decode_and_print_morse+0x65c>
 8001248:	4b51      	ldr	r3, [pc, #324]	@ (8001390 <decode_and_print_morse+0x784>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	2b62      	cmp	r3, #98	@ 0x62
 800124e:	dc0b      	bgt.n	8001268 <decode_and_print_morse+0x65c>
        printf("4\n\r"),buffer_cuvant[buffer_cuvant_index++] = '4';
 8001250:	4857      	ldr	r0, [pc, #348]	@ (80013b0 <decode_and_print_morse+0x7a4>)
 8001252:	f009 fa3b 	bl	800a6cc <iprintf>
 8001256:	4b4e      	ldr	r3, [pc, #312]	@ (8001390 <decode_and_print_morse+0x784>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	1c5a      	adds	r2, r3, #1
 800125c:	494c      	ldr	r1, [pc, #304]	@ (8001390 <decode_and_print_morse+0x784>)
 800125e:	600a      	str	r2, [r1, #0]
 8001260:	4a4d      	ldr	r2, [pc, #308]	@ (8001398 <decode_and_print_morse+0x78c>)
 8001262:	2134      	movs	r1, #52	@ 0x34
 8001264:	54d1      	strb	r1, [r2, r3]
 8001266:	e08d      	b.n	8001384 <decode_and_print_morse+0x778>
    else if (strcmp(buffer, "*****") == 0 && buffer_cuvant_index < MAX_BUFFER_SIZE - 1)
 8001268:	4952      	ldr	r1, [pc, #328]	@ (80013b4 <decode_and_print_morse+0x7a8>)
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	f7fe ffb0 	bl	80001d0 <strcmp>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d10f      	bne.n	8001296 <decode_and_print_morse+0x68a>
 8001276:	4b46      	ldr	r3, [pc, #280]	@ (8001390 <decode_and_print_morse+0x784>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	2b62      	cmp	r3, #98	@ 0x62
 800127c:	dc0b      	bgt.n	8001296 <decode_and_print_morse+0x68a>
        printf("5\n\r"),buffer_cuvant[buffer_cuvant_index++] = '5';
 800127e:	484e      	ldr	r0, [pc, #312]	@ (80013b8 <decode_and_print_morse+0x7ac>)
 8001280:	f009 fa24 	bl	800a6cc <iprintf>
 8001284:	4b42      	ldr	r3, [pc, #264]	@ (8001390 <decode_and_print_morse+0x784>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	1c5a      	adds	r2, r3, #1
 800128a:	4941      	ldr	r1, [pc, #260]	@ (8001390 <decode_and_print_morse+0x784>)
 800128c:	600a      	str	r2, [r1, #0]
 800128e:	4a42      	ldr	r2, [pc, #264]	@ (8001398 <decode_and_print_morse+0x78c>)
 8001290:	2135      	movs	r1, #53	@ 0x35
 8001292:	54d1      	strb	r1, [r2, r3]
 8001294:	e076      	b.n	8001384 <decode_and_print_morse+0x778>
    else if (strcmp(buffer, "-****") == 0 && buffer_cuvant_index < MAX_BUFFER_SIZE - 1)
 8001296:	4949      	ldr	r1, [pc, #292]	@ (80013bc <decode_and_print_morse+0x7b0>)
 8001298:	6878      	ldr	r0, [r7, #4]
 800129a:	f7fe ff99 	bl	80001d0 <strcmp>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d10f      	bne.n	80012c4 <decode_and_print_morse+0x6b8>
 80012a4:	4b3a      	ldr	r3, [pc, #232]	@ (8001390 <decode_and_print_morse+0x784>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	2b62      	cmp	r3, #98	@ 0x62
 80012aa:	dc0b      	bgt.n	80012c4 <decode_and_print_morse+0x6b8>
        printf("6\n\r"),buffer_cuvant[buffer_cuvant_index++] = '6';
 80012ac:	4844      	ldr	r0, [pc, #272]	@ (80013c0 <decode_and_print_morse+0x7b4>)
 80012ae:	f009 fa0d 	bl	800a6cc <iprintf>
 80012b2:	4b37      	ldr	r3, [pc, #220]	@ (8001390 <decode_and_print_morse+0x784>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	1c5a      	adds	r2, r3, #1
 80012b8:	4935      	ldr	r1, [pc, #212]	@ (8001390 <decode_and_print_morse+0x784>)
 80012ba:	600a      	str	r2, [r1, #0]
 80012bc:	4a36      	ldr	r2, [pc, #216]	@ (8001398 <decode_and_print_morse+0x78c>)
 80012be:	2136      	movs	r1, #54	@ 0x36
 80012c0:	54d1      	strb	r1, [r2, r3]
 80012c2:	e05f      	b.n	8001384 <decode_and_print_morse+0x778>
    else if (strcmp(buffer, "--***") == 0 && buffer_cuvant_index < MAX_BUFFER_SIZE - 1)
 80012c4:	493f      	ldr	r1, [pc, #252]	@ (80013c4 <decode_and_print_morse+0x7b8>)
 80012c6:	6878      	ldr	r0, [r7, #4]
 80012c8:	f7fe ff82 	bl	80001d0 <strcmp>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d10f      	bne.n	80012f2 <decode_and_print_morse+0x6e6>
 80012d2:	4b2f      	ldr	r3, [pc, #188]	@ (8001390 <decode_and_print_morse+0x784>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	2b62      	cmp	r3, #98	@ 0x62
 80012d8:	dc0b      	bgt.n	80012f2 <decode_and_print_morse+0x6e6>
        printf("7\n\r"),buffer_cuvant[buffer_cuvant_index++] = '7';
 80012da:	483b      	ldr	r0, [pc, #236]	@ (80013c8 <decode_and_print_morse+0x7bc>)
 80012dc:	f009 f9f6 	bl	800a6cc <iprintf>
 80012e0:	4b2b      	ldr	r3, [pc, #172]	@ (8001390 <decode_and_print_morse+0x784>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	1c5a      	adds	r2, r3, #1
 80012e6:	492a      	ldr	r1, [pc, #168]	@ (8001390 <decode_and_print_morse+0x784>)
 80012e8:	600a      	str	r2, [r1, #0]
 80012ea:	4a2b      	ldr	r2, [pc, #172]	@ (8001398 <decode_and_print_morse+0x78c>)
 80012ec:	2137      	movs	r1, #55	@ 0x37
 80012ee:	54d1      	strb	r1, [r2, r3]
 80012f0:	e048      	b.n	8001384 <decode_and_print_morse+0x778>
    else if (strcmp(buffer, "---**") == 0 && buffer_cuvant_index < MAX_BUFFER_SIZE - 1)
 80012f2:	4936      	ldr	r1, [pc, #216]	@ (80013cc <decode_and_print_morse+0x7c0>)
 80012f4:	6878      	ldr	r0, [r7, #4]
 80012f6:	f7fe ff6b 	bl	80001d0 <strcmp>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d10f      	bne.n	8001320 <decode_and_print_morse+0x714>
 8001300:	4b23      	ldr	r3, [pc, #140]	@ (8001390 <decode_and_print_morse+0x784>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	2b62      	cmp	r3, #98	@ 0x62
 8001306:	dc0b      	bgt.n	8001320 <decode_and_print_morse+0x714>
        printf("8\n\r"),buffer_cuvant[buffer_cuvant_index++] = '8';
 8001308:	4831      	ldr	r0, [pc, #196]	@ (80013d0 <decode_and_print_morse+0x7c4>)
 800130a:	f009 f9df 	bl	800a6cc <iprintf>
 800130e:	4b20      	ldr	r3, [pc, #128]	@ (8001390 <decode_and_print_morse+0x784>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	1c5a      	adds	r2, r3, #1
 8001314:	491e      	ldr	r1, [pc, #120]	@ (8001390 <decode_and_print_morse+0x784>)
 8001316:	600a      	str	r2, [r1, #0]
 8001318:	4a1f      	ldr	r2, [pc, #124]	@ (8001398 <decode_and_print_morse+0x78c>)
 800131a:	2138      	movs	r1, #56	@ 0x38
 800131c:	54d1      	strb	r1, [r2, r3]
 800131e:	e031      	b.n	8001384 <decode_and_print_morse+0x778>
    else if (strcmp(buffer, "----*") == 0 && buffer_cuvant_index < MAX_BUFFER_SIZE - 1)
 8001320:	492c      	ldr	r1, [pc, #176]	@ (80013d4 <decode_and_print_morse+0x7c8>)
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f7fe ff54 	bl	80001d0 <strcmp>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d10f      	bne.n	800134e <decode_and_print_morse+0x742>
 800132e:	4b18      	ldr	r3, [pc, #96]	@ (8001390 <decode_and_print_morse+0x784>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	2b62      	cmp	r3, #98	@ 0x62
 8001334:	dc0b      	bgt.n	800134e <decode_and_print_morse+0x742>
        printf("9\n\r"),buffer_cuvant[buffer_cuvant_index++] = '9';
 8001336:	4828      	ldr	r0, [pc, #160]	@ (80013d8 <decode_and_print_morse+0x7cc>)
 8001338:	f009 f9c8 	bl	800a6cc <iprintf>
 800133c:	4b14      	ldr	r3, [pc, #80]	@ (8001390 <decode_and_print_morse+0x784>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	1c5a      	adds	r2, r3, #1
 8001342:	4913      	ldr	r1, [pc, #76]	@ (8001390 <decode_and_print_morse+0x784>)
 8001344:	600a      	str	r2, [r1, #0]
 8001346:	4a14      	ldr	r2, [pc, #80]	@ (8001398 <decode_and_print_morse+0x78c>)
 8001348:	2139      	movs	r1, #57	@ 0x39
 800134a:	54d1      	strb	r1, [r2, r3]
 800134c:	e01a      	b.n	8001384 <decode_and_print_morse+0x778>
    else if (strcmp(buffer, "-----") == 0 && buffer_cuvant_index < MAX_BUFFER_SIZE - 1)
 800134e:	4923      	ldr	r1, [pc, #140]	@ (80013dc <decode_and_print_morse+0x7d0>)
 8001350:	6878      	ldr	r0, [r7, #4]
 8001352:	f7fe ff3d 	bl	80001d0 <strcmp>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d10f      	bne.n	800137c <decode_and_print_morse+0x770>
 800135c:	4b0c      	ldr	r3, [pc, #48]	@ (8001390 <decode_and_print_morse+0x784>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	2b62      	cmp	r3, #98	@ 0x62
 8001362:	dc0b      	bgt.n	800137c <decode_and_print_morse+0x770>
        printf("0\n\r"),buffer_cuvant[buffer_cuvant_index++] = '0';
 8001364:	481e      	ldr	r0, [pc, #120]	@ (80013e0 <decode_and_print_morse+0x7d4>)
 8001366:	f009 f9b1 	bl	800a6cc <iprintf>
 800136a:	4b09      	ldr	r3, [pc, #36]	@ (8001390 <decode_and_print_morse+0x784>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	1c5a      	adds	r2, r3, #1
 8001370:	4907      	ldr	r1, [pc, #28]	@ (8001390 <decode_and_print_morse+0x784>)
 8001372:	600a      	str	r2, [r1, #0]
 8001374:	4a08      	ldr	r2, [pc, #32]	@ (8001398 <decode_and_print_morse+0x78c>)
 8001376:	2130      	movs	r1, #48	@ 0x30
 8001378:	54d1      	strb	r1, [r2, r3]
 800137a:	e003      	b.n	8001384 <decode_and_print_morse+0x778>
    else
        printf("Cod invalid\n\r");
 800137c:	4819      	ldr	r0, [pc, #100]	@ (80013e4 <decode_and_print_morse+0x7d8>)
 800137e:	f009 f9a5 	bl	800a6cc <iprintf>
}
 8001382:	bf00      	nop
 8001384:	bf00      	nop
 8001386:	3708      	adds	r7, #8
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	0800b3e4 	.word	0x0800b3e4
 8001390:	200002f4 	.word	0x200002f4
 8001394:	0800b3ec 	.word	0x0800b3ec
 8001398:	2000028c 	.word	0x2000028c
 800139c:	0800b3f0 	.word	0x0800b3f0
 80013a0:	0800b3f8 	.word	0x0800b3f8
 80013a4:	0800b3fc 	.word	0x0800b3fc
 80013a8:	0800b404 	.word	0x0800b404
 80013ac:	0800b3ac 	.word	0x0800b3ac
 80013b0:	0800b408 	.word	0x0800b408
 80013b4:	0800b40c 	.word	0x0800b40c
 80013b8:	0800b414 	.word	0x0800b414
 80013bc:	0800b418 	.word	0x0800b418
 80013c0:	0800b420 	.word	0x0800b420
 80013c4:	0800b424 	.word	0x0800b424
 80013c8:	0800b42c 	.word	0x0800b42c
 80013cc:	0800b430 	.word	0x0800b430
 80013d0:	0800b438 	.word	0x0800b438
 80013d4:	0800b43c 	.word	0x0800b43c
 80013d8:	0800b444 	.word	0x0800b444
 80013dc:	0800b448 	.word	0x0800b448
 80013e0:	0800b450 	.word	0x0800b450
 80013e4:	0800b454 	.word	0x0800b454

080013e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013ec:	b672      	cpsid	i
}
 80013ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013f0:	bf00      	nop
 80013f2:	e7fd      	b.n	80013f0 <Error_Handler+0x8>

080013f4 <_write>:
#include "stm32f4xx_hal.h"  // Include the header file for the STM32 HAL (Hardware Abstraction Layer) library, specific to the STM32F4 series.

extern UART_HandleTypeDef huart3;  // Declare the UART handle for UART3 as external, meaning it’s defined elsewhere in the project.

int _write(int file, char *data, int len)  // Define the _write function, which is typically used to redirect printf() output to a custom destination (e.g., UART).
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b084      	sub	sp, #16
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	60f8      	str	r0, [r7, #12]
 80013fc:	60b9      	str	r1, [r7, #8]
 80013fe:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart3, (uint8_t *) data, len, HAL_MAX_DELAY);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	b29a      	uxth	r2, r3
 8001404:	f04f 33ff 	mov.w	r3, #4294967295
 8001408:	68b9      	ldr	r1, [r7, #8]
 800140a:	4804      	ldr	r0, [pc, #16]	@ (800141c <_write+0x28>)
 800140c:	f004 ff2a 	bl	8006264 <HAL_UART_Transmit>
    // Transmit the data over UART3. The `data` pointer is cast to `uint8_t*` because HAL functions expect this type.
    // The `len` parameter specifies the number of bytes to send, and `HAL_MAX_DELAY` ensures the function waits indefinitely for the transmission to complete.

    return len;  // Return the length of the data sent, which informs the calling function how many bytes were successfully transmitted.
 8001410:	687b      	ldr	r3, [r7, #4]
}
 8001412:	4618      	mov	r0, r3
 8001414:	3710      	adds	r7, #16
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	200001e0 	.word	0x200001e0

08001420 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001426:	2300      	movs	r3, #0
 8001428:	607b      	str	r3, [r7, #4]
 800142a:	4b10      	ldr	r3, [pc, #64]	@ (800146c <HAL_MspInit+0x4c>)
 800142c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800142e:	4a0f      	ldr	r2, [pc, #60]	@ (800146c <HAL_MspInit+0x4c>)
 8001430:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001434:	6453      	str	r3, [r2, #68]	@ 0x44
 8001436:	4b0d      	ldr	r3, [pc, #52]	@ (800146c <HAL_MspInit+0x4c>)
 8001438:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800143a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800143e:	607b      	str	r3, [r7, #4]
 8001440:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001442:	2300      	movs	r3, #0
 8001444:	603b      	str	r3, [r7, #0]
 8001446:	4b09      	ldr	r3, [pc, #36]	@ (800146c <HAL_MspInit+0x4c>)
 8001448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800144a:	4a08      	ldr	r2, [pc, #32]	@ (800146c <HAL_MspInit+0x4c>)
 800144c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001450:	6413      	str	r3, [r2, #64]	@ 0x40
 8001452:	4b06      	ldr	r3, [pc, #24]	@ (800146c <HAL_MspInit+0x4c>)
 8001454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001456:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800145a:	603b      	str	r3, [r7, #0]
 800145c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800145e:	2007      	movs	r0, #7
 8001460:	f000 fbe4 	bl	8001c2c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001464:	bf00      	nop
 8001466:	3708      	adds	r7, #8
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	40023800 	.word	0x40023800

08001470 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b08a      	sub	sp, #40	@ 0x28
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001478:	f107 0314 	add.w	r3, r7, #20
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	605a      	str	r2, [r3, #4]
 8001482:	609a      	str	r2, [r3, #8]
 8001484:	60da      	str	r2, [r3, #12]
 8001486:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a19      	ldr	r2, [pc, #100]	@ (80014f4 <HAL_I2C_MspInit+0x84>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d12c      	bne.n	80014ec <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001492:	2300      	movs	r3, #0
 8001494:	613b      	str	r3, [r7, #16]
 8001496:	4b18      	ldr	r3, [pc, #96]	@ (80014f8 <HAL_I2C_MspInit+0x88>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800149a:	4a17      	ldr	r2, [pc, #92]	@ (80014f8 <HAL_I2C_MspInit+0x88>)
 800149c:	f043 0302 	orr.w	r3, r3, #2
 80014a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014a2:	4b15      	ldr	r3, [pc, #84]	@ (80014f8 <HAL_I2C_MspInit+0x88>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a6:	f003 0302 	and.w	r3, r3, #2
 80014aa:	613b      	str	r3, [r7, #16]
 80014ac:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80014ae:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80014b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014b4:	2312      	movs	r3, #18
 80014b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014b8:	2301      	movs	r3, #1
 80014ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014bc:	2300      	movs	r3, #0
 80014be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014c0:	2304      	movs	r3, #4
 80014c2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014c4:	f107 0314 	add.w	r3, r7, #20
 80014c8:	4619      	mov	r1, r3
 80014ca:	480c      	ldr	r0, [pc, #48]	@ (80014fc <HAL_I2C_MspInit+0x8c>)
 80014cc:	f000 fbf0 	bl	8001cb0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014d0:	2300      	movs	r3, #0
 80014d2:	60fb      	str	r3, [r7, #12]
 80014d4:	4b08      	ldr	r3, [pc, #32]	@ (80014f8 <HAL_I2C_MspInit+0x88>)
 80014d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014d8:	4a07      	ldr	r2, [pc, #28]	@ (80014f8 <HAL_I2C_MspInit+0x88>)
 80014da:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80014de:	6413      	str	r3, [r2, #64]	@ 0x40
 80014e0:	4b05      	ldr	r3, [pc, #20]	@ (80014f8 <HAL_I2C_MspInit+0x88>)
 80014e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014e8:	60fb      	str	r3, [r7, #12]
 80014ea:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80014ec:	bf00      	nop
 80014ee:	3728      	adds	r7, #40	@ 0x28
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	40005400 	.word	0x40005400
 80014f8:	40023800 	.word	0x40023800
 80014fc:	40020400 	.word	0x40020400

08001500 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b08e      	sub	sp, #56	@ 0x38
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001508:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]
 8001510:	605a      	str	r2, [r3, #4]
 8001512:	609a      	str	r2, [r3, #8]
 8001514:	60da      	str	r2, [r3, #12]
 8001516:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001518:	f107 0314 	add.w	r3, r7, #20
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]
 8001520:	605a      	str	r2, [r3, #4]
 8001522:	609a      	str	r2, [r3, #8]
 8001524:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a31      	ldr	r2, [pc, #196]	@ (80015f0 <HAL_I2S_MspInit+0xf0>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d15a      	bne.n	80015e6 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001530:	2301      	movs	r3, #1
 8001532:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001534:	23c0      	movs	r3, #192	@ 0xc0
 8001536:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001538:	2302      	movs	r3, #2
 800153a:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800153c:	f107 0314 	add.w	r3, r7, #20
 8001540:	4618      	mov	r0, r3
 8001542:	f004 f933 	bl	80057ac <HAL_RCCEx_PeriphCLKConfig>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 800154c:	f7ff ff4c 	bl	80013e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001550:	2300      	movs	r3, #0
 8001552:	613b      	str	r3, [r7, #16]
 8001554:	4b27      	ldr	r3, [pc, #156]	@ (80015f4 <HAL_I2S_MspInit+0xf4>)
 8001556:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001558:	4a26      	ldr	r2, [pc, #152]	@ (80015f4 <HAL_I2S_MspInit+0xf4>)
 800155a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800155e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001560:	4b24      	ldr	r3, [pc, #144]	@ (80015f4 <HAL_I2S_MspInit+0xf4>)
 8001562:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001564:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001568:	613b      	str	r3, [r7, #16]
 800156a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800156c:	2300      	movs	r3, #0
 800156e:	60fb      	str	r3, [r7, #12]
 8001570:	4b20      	ldr	r3, [pc, #128]	@ (80015f4 <HAL_I2S_MspInit+0xf4>)
 8001572:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001574:	4a1f      	ldr	r2, [pc, #124]	@ (80015f4 <HAL_I2S_MspInit+0xf4>)
 8001576:	f043 0301 	orr.w	r3, r3, #1
 800157a:	6313      	str	r3, [r2, #48]	@ 0x30
 800157c:	4b1d      	ldr	r3, [pc, #116]	@ (80015f4 <HAL_I2S_MspInit+0xf4>)
 800157e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001580:	f003 0301 	and.w	r3, r3, #1
 8001584:	60fb      	str	r3, [r7, #12]
 8001586:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001588:	2300      	movs	r3, #0
 800158a:	60bb      	str	r3, [r7, #8]
 800158c:	4b19      	ldr	r3, [pc, #100]	@ (80015f4 <HAL_I2S_MspInit+0xf4>)
 800158e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001590:	4a18      	ldr	r2, [pc, #96]	@ (80015f4 <HAL_I2S_MspInit+0xf4>)
 8001592:	f043 0304 	orr.w	r3, r3, #4
 8001596:	6313      	str	r3, [r2, #48]	@ 0x30
 8001598:	4b16      	ldr	r3, [pc, #88]	@ (80015f4 <HAL_I2S_MspInit+0xf4>)
 800159a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800159c:	f003 0304 	and.w	r3, r3, #4
 80015a0:	60bb      	str	r3, [r7, #8]
 80015a2:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80015a4:	2310      	movs	r3, #16
 80015a6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a8:	2302      	movs	r3, #2
 80015aa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ac:	2300      	movs	r3, #0
 80015ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b0:	2300      	movs	r3, #0
 80015b2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80015b4:	2306      	movs	r3, #6
 80015b6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80015b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015bc:	4619      	mov	r1, r3
 80015be:	480e      	ldr	r0, [pc, #56]	@ (80015f8 <HAL_I2S_MspInit+0xf8>)
 80015c0:	f000 fb76 	bl	8001cb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80015c4:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 80015c8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ca:	2302      	movs	r3, #2
 80015cc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ce:	2300      	movs	r3, #0
 80015d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d2:	2300      	movs	r3, #0
 80015d4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80015d6:	2306      	movs	r3, #6
 80015d8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015de:	4619      	mov	r1, r3
 80015e0:	4806      	ldr	r0, [pc, #24]	@ (80015fc <HAL_I2S_MspInit+0xfc>)
 80015e2:	f000 fb65 	bl	8001cb0 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 80015e6:	bf00      	nop
 80015e8:	3738      	adds	r7, #56	@ 0x38
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	40003c00 	.word	0x40003c00
 80015f4:	40023800 	.word	0x40023800
 80015f8:	40020000 	.word	0x40020000
 80015fc:	40020800 	.word	0x40020800

08001600 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b08a      	sub	sp, #40	@ 0x28
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001608:	f107 0314 	add.w	r3, r7, #20
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	605a      	str	r2, [r3, #4]
 8001612:	609a      	str	r2, [r3, #8]
 8001614:	60da      	str	r2, [r3, #12]
 8001616:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a19      	ldr	r2, [pc, #100]	@ (8001684 <HAL_SPI_MspInit+0x84>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d12b      	bne.n	800167a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001622:	2300      	movs	r3, #0
 8001624:	613b      	str	r3, [r7, #16]
 8001626:	4b18      	ldr	r3, [pc, #96]	@ (8001688 <HAL_SPI_MspInit+0x88>)
 8001628:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800162a:	4a17      	ldr	r2, [pc, #92]	@ (8001688 <HAL_SPI_MspInit+0x88>)
 800162c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001630:	6453      	str	r3, [r2, #68]	@ 0x44
 8001632:	4b15      	ldr	r3, [pc, #84]	@ (8001688 <HAL_SPI_MspInit+0x88>)
 8001634:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001636:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800163a:	613b      	str	r3, [r7, #16]
 800163c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800163e:	2300      	movs	r3, #0
 8001640:	60fb      	str	r3, [r7, #12]
 8001642:	4b11      	ldr	r3, [pc, #68]	@ (8001688 <HAL_SPI_MspInit+0x88>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001646:	4a10      	ldr	r2, [pc, #64]	@ (8001688 <HAL_SPI_MspInit+0x88>)
 8001648:	f043 0301 	orr.w	r3, r3, #1
 800164c:	6313      	str	r3, [r2, #48]	@ 0x30
 800164e:	4b0e      	ldr	r3, [pc, #56]	@ (8001688 <HAL_SPI_MspInit+0x88>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001652:	f003 0301 	and.w	r3, r3, #1
 8001656:	60fb      	str	r3, [r7, #12]
 8001658:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800165a:	23e0      	movs	r3, #224	@ 0xe0
 800165c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800165e:	2302      	movs	r3, #2
 8001660:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001662:	2300      	movs	r3, #0
 8001664:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001666:	2300      	movs	r3, #0
 8001668:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800166a:	2305      	movs	r3, #5
 800166c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800166e:	f107 0314 	add.w	r3, r7, #20
 8001672:	4619      	mov	r1, r3
 8001674:	4805      	ldr	r0, [pc, #20]	@ (800168c <HAL_SPI_MspInit+0x8c>)
 8001676:	f000 fb1b 	bl	8001cb0 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 800167a:	bf00      	nop
 800167c:	3728      	adds	r7, #40	@ 0x28
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	40013000 	.word	0x40013000
 8001688:	40023800 	.word	0x40023800
 800168c:	40020000 	.word	0x40020000

08001690 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001690:	b480      	push	{r7}
 8001692:	b085      	sub	sp, #20
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a0b      	ldr	r2, [pc, #44]	@ (80016cc <HAL_TIM_Base_MspInit+0x3c>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d10d      	bne.n	80016be <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80016a2:	2300      	movs	r3, #0
 80016a4:	60fb      	str	r3, [r7, #12]
 80016a6:	4b0a      	ldr	r3, [pc, #40]	@ (80016d0 <HAL_TIM_Base_MspInit+0x40>)
 80016a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016aa:	4a09      	ldr	r2, [pc, #36]	@ (80016d0 <HAL_TIM_Base_MspInit+0x40>)
 80016ac:	f043 0301 	orr.w	r3, r3, #1
 80016b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80016b2:	4b07      	ldr	r3, [pc, #28]	@ (80016d0 <HAL_TIM_Base_MspInit+0x40>)
 80016b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016b6:	f003 0301 	and.w	r3, r3, #1
 80016ba:	60fb      	str	r3, [r7, #12]
 80016bc:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 80016be:	bf00      	nop
 80016c0:	3714      	adds	r7, #20
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	40010000 	.word	0x40010000
 80016d0:	40023800 	.word	0x40023800

080016d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b08a      	sub	sp, #40	@ 0x28
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016dc:	f107 0314 	add.w	r3, r7, #20
 80016e0:	2200      	movs	r2, #0
 80016e2:	601a      	str	r2, [r3, #0]
 80016e4:	605a      	str	r2, [r3, #4]
 80016e6:	609a      	str	r2, [r3, #8]
 80016e8:	60da      	str	r2, [r3, #12]
 80016ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a19      	ldr	r2, [pc, #100]	@ (8001758 <HAL_UART_MspInit+0x84>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d12c      	bne.n	8001750 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80016f6:	2300      	movs	r3, #0
 80016f8:	613b      	str	r3, [r7, #16]
 80016fa:	4b18      	ldr	r3, [pc, #96]	@ (800175c <HAL_UART_MspInit+0x88>)
 80016fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016fe:	4a17      	ldr	r2, [pc, #92]	@ (800175c <HAL_UART_MspInit+0x88>)
 8001700:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001704:	6413      	str	r3, [r2, #64]	@ 0x40
 8001706:	4b15      	ldr	r3, [pc, #84]	@ (800175c <HAL_UART_MspInit+0x88>)
 8001708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800170a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800170e:	613b      	str	r3, [r7, #16]
 8001710:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001712:	2300      	movs	r3, #0
 8001714:	60fb      	str	r3, [r7, #12]
 8001716:	4b11      	ldr	r3, [pc, #68]	@ (800175c <HAL_UART_MspInit+0x88>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800171a:	4a10      	ldr	r2, [pc, #64]	@ (800175c <HAL_UART_MspInit+0x88>)
 800171c:	f043 0302 	orr.w	r3, r3, #2
 8001720:	6313      	str	r3, [r2, #48]	@ 0x30
 8001722:	4b0e      	ldr	r3, [pc, #56]	@ (800175c <HAL_UART_MspInit+0x88>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001726:	f003 0302 	and.w	r3, r3, #2
 800172a:	60fb      	str	r3, [r7, #12]
 800172c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800172e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001732:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001734:	2302      	movs	r3, #2
 8001736:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001738:	2300      	movs	r3, #0
 800173a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800173c:	2303      	movs	r3, #3
 800173e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001740:	2307      	movs	r3, #7
 8001742:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001744:	f107 0314 	add.w	r3, r7, #20
 8001748:	4619      	mov	r1, r3
 800174a:	4805      	ldr	r0, [pc, #20]	@ (8001760 <HAL_UART_MspInit+0x8c>)
 800174c:	f000 fab0 	bl	8001cb0 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8001750:	bf00      	nop
 8001752:	3728      	adds	r7, #40	@ 0x28
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	40004800 	.word	0x40004800
 800175c:	40023800 	.word	0x40023800
 8001760:	40020400 	.word	0x40020400

08001764 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001768:	bf00      	nop
 800176a:	e7fd      	b.n	8001768 <NMI_Handler+0x4>

0800176c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001770:	bf00      	nop
 8001772:	e7fd      	b.n	8001770 <HardFault_Handler+0x4>

08001774 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001778:	bf00      	nop
 800177a:	e7fd      	b.n	8001778 <MemManage_Handler+0x4>

0800177c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001780:	bf00      	nop
 8001782:	e7fd      	b.n	8001780 <BusFault_Handler+0x4>

08001784 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001788:	bf00      	nop
 800178a:	e7fd      	b.n	8001788 <UsageFault_Handler+0x4>

0800178c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001790:	bf00      	nop
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr

0800179a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800179a:	b480      	push	{r7}
 800179c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800179e:	bf00      	nop
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr

080017a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017ac:	bf00      	nop
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr

080017b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017b6:	b580      	push	{r7, lr}
 80017b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017ba:	f000 f923 	bl	8001a04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017be:	bf00      	nop
 80017c0:	bd80      	pop	{r7, pc}
	...

080017c4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80017c8:	4802      	ldr	r0, [pc, #8]	@ (80017d4 <OTG_FS_IRQHandler+0x10>)
 80017ca:	f000 ff1f 	bl	800260c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80017ce:	bf00      	nop
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	200006dc 	.word	0x200006dc

080017d8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b086      	sub	sp, #24
 80017dc:	af00      	add	r7, sp, #0
 80017de:	60f8      	str	r0, [r7, #12]
 80017e0:	60b9      	str	r1, [r7, #8]
 80017e2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017e4:	2300      	movs	r3, #0
 80017e6:	617b      	str	r3, [r7, #20]
 80017e8:	e00a      	b.n	8001800 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80017ea:	f3af 8000 	nop.w
 80017ee:	4601      	mov	r1, r0
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	1c5a      	adds	r2, r3, #1
 80017f4:	60ba      	str	r2, [r7, #8]
 80017f6:	b2ca      	uxtb	r2, r1
 80017f8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	3301      	adds	r3, #1
 80017fe:	617b      	str	r3, [r7, #20]
 8001800:	697a      	ldr	r2, [r7, #20]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	429a      	cmp	r2, r3
 8001806:	dbf0      	blt.n	80017ea <_read+0x12>
  }

  return len;
 8001808:	687b      	ldr	r3, [r7, #4]
}
 800180a:	4618      	mov	r0, r3
 800180c:	3718      	adds	r7, #24
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}

08001812 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001812:	b480      	push	{r7}
 8001814:	b083      	sub	sp, #12
 8001816:	af00      	add	r7, sp, #0
 8001818:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800181a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800181e:	4618      	mov	r0, r3
 8001820:	370c      	adds	r7, #12
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr

0800182a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800182a:	b480      	push	{r7}
 800182c:	b083      	sub	sp, #12
 800182e:	af00      	add	r7, sp, #0
 8001830:	6078      	str	r0, [r7, #4]
 8001832:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800183a:	605a      	str	r2, [r3, #4]
  return 0;
 800183c:	2300      	movs	r3, #0
}
 800183e:	4618      	mov	r0, r3
 8001840:	370c      	adds	r7, #12
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr

0800184a <_isatty>:

int _isatty(int file)
{
 800184a:	b480      	push	{r7}
 800184c:	b083      	sub	sp, #12
 800184e:	af00      	add	r7, sp, #0
 8001850:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001852:	2301      	movs	r3, #1
}
 8001854:	4618      	mov	r0, r3
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001860:	b480      	push	{r7}
 8001862:	b085      	sub	sp, #20
 8001864:	af00      	add	r7, sp, #0
 8001866:	60f8      	str	r0, [r7, #12]
 8001868:	60b9      	str	r1, [r7, #8]
 800186a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800186c:	2300      	movs	r3, #0
}
 800186e:	4618      	mov	r0, r3
 8001870:	3714      	adds	r7, #20
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr
	...

0800187c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b086      	sub	sp, #24
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001884:	4a14      	ldr	r2, [pc, #80]	@ (80018d8 <_sbrk+0x5c>)
 8001886:	4b15      	ldr	r3, [pc, #84]	@ (80018dc <_sbrk+0x60>)
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001890:	4b13      	ldr	r3, [pc, #76]	@ (80018e0 <_sbrk+0x64>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d102      	bne.n	800189e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001898:	4b11      	ldr	r3, [pc, #68]	@ (80018e0 <_sbrk+0x64>)
 800189a:	4a12      	ldr	r2, [pc, #72]	@ (80018e4 <_sbrk+0x68>)
 800189c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800189e:	4b10      	ldr	r3, [pc, #64]	@ (80018e0 <_sbrk+0x64>)
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4413      	add	r3, r2
 80018a6:	693a      	ldr	r2, [r7, #16]
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d207      	bcs.n	80018bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018ac:	f008 ffc2 	bl	800a834 <__errno>
 80018b0:	4603      	mov	r3, r0
 80018b2:	220c      	movs	r2, #12
 80018b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018b6:	f04f 33ff 	mov.w	r3, #4294967295
 80018ba:	e009      	b.n	80018d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018bc:	4b08      	ldr	r3, [pc, #32]	@ (80018e0 <_sbrk+0x64>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018c2:	4b07      	ldr	r3, [pc, #28]	@ (80018e0 <_sbrk+0x64>)
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	4413      	add	r3, r2
 80018ca:	4a05      	ldr	r2, [pc, #20]	@ (80018e0 <_sbrk+0x64>)
 80018cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018ce:	68fb      	ldr	r3, [r7, #12]
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	3718      	adds	r7, #24
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	20020000 	.word	0x20020000
 80018dc:	00000400 	.word	0x00000400
 80018e0:	200002f8 	.word	0x200002f8
 80018e4:	20000c08 	.word	0x20000c08

080018e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018ec:	4b06      	ldr	r3, [pc, #24]	@ (8001908 <SystemInit+0x20>)
 80018ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018f2:	4a05      	ldr	r2, [pc, #20]	@ (8001908 <SystemInit+0x20>)
 80018f4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80018f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018fc:	bf00      	nop
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	e000ed00 	.word	0xe000ed00

0800190c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800190c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001944 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001910:	f7ff ffea 	bl	80018e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001914:	480c      	ldr	r0, [pc, #48]	@ (8001948 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001916:	490d      	ldr	r1, [pc, #52]	@ (800194c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001918:	4a0d      	ldr	r2, [pc, #52]	@ (8001950 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800191a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800191c:	e002      	b.n	8001924 <LoopCopyDataInit>

0800191e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800191e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001920:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001922:	3304      	adds	r3, #4

08001924 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001924:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001926:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001928:	d3f9      	bcc.n	800191e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800192a:	4a0a      	ldr	r2, [pc, #40]	@ (8001954 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800192c:	4c0a      	ldr	r4, [pc, #40]	@ (8001958 <LoopFillZerobss+0x22>)
  movs r3, #0
 800192e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001930:	e001      	b.n	8001936 <LoopFillZerobss>

08001932 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001932:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001934:	3204      	adds	r2, #4

08001936 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001936:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001938:	d3fb      	bcc.n	8001932 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800193a:	f008 ff81 	bl	800a840 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800193e:	f7fe fe1f 	bl	8000580 <main>
  bx  lr    
 8001942:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001944:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001948:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800194c:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001950:	0800b4c4 	.word	0x0800b4c4
  ldr r2, =_sbss
 8001954:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001958:	20000c08 	.word	0x20000c08

0800195c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800195c:	e7fe      	b.n	800195c <ADC_IRQHandler>
	...

08001960 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001964:	4b0e      	ldr	r3, [pc, #56]	@ (80019a0 <HAL_Init+0x40>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a0d      	ldr	r2, [pc, #52]	@ (80019a0 <HAL_Init+0x40>)
 800196a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800196e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001970:	4b0b      	ldr	r3, [pc, #44]	@ (80019a0 <HAL_Init+0x40>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a0a      	ldr	r2, [pc, #40]	@ (80019a0 <HAL_Init+0x40>)
 8001976:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800197a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800197c:	4b08      	ldr	r3, [pc, #32]	@ (80019a0 <HAL_Init+0x40>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a07      	ldr	r2, [pc, #28]	@ (80019a0 <HAL_Init+0x40>)
 8001982:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001986:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001988:	2003      	movs	r0, #3
 800198a:	f000 f94f 	bl	8001c2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800198e:	2000      	movs	r0, #0
 8001990:	f000 f808 	bl	80019a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001994:	f7ff fd44 	bl	8001420 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001998:	2300      	movs	r3, #0
}
 800199a:	4618      	mov	r0, r3
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	40023c00 	.word	0x40023c00

080019a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019ac:	4b12      	ldr	r3, [pc, #72]	@ (80019f8 <HAL_InitTick+0x54>)
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	4b12      	ldr	r3, [pc, #72]	@ (80019fc <HAL_InitTick+0x58>)
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	4619      	mov	r1, r3
 80019b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80019be:	fbb2 f3f3 	udiv	r3, r2, r3
 80019c2:	4618      	mov	r0, r3
 80019c4:	f000 f967 	bl	8001c96 <HAL_SYSTICK_Config>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e00e      	b.n	80019f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2b0f      	cmp	r3, #15
 80019d6:	d80a      	bhi.n	80019ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019d8:	2200      	movs	r2, #0
 80019da:	6879      	ldr	r1, [r7, #4]
 80019dc:	f04f 30ff 	mov.w	r0, #4294967295
 80019e0:	f000 f92f 	bl	8001c42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019e4:	4a06      	ldr	r2, [pc, #24]	@ (8001a00 <HAL_InitTick+0x5c>)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019ea:	2300      	movs	r3, #0
 80019ec:	e000      	b.n	80019f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3708      	adds	r7, #8
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	20000000 	.word	0x20000000
 80019fc:	20000008 	.word	0x20000008
 8001a00:	20000004 	.word	0x20000004

08001a04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a08:	4b06      	ldr	r3, [pc, #24]	@ (8001a24 <HAL_IncTick+0x20>)
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	4b06      	ldr	r3, [pc, #24]	@ (8001a28 <HAL_IncTick+0x24>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4413      	add	r3, r2
 8001a14:	4a04      	ldr	r2, [pc, #16]	@ (8001a28 <HAL_IncTick+0x24>)
 8001a16:	6013      	str	r3, [r2, #0]
}
 8001a18:	bf00      	nop
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	20000008 	.word	0x20000008
 8001a28:	200002fc 	.word	0x200002fc

08001a2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a30:	4b03      	ldr	r3, [pc, #12]	@ (8001a40 <HAL_GetTick+0x14>)
 8001a32:	681b      	ldr	r3, [r3, #0]
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	200002fc 	.word	0x200002fc

08001a44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a4c:	f7ff ffee 	bl	8001a2c <HAL_GetTick>
 8001a50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a5c:	d005      	beq.n	8001a6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a5e:	4b0a      	ldr	r3, [pc, #40]	@ (8001a88 <HAL_Delay+0x44>)
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	461a      	mov	r2, r3
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	4413      	add	r3, r2
 8001a68:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a6a:	bf00      	nop
 8001a6c:	f7ff ffde 	bl	8001a2c <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	68fa      	ldr	r2, [r7, #12]
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d8f7      	bhi.n	8001a6c <HAL_Delay+0x28>
  {
  }
}
 8001a7c:	bf00      	nop
 8001a7e:	bf00      	nop
 8001a80:	3710      	adds	r7, #16
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	20000008 	.word	0x20000008

08001a8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b085      	sub	sp, #20
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	f003 0307 	and.w	r3, r3, #7
 8001a9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a9c:	4b0c      	ldr	r3, [pc, #48]	@ (8001ad0 <__NVIC_SetPriorityGrouping+0x44>)
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001aa2:	68ba      	ldr	r2, [r7, #8]
 8001aa4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ab4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ab8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001abc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001abe:	4a04      	ldr	r2, [pc, #16]	@ (8001ad0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	60d3      	str	r3, [r2, #12]
}
 8001ac4:	bf00      	nop
 8001ac6:	3714      	adds	r7, #20
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr
 8001ad0:	e000ed00 	.word	0xe000ed00

08001ad4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ad8:	4b04      	ldr	r3, [pc, #16]	@ (8001aec <__NVIC_GetPriorityGrouping+0x18>)
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	0a1b      	lsrs	r3, r3, #8
 8001ade:	f003 0307 	and.w	r3, r3, #7
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr
 8001aec:	e000ed00 	.word	0xe000ed00

08001af0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	4603      	mov	r3, r0
 8001af8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	db0b      	blt.n	8001b1a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b02:	79fb      	ldrb	r3, [r7, #7]
 8001b04:	f003 021f 	and.w	r2, r3, #31
 8001b08:	4907      	ldr	r1, [pc, #28]	@ (8001b28 <__NVIC_EnableIRQ+0x38>)
 8001b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b0e:	095b      	lsrs	r3, r3, #5
 8001b10:	2001      	movs	r0, #1
 8001b12:	fa00 f202 	lsl.w	r2, r0, r2
 8001b16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b1a:	bf00      	nop
 8001b1c:	370c      	adds	r7, #12
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	e000e100 	.word	0xe000e100

08001b2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	4603      	mov	r3, r0
 8001b34:	6039      	str	r1, [r7, #0]
 8001b36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	db0a      	blt.n	8001b56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	b2da      	uxtb	r2, r3
 8001b44:	490c      	ldr	r1, [pc, #48]	@ (8001b78 <__NVIC_SetPriority+0x4c>)
 8001b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b4a:	0112      	lsls	r2, r2, #4
 8001b4c:	b2d2      	uxtb	r2, r2
 8001b4e:	440b      	add	r3, r1
 8001b50:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b54:	e00a      	b.n	8001b6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	b2da      	uxtb	r2, r3
 8001b5a:	4908      	ldr	r1, [pc, #32]	@ (8001b7c <__NVIC_SetPriority+0x50>)
 8001b5c:	79fb      	ldrb	r3, [r7, #7]
 8001b5e:	f003 030f 	and.w	r3, r3, #15
 8001b62:	3b04      	subs	r3, #4
 8001b64:	0112      	lsls	r2, r2, #4
 8001b66:	b2d2      	uxtb	r2, r2
 8001b68:	440b      	add	r3, r1
 8001b6a:	761a      	strb	r2, [r3, #24]
}
 8001b6c:	bf00      	nop
 8001b6e:	370c      	adds	r7, #12
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr
 8001b78:	e000e100 	.word	0xe000e100
 8001b7c:	e000ed00 	.word	0xe000ed00

08001b80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b089      	sub	sp, #36	@ 0x24
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	60f8      	str	r0, [r7, #12]
 8001b88:	60b9      	str	r1, [r7, #8]
 8001b8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	f003 0307 	and.w	r3, r3, #7
 8001b92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	f1c3 0307 	rsb	r3, r3, #7
 8001b9a:	2b04      	cmp	r3, #4
 8001b9c:	bf28      	it	cs
 8001b9e:	2304      	movcs	r3, #4
 8001ba0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	3304      	adds	r3, #4
 8001ba6:	2b06      	cmp	r3, #6
 8001ba8:	d902      	bls.n	8001bb0 <NVIC_EncodePriority+0x30>
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	3b03      	subs	r3, #3
 8001bae:	e000      	b.n	8001bb2 <NVIC_EncodePriority+0x32>
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bb4:	f04f 32ff 	mov.w	r2, #4294967295
 8001bb8:	69bb      	ldr	r3, [r7, #24]
 8001bba:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbe:	43da      	mvns	r2, r3
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	401a      	ands	r2, r3
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bc8:	f04f 31ff 	mov.w	r1, #4294967295
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	fa01 f303 	lsl.w	r3, r1, r3
 8001bd2:	43d9      	mvns	r1, r3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bd8:	4313      	orrs	r3, r2
         );
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3724      	adds	r7, #36	@ 0x24
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
	...

08001be8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	3b01      	subs	r3, #1
 8001bf4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001bf8:	d301      	bcc.n	8001bfe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e00f      	b.n	8001c1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bfe:	4a0a      	ldr	r2, [pc, #40]	@ (8001c28 <SysTick_Config+0x40>)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	3b01      	subs	r3, #1
 8001c04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c06:	210f      	movs	r1, #15
 8001c08:	f04f 30ff 	mov.w	r0, #4294967295
 8001c0c:	f7ff ff8e 	bl	8001b2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c10:	4b05      	ldr	r3, [pc, #20]	@ (8001c28 <SysTick_Config+0x40>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c16:	4b04      	ldr	r3, [pc, #16]	@ (8001c28 <SysTick_Config+0x40>)
 8001c18:	2207      	movs	r2, #7
 8001c1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c1c:	2300      	movs	r3, #0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3708      	adds	r7, #8
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	e000e010 	.word	0xe000e010

08001c2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c34:	6878      	ldr	r0, [r7, #4]
 8001c36:	f7ff ff29 	bl	8001a8c <__NVIC_SetPriorityGrouping>
}
 8001c3a:	bf00      	nop
 8001c3c:	3708      	adds	r7, #8
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}

08001c42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c42:	b580      	push	{r7, lr}
 8001c44:	b086      	sub	sp, #24
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	4603      	mov	r3, r0
 8001c4a:	60b9      	str	r1, [r7, #8]
 8001c4c:	607a      	str	r2, [r7, #4]
 8001c4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c50:	2300      	movs	r3, #0
 8001c52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c54:	f7ff ff3e 	bl	8001ad4 <__NVIC_GetPriorityGrouping>
 8001c58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c5a:	687a      	ldr	r2, [r7, #4]
 8001c5c:	68b9      	ldr	r1, [r7, #8]
 8001c5e:	6978      	ldr	r0, [r7, #20]
 8001c60:	f7ff ff8e 	bl	8001b80 <NVIC_EncodePriority>
 8001c64:	4602      	mov	r2, r0
 8001c66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c6a:	4611      	mov	r1, r2
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f7ff ff5d 	bl	8001b2c <__NVIC_SetPriority>
}
 8001c72:	bf00      	nop
 8001c74:	3718      	adds	r7, #24
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}

08001c7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c7a:	b580      	push	{r7, lr}
 8001c7c:	b082      	sub	sp, #8
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	4603      	mov	r3, r0
 8001c82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f7ff ff31 	bl	8001af0 <__NVIC_EnableIRQ>
}
 8001c8e:	bf00      	nop
 8001c90:	3708      	adds	r7, #8
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}

08001c96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c96:	b580      	push	{r7, lr}
 8001c98:	b082      	sub	sp, #8
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f7ff ffa2 	bl	8001be8 <SysTick_Config>
 8001ca4:	4603      	mov	r3, r0
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
	...

08001cb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b089      	sub	sp, #36	@ 0x24
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	61fb      	str	r3, [r7, #28]
 8001cca:	e16b      	b.n	8001fa4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ccc:	2201      	movs	r2, #1
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	697a      	ldr	r2, [r7, #20]
 8001cdc:	4013      	ands	r3, r2
 8001cde:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ce0:	693a      	ldr	r2, [r7, #16]
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	f040 815a 	bne.w	8001f9e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f003 0303 	and.w	r3, r3, #3
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d005      	beq.n	8001d02 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cfe:	2b02      	cmp	r3, #2
 8001d00:	d130      	bne.n	8001d64 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	005b      	lsls	r3, r3, #1
 8001d0c:	2203      	movs	r2, #3
 8001d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d12:	43db      	mvns	r3, r3
 8001d14:	69ba      	ldr	r2, [r7, #24]
 8001d16:	4013      	ands	r3, r2
 8001d18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	68da      	ldr	r2, [r3, #12]
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	005b      	lsls	r3, r3, #1
 8001d22:	fa02 f303 	lsl.w	r3, r2, r3
 8001d26:	69ba      	ldr	r2, [r7, #24]
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	69ba      	ldr	r2, [r7, #24]
 8001d30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d38:	2201      	movs	r2, #1
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d40:	43db      	mvns	r3, r3
 8001d42:	69ba      	ldr	r2, [r7, #24]
 8001d44:	4013      	ands	r3, r2
 8001d46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	091b      	lsrs	r3, r3, #4
 8001d4e:	f003 0201 	and.w	r2, r3, #1
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	fa02 f303 	lsl.w	r3, r2, r3
 8001d58:	69ba      	ldr	r2, [r7, #24]
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	69ba      	ldr	r2, [r7, #24]
 8001d62:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f003 0303 	and.w	r3, r3, #3
 8001d6c:	2b03      	cmp	r3, #3
 8001d6e:	d017      	beq.n	8001da0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	005b      	lsls	r3, r3, #1
 8001d7a:	2203      	movs	r2, #3
 8001d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d80:	43db      	mvns	r3, r3
 8001d82:	69ba      	ldr	r2, [r7, #24]
 8001d84:	4013      	ands	r3, r2
 8001d86:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	689a      	ldr	r2, [r3, #8]
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	005b      	lsls	r3, r3, #1
 8001d90:	fa02 f303 	lsl.w	r3, r2, r3
 8001d94:	69ba      	ldr	r2, [r7, #24]
 8001d96:	4313      	orrs	r3, r2
 8001d98:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	69ba      	ldr	r2, [r7, #24]
 8001d9e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f003 0303 	and.w	r3, r3, #3
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d123      	bne.n	8001df4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	08da      	lsrs	r2, r3, #3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	3208      	adds	r2, #8
 8001db4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001db8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	f003 0307 	and.w	r3, r3, #7
 8001dc0:	009b      	lsls	r3, r3, #2
 8001dc2:	220f      	movs	r2, #15
 8001dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc8:	43db      	mvns	r3, r3
 8001dca:	69ba      	ldr	r2, [r7, #24]
 8001dcc:	4013      	ands	r3, r2
 8001dce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	691a      	ldr	r2, [r3, #16]
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	f003 0307 	and.w	r3, r3, #7
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8001de0:	69ba      	ldr	r2, [r7, #24]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	08da      	lsrs	r2, r3, #3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	3208      	adds	r2, #8
 8001dee:	69b9      	ldr	r1, [r7, #24]
 8001df0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	005b      	lsls	r3, r3, #1
 8001dfe:	2203      	movs	r2, #3
 8001e00:	fa02 f303 	lsl.w	r3, r2, r3
 8001e04:	43db      	mvns	r3, r3
 8001e06:	69ba      	ldr	r2, [r7, #24]
 8001e08:	4013      	ands	r3, r2
 8001e0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f003 0203 	and.w	r2, r3, #3
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	005b      	lsls	r3, r3, #1
 8001e18:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1c:	69ba      	ldr	r2, [r7, #24]
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	69ba      	ldr	r2, [r7, #24]
 8001e26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	f000 80b4 	beq.w	8001f9e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e36:	2300      	movs	r3, #0
 8001e38:	60fb      	str	r3, [r7, #12]
 8001e3a:	4b60      	ldr	r3, [pc, #384]	@ (8001fbc <HAL_GPIO_Init+0x30c>)
 8001e3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e3e:	4a5f      	ldr	r2, [pc, #380]	@ (8001fbc <HAL_GPIO_Init+0x30c>)
 8001e40:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e44:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e46:	4b5d      	ldr	r3, [pc, #372]	@ (8001fbc <HAL_GPIO_Init+0x30c>)
 8001e48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e4e:	60fb      	str	r3, [r7, #12]
 8001e50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e52:	4a5b      	ldr	r2, [pc, #364]	@ (8001fc0 <HAL_GPIO_Init+0x310>)
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	089b      	lsrs	r3, r3, #2
 8001e58:	3302      	adds	r3, #2
 8001e5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e60:	69fb      	ldr	r3, [r7, #28]
 8001e62:	f003 0303 	and.w	r3, r3, #3
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	220f      	movs	r2, #15
 8001e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6e:	43db      	mvns	r3, r3
 8001e70:	69ba      	ldr	r2, [r7, #24]
 8001e72:	4013      	ands	r3, r2
 8001e74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4a52      	ldr	r2, [pc, #328]	@ (8001fc4 <HAL_GPIO_Init+0x314>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d02b      	beq.n	8001ed6 <HAL_GPIO_Init+0x226>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	4a51      	ldr	r2, [pc, #324]	@ (8001fc8 <HAL_GPIO_Init+0x318>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d025      	beq.n	8001ed2 <HAL_GPIO_Init+0x222>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4a50      	ldr	r2, [pc, #320]	@ (8001fcc <HAL_GPIO_Init+0x31c>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d01f      	beq.n	8001ece <HAL_GPIO_Init+0x21e>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4a4f      	ldr	r2, [pc, #316]	@ (8001fd0 <HAL_GPIO_Init+0x320>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d019      	beq.n	8001eca <HAL_GPIO_Init+0x21a>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4a4e      	ldr	r2, [pc, #312]	@ (8001fd4 <HAL_GPIO_Init+0x324>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d013      	beq.n	8001ec6 <HAL_GPIO_Init+0x216>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4a4d      	ldr	r2, [pc, #308]	@ (8001fd8 <HAL_GPIO_Init+0x328>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d00d      	beq.n	8001ec2 <HAL_GPIO_Init+0x212>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4a4c      	ldr	r2, [pc, #304]	@ (8001fdc <HAL_GPIO_Init+0x32c>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d007      	beq.n	8001ebe <HAL_GPIO_Init+0x20e>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4a4b      	ldr	r2, [pc, #300]	@ (8001fe0 <HAL_GPIO_Init+0x330>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d101      	bne.n	8001eba <HAL_GPIO_Init+0x20a>
 8001eb6:	2307      	movs	r3, #7
 8001eb8:	e00e      	b.n	8001ed8 <HAL_GPIO_Init+0x228>
 8001eba:	2308      	movs	r3, #8
 8001ebc:	e00c      	b.n	8001ed8 <HAL_GPIO_Init+0x228>
 8001ebe:	2306      	movs	r3, #6
 8001ec0:	e00a      	b.n	8001ed8 <HAL_GPIO_Init+0x228>
 8001ec2:	2305      	movs	r3, #5
 8001ec4:	e008      	b.n	8001ed8 <HAL_GPIO_Init+0x228>
 8001ec6:	2304      	movs	r3, #4
 8001ec8:	e006      	b.n	8001ed8 <HAL_GPIO_Init+0x228>
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e004      	b.n	8001ed8 <HAL_GPIO_Init+0x228>
 8001ece:	2302      	movs	r3, #2
 8001ed0:	e002      	b.n	8001ed8 <HAL_GPIO_Init+0x228>
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e000      	b.n	8001ed8 <HAL_GPIO_Init+0x228>
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	69fa      	ldr	r2, [r7, #28]
 8001eda:	f002 0203 	and.w	r2, r2, #3
 8001ede:	0092      	lsls	r2, r2, #2
 8001ee0:	4093      	lsls	r3, r2
 8001ee2:	69ba      	ldr	r2, [r7, #24]
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ee8:	4935      	ldr	r1, [pc, #212]	@ (8001fc0 <HAL_GPIO_Init+0x310>)
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	089b      	lsrs	r3, r3, #2
 8001eee:	3302      	adds	r3, #2
 8001ef0:	69ba      	ldr	r2, [r7, #24]
 8001ef2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ef6:	4b3b      	ldr	r3, [pc, #236]	@ (8001fe4 <HAL_GPIO_Init+0x334>)
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	43db      	mvns	r3, r3
 8001f00:	69ba      	ldr	r2, [r7, #24]
 8001f02:	4013      	ands	r3, r2
 8001f04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d003      	beq.n	8001f1a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001f12:	69ba      	ldr	r2, [r7, #24]
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f1a:	4a32      	ldr	r2, [pc, #200]	@ (8001fe4 <HAL_GPIO_Init+0x334>)
 8001f1c:	69bb      	ldr	r3, [r7, #24]
 8001f1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f20:	4b30      	ldr	r3, [pc, #192]	@ (8001fe4 <HAL_GPIO_Init+0x334>)
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	43db      	mvns	r3, r3
 8001f2a:	69ba      	ldr	r2, [r7, #24]
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d003      	beq.n	8001f44 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001f3c:	69ba      	ldr	r2, [r7, #24]
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f44:	4a27      	ldr	r2, [pc, #156]	@ (8001fe4 <HAL_GPIO_Init+0x334>)
 8001f46:	69bb      	ldr	r3, [r7, #24]
 8001f48:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f4a:	4b26      	ldr	r3, [pc, #152]	@ (8001fe4 <HAL_GPIO_Init+0x334>)
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	43db      	mvns	r3, r3
 8001f54:	69ba      	ldr	r2, [r7, #24]
 8001f56:	4013      	ands	r3, r2
 8001f58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d003      	beq.n	8001f6e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001f66:	69ba      	ldr	r2, [r7, #24]
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f6e:	4a1d      	ldr	r2, [pc, #116]	@ (8001fe4 <HAL_GPIO_Init+0x334>)
 8001f70:	69bb      	ldr	r3, [r7, #24]
 8001f72:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f74:	4b1b      	ldr	r3, [pc, #108]	@ (8001fe4 <HAL_GPIO_Init+0x334>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	43db      	mvns	r3, r3
 8001f7e:	69ba      	ldr	r2, [r7, #24]
 8001f80:	4013      	ands	r3, r2
 8001f82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d003      	beq.n	8001f98 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001f90:	69ba      	ldr	r2, [r7, #24]
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f98:	4a12      	ldr	r2, [pc, #72]	@ (8001fe4 <HAL_GPIO_Init+0x334>)
 8001f9a:	69bb      	ldr	r3, [r7, #24]
 8001f9c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	3301      	adds	r3, #1
 8001fa2:	61fb      	str	r3, [r7, #28]
 8001fa4:	69fb      	ldr	r3, [r7, #28]
 8001fa6:	2b0f      	cmp	r3, #15
 8001fa8:	f67f ae90 	bls.w	8001ccc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001fac:	bf00      	nop
 8001fae:	bf00      	nop
 8001fb0:	3724      	adds	r7, #36	@ 0x24
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop
 8001fbc:	40023800 	.word	0x40023800
 8001fc0:	40013800 	.word	0x40013800
 8001fc4:	40020000 	.word	0x40020000
 8001fc8:	40020400 	.word	0x40020400
 8001fcc:	40020800 	.word	0x40020800
 8001fd0:	40020c00 	.word	0x40020c00
 8001fd4:	40021000 	.word	0x40021000
 8001fd8:	40021400 	.word	0x40021400
 8001fdc:	40021800 	.word	0x40021800
 8001fe0:	40021c00 	.word	0x40021c00
 8001fe4:	40013c00 	.word	0x40013c00

08001fe8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b085      	sub	sp, #20
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	460b      	mov	r3, r1
 8001ff2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	691a      	ldr	r2, [r3, #16]
 8001ff8:	887b      	ldrh	r3, [r7, #2]
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d002      	beq.n	8002006 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002000:	2301      	movs	r3, #1
 8002002:	73fb      	strb	r3, [r7, #15]
 8002004:	e001      	b.n	800200a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002006:	2300      	movs	r3, #0
 8002008:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800200a:	7bfb      	ldrb	r3, [r7, #15]
}
 800200c:	4618      	mov	r0, r3
 800200e:	3714      	adds	r7, #20
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr

08002018 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	460b      	mov	r3, r1
 8002022:	807b      	strh	r3, [r7, #2]
 8002024:	4613      	mov	r3, r2
 8002026:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002028:	787b      	ldrb	r3, [r7, #1]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d003      	beq.n	8002036 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800202e:	887a      	ldrh	r2, [r7, #2]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002034:	e003      	b.n	800203e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002036:	887b      	ldrh	r3, [r7, #2]
 8002038:	041a      	lsls	r2, r3, #16
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	619a      	str	r2, [r3, #24]
}
 800203e:	bf00      	nop
 8002040:	370c      	adds	r7, #12
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr

0800204a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800204a:	b580      	push	{r7, lr}
 800204c:	b086      	sub	sp, #24
 800204e:	af02      	add	r7, sp, #8
 8002050:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d101      	bne.n	800205c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e059      	b.n	8002110 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8002068:	b2db      	uxtb	r3, r3
 800206a:	2b00      	cmp	r3, #0
 800206c:	d106      	bne.n	800207c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2200      	movs	r2, #0
 8002072:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f007 fefc 	bl	8009e74 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2203      	movs	r2, #3
 8002080:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800208a:	d102      	bne.n	8002092 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2200      	movs	r2, #0
 8002090:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4618      	mov	r0, r3
 8002098:	f004 fd15 	bl	8006ac6 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6818      	ldr	r0, [r3, #0]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	7c1a      	ldrb	r2, [r3, #16]
 80020a4:	f88d 2000 	strb.w	r2, [sp]
 80020a8:	3304      	adds	r3, #4
 80020aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020ac:	f004 fc96 	bl	80069dc <USB_CoreInit>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d005      	beq.n	80020c2 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2202      	movs	r2, #2
 80020ba:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e026      	b.n	8002110 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	2101      	movs	r1, #1
 80020c8:	4618      	mov	r0, r3
 80020ca:	f004 fd0d 	bl	8006ae8 <USB_SetCurrentMode>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d005      	beq.n	80020e0 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2202      	movs	r2, #2
 80020d8:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	e017      	b.n	8002110 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6818      	ldr	r0, [r3, #0]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	7c1a      	ldrb	r2, [r3, #16]
 80020e8:	f88d 2000 	strb.w	r2, [sp]
 80020ec:	3304      	adds	r3, #4
 80020ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020f0:	f004 feb0 	bl	8006e54 <USB_HostInit>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d005      	beq.n	8002106 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2202      	movs	r2, #2
 80020fe:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e004      	b.n	8002110 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2201      	movs	r2, #1
 800210a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 800210e:	2300      	movs	r3, #0
}
 8002110:	4618      	mov	r0, r3
 8002112:	3710      	adds	r7, #16
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}

08002118 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8002118:	b590      	push	{r4, r7, lr}
 800211a:	b08b      	sub	sp, #44	@ 0x2c
 800211c:	af04      	add	r7, sp, #16
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	4608      	mov	r0, r1
 8002122:	4611      	mov	r1, r2
 8002124:	461a      	mov	r2, r3
 8002126:	4603      	mov	r3, r0
 8002128:	70fb      	strb	r3, [r7, #3]
 800212a:	460b      	mov	r3, r1
 800212c:	70bb      	strb	r3, [r7, #2]
 800212e:	4613      	mov	r3, r2
 8002130:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8002132:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8002134:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800213c:	2b01      	cmp	r3, #1
 800213e:	d101      	bne.n	8002144 <HAL_HCD_HC_Init+0x2c>
 8002140:	2302      	movs	r3, #2
 8002142:	e09d      	b.n	8002280 <HAL_HCD_HC_Init+0x168>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2201      	movs	r2, #1
 8002148:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 800214c:	78fa      	ldrb	r2, [r7, #3]
 800214e:	6879      	ldr	r1, [r7, #4]
 8002150:	4613      	mov	r3, r2
 8002152:	011b      	lsls	r3, r3, #4
 8002154:	1a9b      	subs	r3, r3, r2
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	440b      	add	r3, r1
 800215a:	3319      	adds	r3, #25
 800215c:	2200      	movs	r2, #0
 800215e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002160:	78fa      	ldrb	r2, [r7, #3]
 8002162:	6879      	ldr	r1, [r7, #4]
 8002164:	4613      	mov	r3, r2
 8002166:	011b      	lsls	r3, r3, #4
 8002168:	1a9b      	subs	r3, r3, r2
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	440b      	add	r3, r1
 800216e:	3314      	adds	r3, #20
 8002170:	787a      	ldrb	r2, [r7, #1]
 8002172:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002174:	78fa      	ldrb	r2, [r7, #3]
 8002176:	6879      	ldr	r1, [r7, #4]
 8002178:	4613      	mov	r3, r2
 800217a:	011b      	lsls	r3, r3, #4
 800217c:	1a9b      	subs	r3, r3, r2
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	440b      	add	r3, r1
 8002182:	3315      	adds	r3, #21
 8002184:	78fa      	ldrb	r2, [r7, #3]
 8002186:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002188:	78fa      	ldrb	r2, [r7, #3]
 800218a:	6879      	ldr	r1, [r7, #4]
 800218c:	4613      	mov	r3, r2
 800218e:	011b      	lsls	r3, r3, #4
 8002190:	1a9b      	subs	r3, r3, r2
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	440b      	add	r3, r1
 8002196:	3326      	adds	r3, #38	@ 0x26
 8002198:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800219c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800219e:	78fa      	ldrb	r2, [r7, #3]
 80021a0:	78bb      	ldrb	r3, [r7, #2]
 80021a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80021a6:	b2d8      	uxtb	r0, r3
 80021a8:	6879      	ldr	r1, [r7, #4]
 80021aa:	4613      	mov	r3, r2
 80021ac:	011b      	lsls	r3, r3, #4
 80021ae:	1a9b      	subs	r3, r3, r2
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	440b      	add	r3, r1
 80021b4:	3316      	adds	r3, #22
 80021b6:	4602      	mov	r2, r0
 80021b8:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 80021ba:	78fb      	ldrb	r3, [r7, #3]
 80021bc:	4619      	mov	r1, r3
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f000 fbc8 	bl	8002954 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 80021c4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	da0a      	bge.n	80021e2 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80021cc:	78fa      	ldrb	r2, [r7, #3]
 80021ce:	6879      	ldr	r1, [r7, #4]
 80021d0:	4613      	mov	r3, r2
 80021d2:	011b      	lsls	r3, r3, #4
 80021d4:	1a9b      	subs	r3, r3, r2
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	440b      	add	r3, r1
 80021da:	3317      	adds	r3, #23
 80021dc:	2201      	movs	r2, #1
 80021de:	701a      	strb	r2, [r3, #0]
 80021e0:	e009      	b.n	80021f6 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80021e2:	78fa      	ldrb	r2, [r7, #3]
 80021e4:	6879      	ldr	r1, [r7, #4]
 80021e6:	4613      	mov	r3, r2
 80021e8:	011b      	lsls	r3, r3, #4
 80021ea:	1a9b      	subs	r3, r3, r2
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	440b      	add	r3, r1
 80021f0:	3317      	adds	r3, #23
 80021f2:	2200      	movs	r2, #0
 80021f4:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4618      	mov	r0, r3
 80021fc:	f004 ff8e 	bl	800711c <USB_GetHostSpeed>
 8002200:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8002202:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002206:	2b01      	cmp	r3, #1
 8002208:	d10b      	bne.n	8002222 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 800220a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800220e:	2b01      	cmp	r3, #1
 8002210:	d107      	bne.n	8002222 <HAL_HCD_HC_Init+0x10a>
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d104      	bne.n	8002222 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	2bbc      	cmp	r3, #188	@ 0xbc
 800221c:	d901      	bls.n	8002222 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 800221e:	23bc      	movs	r3, #188	@ 0xbc
 8002220:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8002222:	78fa      	ldrb	r2, [r7, #3]
 8002224:	6879      	ldr	r1, [r7, #4]
 8002226:	4613      	mov	r3, r2
 8002228:	011b      	lsls	r3, r3, #4
 800222a:	1a9b      	subs	r3, r3, r2
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	440b      	add	r3, r1
 8002230:	3318      	adds	r3, #24
 8002232:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8002236:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8002238:	78fa      	ldrb	r2, [r7, #3]
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	b298      	uxth	r0, r3
 800223e:	6879      	ldr	r1, [r7, #4]
 8002240:	4613      	mov	r3, r2
 8002242:	011b      	lsls	r3, r3, #4
 8002244:	1a9b      	subs	r3, r3, r2
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	440b      	add	r3, r1
 800224a:	3328      	adds	r3, #40	@ 0x28
 800224c:	4602      	mov	r2, r0
 800224e:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6818      	ldr	r0, [r3, #0]
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	b29b      	uxth	r3, r3
 8002258:	787c      	ldrb	r4, [r7, #1]
 800225a:	78ba      	ldrb	r2, [r7, #2]
 800225c:	78f9      	ldrb	r1, [r7, #3]
 800225e:	9302      	str	r3, [sp, #8]
 8002260:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002264:	9301      	str	r3, [sp, #4]
 8002266:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800226a:	9300      	str	r3, [sp, #0]
 800226c:	4623      	mov	r3, r4
 800226e:	f004 ff7d 	bl	800716c <USB_HC_Init>
 8002272:	4603      	mov	r3, r0
 8002274:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2200      	movs	r2, #0
 800227a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 800227e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002280:	4618      	mov	r0, r3
 8002282:	371c      	adds	r7, #28
 8002284:	46bd      	mov	sp, r7
 8002286:	bd90      	pop	{r4, r7, pc}

08002288 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b084      	sub	sp, #16
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	460b      	mov	r3, r1
 8002292:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002294:	2300      	movs	r3, #0
 8002296:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d101      	bne.n	80022a6 <HAL_HCD_HC_Halt+0x1e>
 80022a2:	2302      	movs	r3, #2
 80022a4:	e00f      	b.n	80022c6 <HAL_HCD_HC_Halt+0x3e>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2201      	movs	r2, #1
 80022aa:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	78fa      	ldrb	r2, [r7, #3]
 80022b4:	4611      	mov	r1, r2
 80022b6:	4618      	mov	r0, r3
 80022b8:	f005 fb0f 	bl	80078da <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2200      	movs	r2, #0
 80022c0:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80022c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3710      	adds	r7, #16
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
	...

080022d0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	4608      	mov	r0, r1
 80022da:	4611      	mov	r1, r2
 80022dc:	461a      	mov	r2, r3
 80022de:	4603      	mov	r3, r0
 80022e0:	70fb      	strb	r3, [r7, #3]
 80022e2:	460b      	mov	r3, r1
 80022e4:	70bb      	strb	r3, [r7, #2]
 80022e6:	4613      	mov	r3, r2
 80022e8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80022ea:	78fa      	ldrb	r2, [r7, #3]
 80022ec:	6879      	ldr	r1, [r7, #4]
 80022ee:	4613      	mov	r3, r2
 80022f0:	011b      	lsls	r3, r3, #4
 80022f2:	1a9b      	subs	r3, r3, r2
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	440b      	add	r3, r1
 80022f8:	3317      	adds	r3, #23
 80022fa:	78ba      	ldrb	r2, [r7, #2]
 80022fc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80022fe:	78fa      	ldrb	r2, [r7, #3]
 8002300:	6879      	ldr	r1, [r7, #4]
 8002302:	4613      	mov	r3, r2
 8002304:	011b      	lsls	r3, r3, #4
 8002306:	1a9b      	subs	r3, r3, r2
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	440b      	add	r3, r1
 800230c:	3326      	adds	r3, #38	@ 0x26
 800230e:	787a      	ldrb	r2, [r7, #1]
 8002310:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002312:	7c3b      	ldrb	r3, [r7, #16]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d114      	bne.n	8002342 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002318:	78fa      	ldrb	r2, [r7, #3]
 800231a:	6879      	ldr	r1, [r7, #4]
 800231c:	4613      	mov	r3, r2
 800231e:	011b      	lsls	r3, r3, #4
 8002320:	1a9b      	subs	r3, r3, r2
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	440b      	add	r3, r1
 8002326:	332a      	adds	r3, #42	@ 0x2a
 8002328:	2203      	movs	r2, #3
 800232a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800232c:	78fa      	ldrb	r2, [r7, #3]
 800232e:	6879      	ldr	r1, [r7, #4]
 8002330:	4613      	mov	r3, r2
 8002332:	011b      	lsls	r3, r3, #4
 8002334:	1a9b      	subs	r3, r3, r2
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	440b      	add	r3, r1
 800233a:	3319      	adds	r3, #25
 800233c:	7f3a      	ldrb	r2, [r7, #28]
 800233e:	701a      	strb	r2, [r3, #0]
 8002340:	e009      	b.n	8002356 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002342:	78fa      	ldrb	r2, [r7, #3]
 8002344:	6879      	ldr	r1, [r7, #4]
 8002346:	4613      	mov	r3, r2
 8002348:	011b      	lsls	r3, r3, #4
 800234a:	1a9b      	subs	r3, r3, r2
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	440b      	add	r3, r1
 8002350:	332a      	adds	r3, #42	@ 0x2a
 8002352:	2202      	movs	r2, #2
 8002354:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002356:	787b      	ldrb	r3, [r7, #1]
 8002358:	2b03      	cmp	r3, #3
 800235a:	f200 8102 	bhi.w	8002562 <HAL_HCD_HC_SubmitRequest+0x292>
 800235e:	a201      	add	r2, pc, #4	@ (adr r2, 8002364 <HAL_HCD_HC_SubmitRequest+0x94>)
 8002360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002364:	08002375 	.word	0x08002375
 8002368:	0800254d 	.word	0x0800254d
 800236c:	08002439 	.word	0x08002439
 8002370:	080024c3 	.word	0x080024c3
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8002374:	7c3b      	ldrb	r3, [r7, #16]
 8002376:	2b01      	cmp	r3, #1
 8002378:	f040 80f5 	bne.w	8002566 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 800237c:	78bb      	ldrb	r3, [r7, #2]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d12d      	bne.n	80023de <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8002382:	8b3b      	ldrh	r3, [r7, #24]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d109      	bne.n	800239c <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8002388:	78fa      	ldrb	r2, [r7, #3]
 800238a:	6879      	ldr	r1, [r7, #4]
 800238c:	4613      	mov	r3, r2
 800238e:	011b      	lsls	r3, r3, #4
 8002390:	1a9b      	subs	r3, r3, r2
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	440b      	add	r3, r1
 8002396:	333d      	adds	r3, #61	@ 0x3d
 8002398:	2201      	movs	r2, #1
 800239a:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 800239c:	78fa      	ldrb	r2, [r7, #3]
 800239e:	6879      	ldr	r1, [r7, #4]
 80023a0:	4613      	mov	r3, r2
 80023a2:	011b      	lsls	r3, r3, #4
 80023a4:	1a9b      	subs	r3, r3, r2
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	440b      	add	r3, r1
 80023aa:	333d      	adds	r3, #61	@ 0x3d
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d10a      	bne.n	80023c8 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80023b2:	78fa      	ldrb	r2, [r7, #3]
 80023b4:	6879      	ldr	r1, [r7, #4]
 80023b6:	4613      	mov	r3, r2
 80023b8:	011b      	lsls	r3, r3, #4
 80023ba:	1a9b      	subs	r3, r3, r2
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	440b      	add	r3, r1
 80023c0:	332a      	adds	r3, #42	@ 0x2a
 80023c2:	2200      	movs	r2, #0
 80023c4:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 80023c6:	e0ce      	b.n	8002566 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80023c8:	78fa      	ldrb	r2, [r7, #3]
 80023ca:	6879      	ldr	r1, [r7, #4]
 80023cc:	4613      	mov	r3, r2
 80023ce:	011b      	lsls	r3, r3, #4
 80023d0:	1a9b      	subs	r3, r3, r2
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	440b      	add	r3, r1
 80023d6:	332a      	adds	r3, #42	@ 0x2a
 80023d8:	2202      	movs	r2, #2
 80023da:	701a      	strb	r2, [r3, #0]
      break;
 80023dc:	e0c3      	b.n	8002566 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 80023de:	78fa      	ldrb	r2, [r7, #3]
 80023e0:	6879      	ldr	r1, [r7, #4]
 80023e2:	4613      	mov	r3, r2
 80023e4:	011b      	lsls	r3, r3, #4
 80023e6:	1a9b      	subs	r3, r3, r2
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	440b      	add	r3, r1
 80023ec:	331a      	adds	r3, #26
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	f040 80b8 	bne.w	8002566 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 80023f6:	78fa      	ldrb	r2, [r7, #3]
 80023f8:	6879      	ldr	r1, [r7, #4]
 80023fa:	4613      	mov	r3, r2
 80023fc:	011b      	lsls	r3, r3, #4
 80023fe:	1a9b      	subs	r3, r3, r2
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	440b      	add	r3, r1
 8002404:	333c      	adds	r3, #60	@ 0x3c
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d10a      	bne.n	8002422 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800240c:	78fa      	ldrb	r2, [r7, #3]
 800240e:	6879      	ldr	r1, [r7, #4]
 8002410:	4613      	mov	r3, r2
 8002412:	011b      	lsls	r3, r3, #4
 8002414:	1a9b      	subs	r3, r3, r2
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	440b      	add	r3, r1
 800241a:	332a      	adds	r3, #42	@ 0x2a
 800241c:	2200      	movs	r2, #0
 800241e:	701a      	strb	r2, [r3, #0]
      break;
 8002420:	e0a1      	b.n	8002566 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002422:	78fa      	ldrb	r2, [r7, #3]
 8002424:	6879      	ldr	r1, [r7, #4]
 8002426:	4613      	mov	r3, r2
 8002428:	011b      	lsls	r3, r3, #4
 800242a:	1a9b      	subs	r3, r3, r2
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	440b      	add	r3, r1
 8002430:	332a      	adds	r3, #42	@ 0x2a
 8002432:	2202      	movs	r2, #2
 8002434:	701a      	strb	r2, [r3, #0]
      break;
 8002436:	e096      	b.n	8002566 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002438:	78bb      	ldrb	r3, [r7, #2]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d120      	bne.n	8002480 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800243e:	78fa      	ldrb	r2, [r7, #3]
 8002440:	6879      	ldr	r1, [r7, #4]
 8002442:	4613      	mov	r3, r2
 8002444:	011b      	lsls	r3, r3, #4
 8002446:	1a9b      	subs	r3, r3, r2
 8002448:	009b      	lsls	r3, r3, #2
 800244a:	440b      	add	r3, r1
 800244c:	333d      	adds	r3, #61	@ 0x3d
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d10a      	bne.n	800246a <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002454:	78fa      	ldrb	r2, [r7, #3]
 8002456:	6879      	ldr	r1, [r7, #4]
 8002458:	4613      	mov	r3, r2
 800245a:	011b      	lsls	r3, r3, #4
 800245c:	1a9b      	subs	r3, r3, r2
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	440b      	add	r3, r1
 8002462:	332a      	adds	r3, #42	@ 0x2a
 8002464:	2200      	movs	r2, #0
 8002466:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002468:	e07e      	b.n	8002568 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800246a:	78fa      	ldrb	r2, [r7, #3]
 800246c:	6879      	ldr	r1, [r7, #4]
 800246e:	4613      	mov	r3, r2
 8002470:	011b      	lsls	r3, r3, #4
 8002472:	1a9b      	subs	r3, r3, r2
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	440b      	add	r3, r1
 8002478:	332a      	adds	r3, #42	@ 0x2a
 800247a:	2202      	movs	r2, #2
 800247c:	701a      	strb	r2, [r3, #0]
      break;
 800247e:	e073      	b.n	8002568 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002480:	78fa      	ldrb	r2, [r7, #3]
 8002482:	6879      	ldr	r1, [r7, #4]
 8002484:	4613      	mov	r3, r2
 8002486:	011b      	lsls	r3, r3, #4
 8002488:	1a9b      	subs	r3, r3, r2
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	440b      	add	r3, r1
 800248e:	333c      	adds	r3, #60	@ 0x3c
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d10a      	bne.n	80024ac <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002496:	78fa      	ldrb	r2, [r7, #3]
 8002498:	6879      	ldr	r1, [r7, #4]
 800249a:	4613      	mov	r3, r2
 800249c:	011b      	lsls	r3, r3, #4
 800249e:	1a9b      	subs	r3, r3, r2
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	440b      	add	r3, r1
 80024a4:	332a      	adds	r3, #42	@ 0x2a
 80024a6:	2200      	movs	r2, #0
 80024a8:	701a      	strb	r2, [r3, #0]
      break;
 80024aa:	e05d      	b.n	8002568 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80024ac:	78fa      	ldrb	r2, [r7, #3]
 80024ae:	6879      	ldr	r1, [r7, #4]
 80024b0:	4613      	mov	r3, r2
 80024b2:	011b      	lsls	r3, r3, #4
 80024b4:	1a9b      	subs	r3, r3, r2
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	440b      	add	r3, r1
 80024ba:	332a      	adds	r3, #42	@ 0x2a
 80024bc:	2202      	movs	r2, #2
 80024be:	701a      	strb	r2, [r3, #0]
      break;
 80024c0:	e052      	b.n	8002568 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80024c2:	78bb      	ldrb	r3, [r7, #2]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d120      	bne.n	800250a <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80024c8:	78fa      	ldrb	r2, [r7, #3]
 80024ca:	6879      	ldr	r1, [r7, #4]
 80024cc:	4613      	mov	r3, r2
 80024ce:	011b      	lsls	r3, r3, #4
 80024d0:	1a9b      	subs	r3, r3, r2
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	440b      	add	r3, r1
 80024d6:	333d      	adds	r3, #61	@ 0x3d
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d10a      	bne.n	80024f4 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80024de:	78fa      	ldrb	r2, [r7, #3]
 80024e0:	6879      	ldr	r1, [r7, #4]
 80024e2:	4613      	mov	r3, r2
 80024e4:	011b      	lsls	r3, r3, #4
 80024e6:	1a9b      	subs	r3, r3, r2
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	440b      	add	r3, r1
 80024ec:	332a      	adds	r3, #42	@ 0x2a
 80024ee:	2200      	movs	r2, #0
 80024f0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80024f2:	e039      	b.n	8002568 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80024f4:	78fa      	ldrb	r2, [r7, #3]
 80024f6:	6879      	ldr	r1, [r7, #4]
 80024f8:	4613      	mov	r3, r2
 80024fa:	011b      	lsls	r3, r3, #4
 80024fc:	1a9b      	subs	r3, r3, r2
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	440b      	add	r3, r1
 8002502:	332a      	adds	r3, #42	@ 0x2a
 8002504:	2202      	movs	r2, #2
 8002506:	701a      	strb	r2, [r3, #0]
      break;
 8002508:	e02e      	b.n	8002568 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800250a:	78fa      	ldrb	r2, [r7, #3]
 800250c:	6879      	ldr	r1, [r7, #4]
 800250e:	4613      	mov	r3, r2
 8002510:	011b      	lsls	r3, r3, #4
 8002512:	1a9b      	subs	r3, r3, r2
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	440b      	add	r3, r1
 8002518:	333c      	adds	r3, #60	@ 0x3c
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d10a      	bne.n	8002536 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002520:	78fa      	ldrb	r2, [r7, #3]
 8002522:	6879      	ldr	r1, [r7, #4]
 8002524:	4613      	mov	r3, r2
 8002526:	011b      	lsls	r3, r3, #4
 8002528:	1a9b      	subs	r3, r3, r2
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	440b      	add	r3, r1
 800252e:	332a      	adds	r3, #42	@ 0x2a
 8002530:	2200      	movs	r2, #0
 8002532:	701a      	strb	r2, [r3, #0]
      break;
 8002534:	e018      	b.n	8002568 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002536:	78fa      	ldrb	r2, [r7, #3]
 8002538:	6879      	ldr	r1, [r7, #4]
 800253a:	4613      	mov	r3, r2
 800253c:	011b      	lsls	r3, r3, #4
 800253e:	1a9b      	subs	r3, r3, r2
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	440b      	add	r3, r1
 8002544:	332a      	adds	r3, #42	@ 0x2a
 8002546:	2202      	movs	r2, #2
 8002548:	701a      	strb	r2, [r3, #0]
      break;
 800254a:	e00d      	b.n	8002568 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800254c:	78fa      	ldrb	r2, [r7, #3]
 800254e:	6879      	ldr	r1, [r7, #4]
 8002550:	4613      	mov	r3, r2
 8002552:	011b      	lsls	r3, r3, #4
 8002554:	1a9b      	subs	r3, r3, r2
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	440b      	add	r3, r1
 800255a:	332a      	adds	r3, #42	@ 0x2a
 800255c:	2200      	movs	r2, #0
 800255e:	701a      	strb	r2, [r3, #0]
      break;
 8002560:	e002      	b.n	8002568 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8002562:	bf00      	nop
 8002564:	e000      	b.n	8002568 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8002566:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002568:	78fa      	ldrb	r2, [r7, #3]
 800256a:	6879      	ldr	r1, [r7, #4]
 800256c:	4613      	mov	r3, r2
 800256e:	011b      	lsls	r3, r3, #4
 8002570:	1a9b      	subs	r3, r3, r2
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	440b      	add	r3, r1
 8002576:	332c      	adds	r3, #44	@ 0x2c
 8002578:	697a      	ldr	r2, [r7, #20]
 800257a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800257c:	78fa      	ldrb	r2, [r7, #3]
 800257e:	8b39      	ldrh	r1, [r7, #24]
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	4613      	mov	r3, r2
 8002584:	011b      	lsls	r3, r3, #4
 8002586:	1a9b      	subs	r3, r3, r2
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	4403      	add	r3, r0
 800258c:	3334      	adds	r3, #52	@ 0x34
 800258e:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002590:	78fa      	ldrb	r2, [r7, #3]
 8002592:	6879      	ldr	r1, [r7, #4]
 8002594:	4613      	mov	r3, r2
 8002596:	011b      	lsls	r3, r3, #4
 8002598:	1a9b      	subs	r3, r3, r2
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	440b      	add	r3, r1
 800259e:	334c      	adds	r3, #76	@ 0x4c
 80025a0:	2200      	movs	r2, #0
 80025a2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80025a4:	78fa      	ldrb	r2, [r7, #3]
 80025a6:	6879      	ldr	r1, [r7, #4]
 80025a8:	4613      	mov	r3, r2
 80025aa:	011b      	lsls	r3, r3, #4
 80025ac:	1a9b      	subs	r3, r3, r2
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	440b      	add	r3, r1
 80025b2:	3338      	adds	r3, #56	@ 0x38
 80025b4:	2200      	movs	r2, #0
 80025b6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80025b8:	78fa      	ldrb	r2, [r7, #3]
 80025ba:	6879      	ldr	r1, [r7, #4]
 80025bc:	4613      	mov	r3, r2
 80025be:	011b      	lsls	r3, r3, #4
 80025c0:	1a9b      	subs	r3, r3, r2
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	440b      	add	r3, r1
 80025c6:	3315      	adds	r3, #21
 80025c8:	78fa      	ldrb	r2, [r7, #3]
 80025ca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80025cc:	78fa      	ldrb	r2, [r7, #3]
 80025ce:	6879      	ldr	r1, [r7, #4]
 80025d0:	4613      	mov	r3, r2
 80025d2:	011b      	lsls	r3, r3, #4
 80025d4:	1a9b      	subs	r3, r3, r2
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	440b      	add	r3, r1
 80025da:	334d      	adds	r3, #77	@ 0x4d
 80025dc:	2200      	movs	r2, #0
 80025de:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6818      	ldr	r0, [r3, #0]
 80025e4:	78fa      	ldrb	r2, [r7, #3]
 80025e6:	4613      	mov	r3, r2
 80025e8:	011b      	lsls	r3, r3, #4
 80025ea:	1a9b      	subs	r3, r3, r2
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	3310      	adds	r3, #16
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	4413      	add	r3, r2
 80025f4:	1d19      	adds	r1, r3, #4
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	799b      	ldrb	r3, [r3, #6]
 80025fa:	461a      	mov	r2, r3
 80025fc:	f004 fee2 	bl	80073c4 <USB_HC_StartXfer>
 8002600:	4603      	mov	r3, r0
}
 8002602:	4618      	mov	r0, r3
 8002604:	3708      	adds	r7, #8
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop

0800260c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b086      	sub	sp, #24
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4618      	mov	r0, r3
 8002624:	f004 fbd6 	bl	8006dd4 <USB_GetMode>
 8002628:	4603      	mov	r3, r0
 800262a:	2b01      	cmp	r3, #1
 800262c:	f040 80fb 	bne.w	8002826 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4618      	mov	r0, r3
 8002636:	f004 fb99 	bl	8006d6c <USB_ReadInterrupts>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	f000 80f1 	beq.w	8002824 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4618      	mov	r0, r3
 8002648:	f004 fb90 	bl	8006d6c <USB_ReadInterrupts>
 800264c:	4603      	mov	r3, r0
 800264e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002652:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002656:	d104      	bne.n	8002662 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8002660:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4618      	mov	r0, r3
 8002668:	f004 fb80 	bl	8006d6c <USB_ReadInterrupts>
 800266c:	4603      	mov	r3, r0
 800266e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002672:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002676:	d104      	bne.n	8002682 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002680:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4618      	mov	r0, r3
 8002688:	f004 fb70 	bl	8006d6c <USB_ReadInterrupts>
 800268c:	4603      	mov	r3, r0
 800268e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002692:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002696:	d104      	bne.n	80026a2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80026a0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4618      	mov	r0, r3
 80026a8:	f004 fb60 	bl	8006d6c <USB_ReadInterrupts>
 80026ac:	4603      	mov	r3, r0
 80026ae:	f003 0302 	and.w	r3, r3, #2
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d103      	bne.n	80026be <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	2202      	movs	r2, #2
 80026bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4618      	mov	r0, r3
 80026c4:	f004 fb52 	bl	8006d6c <USB_ReadInterrupts>
 80026c8:	4603      	mov	r3, r0
 80026ca:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80026ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80026d2:	d120      	bne.n	8002716 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80026dc:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0301 	and.w	r3, r3, #1
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d113      	bne.n	8002716 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80026ee:	2110      	movs	r1, #16
 80026f0:	6938      	ldr	r0, [r7, #16]
 80026f2:	f004 fa45 	bl	8006b80 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80026f6:	6938      	ldr	r0, [r7, #16]
 80026f8:	f004 fa74 	bl	8006be4 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	7a5b      	ldrb	r3, [r3, #9]
 8002700:	2b02      	cmp	r3, #2
 8002702:	d105      	bne.n	8002710 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	2101      	movs	r1, #1
 800270a:	4618      	mov	r0, r3
 800270c:	f004 fc66 	bl	8006fdc <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f007 fc2d 	bl	8009f70 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4618      	mov	r0, r3
 800271c:	f004 fb26 	bl	8006d6c <USB_ReadInterrupts>
 8002720:	4603      	mov	r3, r0
 8002722:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002726:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800272a:	d102      	bne.n	8002732 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	f001 fd4d 	bl	80041cc <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4618      	mov	r0, r3
 8002738:	f004 fb18 	bl	8006d6c <USB_ReadInterrupts>
 800273c:	4603      	mov	r3, r0
 800273e:	f003 0308 	and.w	r3, r3, #8
 8002742:	2b08      	cmp	r3, #8
 8002744:	d106      	bne.n	8002754 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f007 fbf6 	bl	8009f38 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	2208      	movs	r2, #8
 8002752:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4618      	mov	r0, r3
 800275a:	f004 fb07 	bl	8006d6c <USB_ReadInterrupts>
 800275e:	4603      	mov	r3, r0
 8002760:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002764:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002768:	d139      	bne.n	80027de <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4618      	mov	r0, r3
 8002770:	f005 f8a2 	bl	80078b8 <USB_HC_ReadInterrupt>
 8002774:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002776:	2300      	movs	r3, #0
 8002778:	617b      	str	r3, [r7, #20]
 800277a:	e025      	b.n	80027c8 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	f003 030f 	and.w	r3, r3, #15
 8002782:	68ba      	ldr	r2, [r7, #8]
 8002784:	fa22 f303 	lsr.w	r3, r2, r3
 8002788:	f003 0301 	and.w	r3, r3, #1
 800278c:	2b00      	cmp	r3, #0
 800278e:	d018      	beq.n	80027c2 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	015a      	lsls	r2, r3, #5
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	4413      	add	r3, r2
 8002798:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80027a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80027a6:	d106      	bne.n	80027b6 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	4619      	mov	r1, r3
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f000 f905 	bl	80029be <HCD_HC_IN_IRQHandler>
 80027b4:	e005      	b.n	80027c2 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	4619      	mov	r1, r3
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	f000 ff67 	bl	8003690 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	3301      	adds	r3, #1
 80027c6:	617b      	str	r3, [r7, #20]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	795b      	ldrb	r3, [r3, #5]
 80027cc:	461a      	mov	r2, r3
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d3d3      	bcc.n	800277c <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80027dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4618      	mov	r0, r3
 80027e4:	f004 fac2 	bl	8006d6c <USB_ReadInterrupts>
 80027e8:	4603      	mov	r3, r0
 80027ea:	f003 0310 	and.w	r3, r3, #16
 80027ee:	2b10      	cmp	r3, #16
 80027f0:	d101      	bne.n	80027f6 <HAL_HCD_IRQHandler+0x1ea>
 80027f2:	2301      	movs	r3, #1
 80027f4:	e000      	b.n	80027f8 <HAL_HCD_IRQHandler+0x1ec>
 80027f6:	2300      	movs	r3, #0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d014      	beq.n	8002826 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	699a      	ldr	r2, [r3, #24]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f022 0210 	bic.w	r2, r2, #16
 800280a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	f001 fbfe 	bl	800400e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	699a      	ldr	r2, [r3, #24]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f042 0210 	orr.w	r2, r2, #16
 8002820:	619a      	str	r2, [r3, #24]
 8002822:	e000      	b.n	8002826 <HAL_HCD_IRQHandler+0x21a>
      return;
 8002824:	bf00      	nop
    }
  }
}
 8002826:	3718      	adds	r7, #24
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}

0800282c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800283a:	2b01      	cmp	r3, #1
 800283c:	d101      	bne.n	8002842 <HAL_HCD_Start+0x16>
 800283e:	2302      	movs	r3, #2
 8002840:	e013      	b.n	800286a <HAL_HCD_Start+0x3e>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2201      	movs	r2, #1
 8002846:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	2101      	movs	r1, #1
 8002850:	4618      	mov	r0, r3
 8002852:	f004 fc2a 	bl	80070aa <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4618      	mov	r0, r3
 800285c:	f004 f922 	bl	8006aa4 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2200      	movs	r2, #0
 8002864:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8002868:	2300      	movs	r3, #0
}
 800286a:	4618      	mov	r0, r3
 800286c:	3708      	adds	r7, #8
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}

08002872 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002872:	b580      	push	{r7, lr}
 8002874:	b082      	sub	sp, #8
 8002876:	af00      	add	r7, sp, #0
 8002878:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002880:	2b01      	cmp	r3, #1
 8002882:	d101      	bne.n	8002888 <HAL_HCD_Stop+0x16>
 8002884:	2302      	movs	r3, #2
 8002886:	e00d      	b.n	80028a4 <HAL_HCD_Stop+0x32>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2201      	movs	r2, #1
 800288c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4618      	mov	r0, r3
 8002896:	f005 f97d 	bl	8007b94 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2200      	movs	r2, #0
 800289e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80028a2:	2300      	movs	r3, #0
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3708      	adds	r7, #8
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}

080028ac <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b082      	sub	sp, #8
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4618      	mov	r0, r3
 80028ba:	f004 fbcc 	bl	8007056 <USB_ResetPort>
 80028be:	4603      	mov	r3, r0
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3708      	adds	r7, #8
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}

080028c8 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b083      	sub	sp, #12
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
 80028d0:	460b      	mov	r3, r1
 80028d2:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80028d4:	78fa      	ldrb	r2, [r7, #3]
 80028d6:	6879      	ldr	r1, [r7, #4]
 80028d8:	4613      	mov	r3, r2
 80028da:	011b      	lsls	r3, r3, #4
 80028dc:	1a9b      	subs	r3, r3, r2
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	440b      	add	r3, r1
 80028e2:	334c      	adds	r3, #76	@ 0x4c
 80028e4:	781b      	ldrb	r3, [r3, #0]
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	370c      	adds	r7, #12
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr

080028f2 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 80028f2:	b480      	push	{r7}
 80028f4:	b083      	sub	sp, #12
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	6078      	str	r0, [r7, #4]
 80028fa:	460b      	mov	r3, r1
 80028fc:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80028fe:	78fa      	ldrb	r2, [r7, #3]
 8002900:	6879      	ldr	r1, [r7, #4]
 8002902:	4613      	mov	r3, r2
 8002904:	011b      	lsls	r3, r3, #4
 8002906:	1a9b      	subs	r3, r3, r2
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	440b      	add	r3, r1
 800290c:	3338      	adds	r3, #56	@ 0x38
 800290e:	681b      	ldr	r3, [r3, #0]
}
 8002910:	4618      	mov	r0, r3
 8002912:	370c      	adds	r7, #12
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr

0800291c <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4618      	mov	r0, r3
 800292a:	f004 fc0e 	bl	800714a <USB_GetCurrentFrame>
 800292e:	4603      	mov	r3, r0
}
 8002930:	4618      	mov	r0, r3
 8002932:	3708      	adds	r7, #8
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}

08002938 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4618      	mov	r0, r3
 8002946:	f004 fbe9 	bl	800711c <USB_GetHostSpeed>
 800294a:	4603      	mov	r3, r0
}
 800294c:	4618      	mov	r0, r3
 800294e:	3708      	adds	r7, #8
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}

08002954 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	460b      	mov	r3, r1
 800295e:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8002960:	78fa      	ldrb	r2, [r7, #3]
 8002962:	6879      	ldr	r1, [r7, #4]
 8002964:	4613      	mov	r3, r2
 8002966:	011b      	lsls	r3, r3, #4
 8002968:	1a9b      	subs	r3, r3, r2
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	440b      	add	r3, r1
 800296e:	331a      	adds	r3, #26
 8002970:	2200      	movs	r2, #0
 8002972:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8002974:	78fa      	ldrb	r2, [r7, #3]
 8002976:	6879      	ldr	r1, [r7, #4]
 8002978:	4613      	mov	r3, r2
 800297a:	011b      	lsls	r3, r3, #4
 800297c:	1a9b      	subs	r3, r3, r2
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	440b      	add	r3, r1
 8002982:	331b      	adds	r3, #27
 8002984:	2200      	movs	r2, #0
 8002986:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8002988:	78fa      	ldrb	r2, [r7, #3]
 800298a:	6879      	ldr	r1, [r7, #4]
 800298c:	4613      	mov	r3, r2
 800298e:	011b      	lsls	r3, r3, #4
 8002990:	1a9b      	subs	r3, r3, r2
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	440b      	add	r3, r1
 8002996:	3325      	adds	r3, #37	@ 0x25
 8002998:	2200      	movs	r2, #0
 800299a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 800299c:	78fa      	ldrb	r2, [r7, #3]
 800299e:	6879      	ldr	r1, [r7, #4]
 80029a0:	4613      	mov	r3, r2
 80029a2:	011b      	lsls	r3, r3, #4
 80029a4:	1a9b      	subs	r3, r3, r2
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	440b      	add	r3, r1
 80029aa:	3324      	adds	r3, #36	@ 0x24
 80029ac:	2200      	movs	r2, #0
 80029ae:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 80029b0:	2300      	movs	r3, #0
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	370c      	adds	r7, #12
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr

080029be <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80029be:	b580      	push	{r7, lr}
 80029c0:	b086      	sub	sp, #24
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	6078      	str	r0, [r7, #4]
 80029c6:	460b      	mov	r3, r1
 80029c8:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	78fa      	ldrb	r2, [r7, #3]
 80029da:	4611      	mov	r1, r2
 80029dc:	4618      	mov	r0, r3
 80029de:	f004 f9d8 	bl	8006d92 <USB_ReadChInterrupts>
 80029e2:	4603      	mov	r3, r0
 80029e4:	f003 0304 	and.w	r3, r3, #4
 80029e8:	2b04      	cmp	r3, #4
 80029ea:	d11a      	bne.n	8002a22 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80029ec:	78fb      	ldrb	r3, [r7, #3]
 80029ee:	015a      	lsls	r2, r3, #5
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	4413      	add	r3, r2
 80029f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029f8:	461a      	mov	r2, r3
 80029fa:	2304      	movs	r3, #4
 80029fc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80029fe:	78fa      	ldrb	r2, [r7, #3]
 8002a00:	6879      	ldr	r1, [r7, #4]
 8002a02:	4613      	mov	r3, r2
 8002a04:	011b      	lsls	r3, r3, #4
 8002a06:	1a9b      	subs	r3, r3, r2
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	440b      	add	r3, r1
 8002a0c:	334d      	adds	r3, #77	@ 0x4d
 8002a0e:	2207      	movs	r2, #7
 8002a10:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	78fa      	ldrb	r2, [r7, #3]
 8002a18:	4611      	mov	r1, r2
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f004 ff5d 	bl	80078da <USB_HC_Halt>
 8002a20:	e09e      	b.n	8002b60 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	78fa      	ldrb	r2, [r7, #3]
 8002a28:	4611      	mov	r1, r2
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f004 f9b1 	bl	8006d92 <USB_ReadChInterrupts>
 8002a30:	4603      	mov	r3, r0
 8002a32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a36:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a3a:	d11b      	bne.n	8002a74 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8002a3c:	78fb      	ldrb	r3, [r7, #3]
 8002a3e:	015a      	lsls	r2, r3, #5
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	4413      	add	r3, r2
 8002a44:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a48:	461a      	mov	r2, r3
 8002a4a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002a4e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8002a50:	78fa      	ldrb	r2, [r7, #3]
 8002a52:	6879      	ldr	r1, [r7, #4]
 8002a54:	4613      	mov	r3, r2
 8002a56:	011b      	lsls	r3, r3, #4
 8002a58:	1a9b      	subs	r3, r3, r2
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	440b      	add	r3, r1
 8002a5e:	334d      	adds	r3, #77	@ 0x4d
 8002a60:	2208      	movs	r2, #8
 8002a62:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	78fa      	ldrb	r2, [r7, #3]
 8002a6a:	4611      	mov	r1, r2
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f004 ff34 	bl	80078da <USB_HC_Halt>
 8002a72:	e075      	b.n	8002b60 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	78fa      	ldrb	r2, [r7, #3]
 8002a7a:	4611      	mov	r1, r2
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f004 f988 	bl	8006d92 <USB_ReadChInterrupts>
 8002a82:	4603      	mov	r3, r0
 8002a84:	f003 0308 	and.w	r3, r3, #8
 8002a88:	2b08      	cmp	r3, #8
 8002a8a:	d11a      	bne.n	8002ac2 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002a8c:	78fb      	ldrb	r3, [r7, #3]
 8002a8e:	015a      	lsls	r2, r3, #5
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	4413      	add	r3, r2
 8002a94:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a98:	461a      	mov	r2, r3
 8002a9a:	2308      	movs	r3, #8
 8002a9c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002a9e:	78fa      	ldrb	r2, [r7, #3]
 8002aa0:	6879      	ldr	r1, [r7, #4]
 8002aa2:	4613      	mov	r3, r2
 8002aa4:	011b      	lsls	r3, r3, #4
 8002aa6:	1a9b      	subs	r3, r3, r2
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	440b      	add	r3, r1
 8002aac:	334d      	adds	r3, #77	@ 0x4d
 8002aae:	2206      	movs	r2, #6
 8002ab0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	78fa      	ldrb	r2, [r7, #3]
 8002ab8:	4611      	mov	r1, r2
 8002aba:	4618      	mov	r0, r3
 8002abc:	f004 ff0d 	bl	80078da <USB_HC_Halt>
 8002ac0:	e04e      	b.n	8002b60 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	78fa      	ldrb	r2, [r7, #3]
 8002ac8:	4611      	mov	r1, r2
 8002aca:	4618      	mov	r0, r3
 8002acc:	f004 f961 	bl	8006d92 <USB_ReadChInterrupts>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ad6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ada:	d11b      	bne.n	8002b14 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002adc:	78fb      	ldrb	r3, [r7, #3]
 8002ade:	015a      	lsls	r2, r3, #5
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	4413      	add	r3, r2
 8002ae4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ae8:	461a      	mov	r2, r3
 8002aea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002aee:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002af0:	78fa      	ldrb	r2, [r7, #3]
 8002af2:	6879      	ldr	r1, [r7, #4]
 8002af4:	4613      	mov	r3, r2
 8002af6:	011b      	lsls	r3, r3, #4
 8002af8:	1a9b      	subs	r3, r3, r2
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	440b      	add	r3, r1
 8002afe:	334d      	adds	r3, #77	@ 0x4d
 8002b00:	2209      	movs	r2, #9
 8002b02:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	78fa      	ldrb	r2, [r7, #3]
 8002b0a:	4611      	mov	r1, r2
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f004 fee4 	bl	80078da <USB_HC_Halt>
 8002b12:	e025      	b.n	8002b60 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	78fa      	ldrb	r2, [r7, #3]
 8002b1a:	4611      	mov	r1, r2
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f004 f938 	bl	8006d92 <USB_ReadChInterrupts>
 8002b22:	4603      	mov	r3, r0
 8002b24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b28:	2b80      	cmp	r3, #128	@ 0x80
 8002b2a:	d119      	bne.n	8002b60 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002b2c:	78fb      	ldrb	r3, [r7, #3]
 8002b2e:	015a      	lsls	r2, r3, #5
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	4413      	add	r3, r2
 8002b34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b38:	461a      	mov	r2, r3
 8002b3a:	2380      	movs	r3, #128	@ 0x80
 8002b3c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002b3e:	78fa      	ldrb	r2, [r7, #3]
 8002b40:	6879      	ldr	r1, [r7, #4]
 8002b42:	4613      	mov	r3, r2
 8002b44:	011b      	lsls	r3, r3, #4
 8002b46:	1a9b      	subs	r3, r3, r2
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	440b      	add	r3, r1
 8002b4c:	334d      	adds	r3, #77	@ 0x4d
 8002b4e:	2207      	movs	r2, #7
 8002b50:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	78fa      	ldrb	r2, [r7, #3]
 8002b58:	4611      	mov	r1, r2
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f004 febd 	bl	80078da <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	78fa      	ldrb	r2, [r7, #3]
 8002b66:	4611      	mov	r1, r2
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f004 f912 	bl	8006d92 <USB_ReadChInterrupts>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002b78:	d112      	bne.n	8002ba0 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	78fa      	ldrb	r2, [r7, #3]
 8002b80:	4611      	mov	r1, r2
 8002b82:	4618      	mov	r0, r3
 8002b84:	f004 fea9 	bl	80078da <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002b88:	78fb      	ldrb	r3, [r7, #3]
 8002b8a:	015a      	lsls	r2, r3, #5
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	4413      	add	r3, r2
 8002b90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b94:	461a      	mov	r2, r3
 8002b96:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002b9a:	6093      	str	r3, [r2, #8]
 8002b9c:	f000 bd75 	b.w	800368a <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	78fa      	ldrb	r2, [r7, #3]
 8002ba6:	4611      	mov	r1, r2
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f004 f8f2 	bl	8006d92 <USB_ReadChInterrupts>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	f003 0301 	and.w	r3, r3, #1
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	f040 8128 	bne.w	8002e0a <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002bba:	78fb      	ldrb	r3, [r7, #3]
 8002bbc:	015a      	lsls	r2, r3, #5
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	4413      	add	r3, r2
 8002bc2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	2320      	movs	r3, #32
 8002bca:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002bcc:	78fa      	ldrb	r2, [r7, #3]
 8002bce:	6879      	ldr	r1, [r7, #4]
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	011b      	lsls	r3, r3, #4
 8002bd4:	1a9b      	subs	r3, r3, r2
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	440b      	add	r3, r1
 8002bda:	331b      	adds	r3, #27
 8002bdc:	781b      	ldrb	r3, [r3, #0]
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d119      	bne.n	8002c16 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002be2:	78fa      	ldrb	r2, [r7, #3]
 8002be4:	6879      	ldr	r1, [r7, #4]
 8002be6:	4613      	mov	r3, r2
 8002be8:	011b      	lsls	r3, r3, #4
 8002bea:	1a9b      	subs	r3, r3, r2
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	440b      	add	r3, r1
 8002bf0:	331b      	adds	r3, #27
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002bf6:	78fb      	ldrb	r3, [r7, #3]
 8002bf8:	015a      	lsls	r2, r3, #5
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	4413      	add	r3, r2
 8002bfe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	78fa      	ldrb	r2, [r7, #3]
 8002c06:	0151      	lsls	r1, r2, #5
 8002c08:	693a      	ldr	r2, [r7, #16]
 8002c0a:	440a      	add	r2, r1
 8002c0c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002c10:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c14:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	799b      	ldrb	r3, [r3, #6]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d01b      	beq.n	8002c56 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002c1e:	78fa      	ldrb	r2, [r7, #3]
 8002c20:	6879      	ldr	r1, [r7, #4]
 8002c22:	4613      	mov	r3, r2
 8002c24:	011b      	lsls	r3, r3, #4
 8002c26:	1a9b      	subs	r3, r3, r2
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	440b      	add	r3, r1
 8002c2c:	3330      	adds	r3, #48	@ 0x30
 8002c2e:	6819      	ldr	r1, [r3, #0]
 8002c30:	78fb      	ldrb	r3, [r7, #3]
 8002c32:	015a      	lsls	r2, r3, #5
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	4413      	add	r3, r2
 8002c38:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c3c:	691b      	ldr	r3, [r3, #16]
 8002c3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c42:	78fa      	ldrb	r2, [r7, #3]
 8002c44:	1ac9      	subs	r1, r1, r3
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	4613      	mov	r3, r2
 8002c4a:	011b      	lsls	r3, r3, #4
 8002c4c:	1a9b      	subs	r3, r3, r2
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	4403      	add	r3, r0
 8002c52:	3338      	adds	r3, #56	@ 0x38
 8002c54:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8002c56:	78fa      	ldrb	r2, [r7, #3]
 8002c58:	6879      	ldr	r1, [r7, #4]
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	011b      	lsls	r3, r3, #4
 8002c5e:	1a9b      	subs	r3, r3, r2
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	440b      	add	r3, r1
 8002c64:	334d      	adds	r3, #77	@ 0x4d
 8002c66:	2201      	movs	r2, #1
 8002c68:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8002c6a:	78fa      	ldrb	r2, [r7, #3]
 8002c6c:	6879      	ldr	r1, [r7, #4]
 8002c6e:	4613      	mov	r3, r2
 8002c70:	011b      	lsls	r3, r3, #4
 8002c72:	1a9b      	subs	r3, r3, r2
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	440b      	add	r3, r1
 8002c78:	3344      	adds	r3, #68	@ 0x44
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002c7e:	78fb      	ldrb	r3, [r7, #3]
 8002c80:	015a      	lsls	r2, r3, #5
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	4413      	add	r3, r2
 8002c86:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002c90:	78fa      	ldrb	r2, [r7, #3]
 8002c92:	6879      	ldr	r1, [r7, #4]
 8002c94:	4613      	mov	r3, r2
 8002c96:	011b      	lsls	r3, r3, #4
 8002c98:	1a9b      	subs	r3, r3, r2
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	440b      	add	r3, r1
 8002c9e:	3326      	adds	r3, #38	@ 0x26
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d00a      	beq.n	8002cbc <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002ca6:	78fa      	ldrb	r2, [r7, #3]
 8002ca8:	6879      	ldr	r1, [r7, #4]
 8002caa:	4613      	mov	r3, r2
 8002cac:	011b      	lsls	r3, r3, #4
 8002cae:	1a9b      	subs	r3, r3, r2
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	440b      	add	r3, r1
 8002cb4:	3326      	adds	r3, #38	@ 0x26
 8002cb6:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	d110      	bne.n	8002cde <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	78fa      	ldrb	r2, [r7, #3]
 8002cc2:	4611      	mov	r1, r2
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f004 fe08 	bl	80078da <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002cca:	78fb      	ldrb	r3, [r7, #3]
 8002ccc:	015a      	lsls	r2, r3, #5
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	4413      	add	r3, r2
 8002cd2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	2310      	movs	r3, #16
 8002cda:	6093      	str	r3, [r2, #8]
 8002cdc:	e03d      	b.n	8002d5a <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002cde:	78fa      	ldrb	r2, [r7, #3]
 8002ce0:	6879      	ldr	r1, [r7, #4]
 8002ce2:	4613      	mov	r3, r2
 8002ce4:	011b      	lsls	r3, r3, #4
 8002ce6:	1a9b      	subs	r3, r3, r2
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	440b      	add	r3, r1
 8002cec:	3326      	adds	r3, #38	@ 0x26
 8002cee:	781b      	ldrb	r3, [r3, #0]
 8002cf0:	2b03      	cmp	r3, #3
 8002cf2:	d00a      	beq.n	8002d0a <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8002cf4:	78fa      	ldrb	r2, [r7, #3]
 8002cf6:	6879      	ldr	r1, [r7, #4]
 8002cf8:	4613      	mov	r3, r2
 8002cfa:	011b      	lsls	r3, r3, #4
 8002cfc:	1a9b      	subs	r3, r3, r2
 8002cfe:	009b      	lsls	r3, r3, #2
 8002d00:	440b      	add	r3, r1
 8002d02:	3326      	adds	r3, #38	@ 0x26
 8002d04:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d127      	bne.n	8002d5a <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002d0a:	78fb      	ldrb	r3, [r7, #3]
 8002d0c:	015a      	lsls	r2, r3, #5
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	4413      	add	r3, r2
 8002d12:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	78fa      	ldrb	r2, [r7, #3]
 8002d1a:	0151      	lsls	r1, r2, #5
 8002d1c:	693a      	ldr	r2, [r7, #16]
 8002d1e:	440a      	add	r2, r1
 8002d20:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002d24:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002d28:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002d2a:	78fa      	ldrb	r2, [r7, #3]
 8002d2c:	6879      	ldr	r1, [r7, #4]
 8002d2e:	4613      	mov	r3, r2
 8002d30:	011b      	lsls	r3, r3, #4
 8002d32:	1a9b      	subs	r3, r3, r2
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	440b      	add	r3, r1
 8002d38:	334c      	adds	r3, #76	@ 0x4c
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002d3e:	78fa      	ldrb	r2, [r7, #3]
 8002d40:	6879      	ldr	r1, [r7, #4]
 8002d42:	4613      	mov	r3, r2
 8002d44:	011b      	lsls	r3, r3, #4
 8002d46:	1a9b      	subs	r3, r3, r2
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	440b      	add	r3, r1
 8002d4c:	334c      	adds	r3, #76	@ 0x4c
 8002d4e:	781a      	ldrb	r2, [r3, #0]
 8002d50:	78fb      	ldrb	r3, [r7, #3]
 8002d52:	4619      	mov	r1, r3
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	f007 f919 	bl	8009f8c <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	799b      	ldrb	r3, [r3, #6]
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d13b      	bne.n	8002dda <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8002d62:	78fa      	ldrb	r2, [r7, #3]
 8002d64:	6879      	ldr	r1, [r7, #4]
 8002d66:	4613      	mov	r3, r2
 8002d68:	011b      	lsls	r3, r3, #4
 8002d6a:	1a9b      	subs	r3, r3, r2
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	440b      	add	r3, r1
 8002d70:	3338      	adds	r3, #56	@ 0x38
 8002d72:	6819      	ldr	r1, [r3, #0]
 8002d74:	78fa      	ldrb	r2, [r7, #3]
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	4613      	mov	r3, r2
 8002d7a:	011b      	lsls	r3, r3, #4
 8002d7c:	1a9b      	subs	r3, r3, r2
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	4403      	add	r3, r0
 8002d82:	3328      	adds	r3, #40	@ 0x28
 8002d84:	881b      	ldrh	r3, [r3, #0]
 8002d86:	440b      	add	r3, r1
 8002d88:	1e59      	subs	r1, r3, #1
 8002d8a:	78fa      	ldrb	r2, [r7, #3]
 8002d8c:	6878      	ldr	r0, [r7, #4]
 8002d8e:	4613      	mov	r3, r2
 8002d90:	011b      	lsls	r3, r3, #4
 8002d92:	1a9b      	subs	r3, r3, r2
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	4403      	add	r3, r0
 8002d98:	3328      	adds	r3, #40	@ 0x28
 8002d9a:	881b      	ldrh	r3, [r3, #0]
 8002d9c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002da0:	f003 0301 	and.w	r3, r3, #1
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	f000 8470 	beq.w	800368a <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8002daa:	78fa      	ldrb	r2, [r7, #3]
 8002dac:	6879      	ldr	r1, [r7, #4]
 8002dae:	4613      	mov	r3, r2
 8002db0:	011b      	lsls	r3, r3, #4
 8002db2:	1a9b      	subs	r3, r3, r2
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	440b      	add	r3, r1
 8002db8:	333c      	adds	r3, #60	@ 0x3c
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	78fa      	ldrb	r2, [r7, #3]
 8002dbe:	f083 0301 	eor.w	r3, r3, #1
 8002dc2:	b2d8      	uxtb	r0, r3
 8002dc4:	6879      	ldr	r1, [r7, #4]
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	011b      	lsls	r3, r3, #4
 8002dca:	1a9b      	subs	r3, r3, r2
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	440b      	add	r3, r1
 8002dd0:	333c      	adds	r3, #60	@ 0x3c
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	701a      	strb	r2, [r3, #0]
 8002dd6:	f000 bc58 	b.w	800368a <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8002dda:	78fa      	ldrb	r2, [r7, #3]
 8002ddc:	6879      	ldr	r1, [r7, #4]
 8002dde:	4613      	mov	r3, r2
 8002de0:	011b      	lsls	r3, r3, #4
 8002de2:	1a9b      	subs	r3, r3, r2
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	440b      	add	r3, r1
 8002de8:	333c      	adds	r3, #60	@ 0x3c
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	78fa      	ldrb	r2, [r7, #3]
 8002dee:	f083 0301 	eor.w	r3, r3, #1
 8002df2:	b2d8      	uxtb	r0, r3
 8002df4:	6879      	ldr	r1, [r7, #4]
 8002df6:	4613      	mov	r3, r2
 8002df8:	011b      	lsls	r3, r3, #4
 8002dfa:	1a9b      	subs	r3, r3, r2
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	440b      	add	r3, r1
 8002e00:	333c      	adds	r3, #60	@ 0x3c
 8002e02:	4602      	mov	r2, r0
 8002e04:	701a      	strb	r2, [r3, #0]
 8002e06:	f000 bc40 	b.w	800368a <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	78fa      	ldrb	r2, [r7, #3]
 8002e10:	4611      	mov	r1, r2
 8002e12:	4618      	mov	r0, r3
 8002e14:	f003 ffbd 	bl	8006d92 <USB_ReadChInterrupts>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	f003 0320 	and.w	r3, r3, #32
 8002e1e:	2b20      	cmp	r3, #32
 8002e20:	d131      	bne.n	8002e86 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002e22:	78fb      	ldrb	r3, [r7, #3]
 8002e24:	015a      	lsls	r2, r3, #5
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	4413      	add	r3, r2
 8002e2a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e2e:	461a      	mov	r2, r3
 8002e30:	2320      	movs	r3, #32
 8002e32:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8002e34:	78fa      	ldrb	r2, [r7, #3]
 8002e36:	6879      	ldr	r1, [r7, #4]
 8002e38:	4613      	mov	r3, r2
 8002e3a:	011b      	lsls	r3, r3, #4
 8002e3c:	1a9b      	subs	r3, r3, r2
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	440b      	add	r3, r1
 8002e42:	331a      	adds	r3, #26
 8002e44:	781b      	ldrb	r3, [r3, #0]
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	f040 841f 	bne.w	800368a <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8002e4c:	78fa      	ldrb	r2, [r7, #3]
 8002e4e:	6879      	ldr	r1, [r7, #4]
 8002e50:	4613      	mov	r3, r2
 8002e52:	011b      	lsls	r3, r3, #4
 8002e54:	1a9b      	subs	r3, r3, r2
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	440b      	add	r3, r1
 8002e5a:	331b      	adds	r3, #27
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002e60:	78fa      	ldrb	r2, [r7, #3]
 8002e62:	6879      	ldr	r1, [r7, #4]
 8002e64:	4613      	mov	r3, r2
 8002e66:	011b      	lsls	r3, r3, #4
 8002e68:	1a9b      	subs	r3, r3, r2
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	440b      	add	r3, r1
 8002e6e:	334d      	adds	r3, #77	@ 0x4d
 8002e70:	2203      	movs	r2, #3
 8002e72:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	78fa      	ldrb	r2, [r7, #3]
 8002e7a:	4611      	mov	r1, r2
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f004 fd2c 	bl	80078da <USB_HC_Halt>
 8002e82:	f000 bc02 	b.w	800368a <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	78fa      	ldrb	r2, [r7, #3]
 8002e8c:	4611      	mov	r1, r2
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f003 ff7f 	bl	8006d92 <USB_ReadChInterrupts>
 8002e94:	4603      	mov	r3, r0
 8002e96:	f003 0302 	and.w	r3, r3, #2
 8002e9a:	2b02      	cmp	r3, #2
 8002e9c:	f040 8305 	bne.w	80034aa <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002ea0:	78fb      	ldrb	r3, [r7, #3]
 8002ea2:	015a      	lsls	r2, r3, #5
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	4413      	add	r3, r2
 8002ea8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002eac:	461a      	mov	r2, r3
 8002eae:	2302      	movs	r3, #2
 8002eb0:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8002eb2:	78fa      	ldrb	r2, [r7, #3]
 8002eb4:	6879      	ldr	r1, [r7, #4]
 8002eb6:	4613      	mov	r3, r2
 8002eb8:	011b      	lsls	r3, r3, #4
 8002eba:	1a9b      	subs	r3, r3, r2
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	440b      	add	r3, r1
 8002ec0:	334d      	adds	r3, #77	@ 0x4d
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d114      	bne.n	8002ef2 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002ec8:	78fa      	ldrb	r2, [r7, #3]
 8002eca:	6879      	ldr	r1, [r7, #4]
 8002ecc:	4613      	mov	r3, r2
 8002ece:	011b      	lsls	r3, r3, #4
 8002ed0:	1a9b      	subs	r3, r3, r2
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	440b      	add	r3, r1
 8002ed6:	334d      	adds	r3, #77	@ 0x4d
 8002ed8:	2202      	movs	r2, #2
 8002eda:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002edc:	78fa      	ldrb	r2, [r7, #3]
 8002ede:	6879      	ldr	r1, [r7, #4]
 8002ee0:	4613      	mov	r3, r2
 8002ee2:	011b      	lsls	r3, r3, #4
 8002ee4:	1a9b      	subs	r3, r3, r2
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	440b      	add	r3, r1
 8002eea:	334c      	adds	r3, #76	@ 0x4c
 8002eec:	2201      	movs	r2, #1
 8002eee:	701a      	strb	r2, [r3, #0]
 8002ef0:	e2cc      	b.n	800348c <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8002ef2:	78fa      	ldrb	r2, [r7, #3]
 8002ef4:	6879      	ldr	r1, [r7, #4]
 8002ef6:	4613      	mov	r3, r2
 8002ef8:	011b      	lsls	r3, r3, #4
 8002efa:	1a9b      	subs	r3, r3, r2
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	440b      	add	r3, r1
 8002f00:	334d      	adds	r3, #77	@ 0x4d
 8002f02:	781b      	ldrb	r3, [r3, #0]
 8002f04:	2b06      	cmp	r3, #6
 8002f06:	d114      	bne.n	8002f32 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002f08:	78fa      	ldrb	r2, [r7, #3]
 8002f0a:	6879      	ldr	r1, [r7, #4]
 8002f0c:	4613      	mov	r3, r2
 8002f0e:	011b      	lsls	r3, r3, #4
 8002f10:	1a9b      	subs	r3, r3, r2
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	440b      	add	r3, r1
 8002f16:	334d      	adds	r3, #77	@ 0x4d
 8002f18:	2202      	movs	r2, #2
 8002f1a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8002f1c:	78fa      	ldrb	r2, [r7, #3]
 8002f1e:	6879      	ldr	r1, [r7, #4]
 8002f20:	4613      	mov	r3, r2
 8002f22:	011b      	lsls	r3, r3, #4
 8002f24:	1a9b      	subs	r3, r3, r2
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	440b      	add	r3, r1
 8002f2a:	334c      	adds	r3, #76	@ 0x4c
 8002f2c:	2205      	movs	r2, #5
 8002f2e:	701a      	strb	r2, [r3, #0]
 8002f30:	e2ac      	b.n	800348c <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002f32:	78fa      	ldrb	r2, [r7, #3]
 8002f34:	6879      	ldr	r1, [r7, #4]
 8002f36:	4613      	mov	r3, r2
 8002f38:	011b      	lsls	r3, r3, #4
 8002f3a:	1a9b      	subs	r3, r3, r2
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	440b      	add	r3, r1
 8002f40:	334d      	adds	r3, #77	@ 0x4d
 8002f42:	781b      	ldrb	r3, [r3, #0]
 8002f44:	2b07      	cmp	r3, #7
 8002f46:	d00b      	beq.n	8002f60 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002f48:	78fa      	ldrb	r2, [r7, #3]
 8002f4a:	6879      	ldr	r1, [r7, #4]
 8002f4c:	4613      	mov	r3, r2
 8002f4e:	011b      	lsls	r3, r3, #4
 8002f50:	1a9b      	subs	r3, r3, r2
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	440b      	add	r3, r1
 8002f56:	334d      	adds	r3, #77	@ 0x4d
 8002f58:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002f5a:	2b09      	cmp	r3, #9
 8002f5c:	f040 80a6 	bne.w	80030ac <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002f60:	78fa      	ldrb	r2, [r7, #3]
 8002f62:	6879      	ldr	r1, [r7, #4]
 8002f64:	4613      	mov	r3, r2
 8002f66:	011b      	lsls	r3, r3, #4
 8002f68:	1a9b      	subs	r3, r3, r2
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	440b      	add	r3, r1
 8002f6e:	334d      	adds	r3, #77	@ 0x4d
 8002f70:	2202      	movs	r2, #2
 8002f72:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002f74:	78fa      	ldrb	r2, [r7, #3]
 8002f76:	6879      	ldr	r1, [r7, #4]
 8002f78:	4613      	mov	r3, r2
 8002f7a:	011b      	lsls	r3, r3, #4
 8002f7c:	1a9b      	subs	r3, r3, r2
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	440b      	add	r3, r1
 8002f82:	3344      	adds	r3, #68	@ 0x44
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	1c59      	adds	r1, r3, #1
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	4613      	mov	r3, r2
 8002f8c:	011b      	lsls	r3, r3, #4
 8002f8e:	1a9b      	subs	r3, r3, r2
 8002f90:	009b      	lsls	r3, r3, #2
 8002f92:	4403      	add	r3, r0
 8002f94:	3344      	adds	r3, #68	@ 0x44
 8002f96:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002f98:	78fa      	ldrb	r2, [r7, #3]
 8002f9a:	6879      	ldr	r1, [r7, #4]
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	011b      	lsls	r3, r3, #4
 8002fa0:	1a9b      	subs	r3, r3, r2
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	440b      	add	r3, r1
 8002fa6:	3344      	adds	r3, #68	@ 0x44
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d943      	bls.n	8003036 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002fae:	78fa      	ldrb	r2, [r7, #3]
 8002fb0:	6879      	ldr	r1, [r7, #4]
 8002fb2:	4613      	mov	r3, r2
 8002fb4:	011b      	lsls	r3, r3, #4
 8002fb6:	1a9b      	subs	r3, r3, r2
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	440b      	add	r3, r1
 8002fbc:	3344      	adds	r3, #68	@ 0x44
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8002fc2:	78fa      	ldrb	r2, [r7, #3]
 8002fc4:	6879      	ldr	r1, [r7, #4]
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	011b      	lsls	r3, r3, #4
 8002fca:	1a9b      	subs	r3, r3, r2
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	440b      	add	r3, r1
 8002fd0:	331a      	adds	r3, #26
 8002fd2:	781b      	ldrb	r3, [r3, #0]
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d123      	bne.n	8003020 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8002fd8:	78fa      	ldrb	r2, [r7, #3]
 8002fda:	6879      	ldr	r1, [r7, #4]
 8002fdc:	4613      	mov	r3, r2
 8002fde:	011b      	lsls	r3, r3, #4
 8002fe0:	1a9b      	subs	r3, r3, r2
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	440b      	add	r3, r1
 8002fe6:	331b      	adds	r3, #27
 8002fe8:	2200      	movs	r2, #0
 8002fea:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8002fec:	78fa      	ldrb	r2, [r7, #3]
 8002fee:	6879      	ldr	r1, [r7, #4]
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	011b      	lsls	r3, r3, #4
 8002ff4:	1a9b      	subs	r3, r3, r2
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	440b      	add	r3, r1
 8002ffa:	331c      	adds	r3, #28
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003000:	78fb      	ldrb	r3, [r7, #3]
 8003002:	015a      	lsls	r2, r3, #5
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	4413      	add	r3, r2
 8003008:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	78fa      	ldrb	r2, [r7, #3]
 8003010:	0151      	lsls	r1, r2, #5
 8003012:	693a      	ldr	r2, [r7, #16]
 8003014:	440a      	add	r2, r1
 8003016:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800301a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800301e:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003020:	78fa      	ldrb	r2, [r7, #3]
 8003022:	6879      	ldr	r1, [r7, #4]
 8003024:	4613      	mov	r3, r2
 8003026:	011b      	lsls	r3, r3, #4
 8003028:	1a9b      	subs	r3, r3, r2
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	440b      	add	r3, r1
 800302e:	334c      	adds	r3, #76	@ 0x4c
 8003030:	2204      	movs	r2, #4
 8003032:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003034:	e229      	b.n	800348a <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003036:	78fa      	ldrb	r2, [r7, #3]
 8003038:	6879      	ldr	r1, [r7, #4]
 800303a:	4613      	mov	r3, r2
 800303c:	011b      	lsls	r3, r3, #4
 800303e:	1a9b      	subs	r3, r3, r2
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	440b      	add	r3, r1
 8003044:	334c      	adds	r3, #76	@ 0x4c
 8003046:	2202      	movs	r2, #2
 8003048:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800304a:	78fa      	ldrb	r2, [r7, #3]
 800304c:	6879      	ldr	r1, [r7, #4]
 800304e:	4613      	mov	r3, r2
 8003050:	011b      	lsls	r3, r3, #4
 8003052:	1a9b      	subs	r3, r3, r2
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	440b      	add	r3, r1
 8003058:	3326      	adds	r3, #38	@ 0x26
 800305a:	781b      	ldrb	r3, [r3, #0]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d00b      	beq.n	8003078 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003060:	78fa      	ldrb	r2, [r7, #3]
 8003062:	6879      	ldr	r1, [r7, #4]
 8003064:	4613      	mov	r3, r2
 8003066:	011b      	lsls	r3, r3, #4
 8003068:	1a9b      	subs	r3, r3, r2
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	440b      	add	r3, r1
 800306e:	3326      	adds	r3, #38	@ 0x26
 8003070:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003072:	2b02      	cmp	r3, #2
 8003074:	f040 8209 	bne.w	800348a <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003078:	78fb      	ldrb	r3, [r7, #3]
 800307a:	015a      	lsls	r2, r3, #5
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	4413      	add	r3, r2
 8003080:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800308e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003096:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003098:	78fb      	ldrb	r3, [r7, #3]
 800309a:	015a      	lsls	r2, r3, #5
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	4413      	add	r3, r2
 80030a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030a4:	461a      	mov	r2, r3
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80030aa:	e1ee      	b.n	800348a <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80030ac:	78fa      	ldrb	r2, [r7, #3]
 80030ae:	6879      	ldr	r1, [r7, #4]
 80030b0:	4613      	mov	r3, r2
 80030b2:	011b      	lsls	r3, r3, #4
 80030b4:	1a9b      	subs	r3, r3, r2
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	440b      	add	r3, r1
 80030ba:	334d      	adds	r3, #77	@ 0x4d
 80030bc:	781b      	ldrb	r3, [r3, #0]
 80030be:	2b05      	cmp	r3, #5
 80030c0:	f040 80c8 	bne.w	8003254 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80030c4:	78fa      	ldrb	r2, [r7, #3]
 80030c6:	6879      	ldr	r1, [r7, #4]
 80030c8:	4613      	mov	r3, r2
 80030ca:	011b      	lsls	r3, r3, #4
 80030cc:	1a9b      	subs	r3, r3, r2
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	440b      	add	r3, r1
 80030d2:	334d      	adds	r3, #77	@ 0x4d
 80030d4:	2202      	movs	r2, #2
 80030d6:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80030d8:	78fa      	ldrb	r2, [r7, #3]
 80030da:	6879      	ldr	r1, [r7, #4]
 80030dc:	4613      	mov	r3, r2
 80030de:	011b      	lsls	r3, r3, #4
 80030e0:	1a9b      	subs	r3, r3, r2
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	440b      	add	r3, r1
 80030e6:	331b      	adds	r3, #27
 80030e8:	781b      	ldrb	r3, [r3, #0]
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	f040 81ce 	bne.w	800348c <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80030f0:	78fa      	ldrb	r2, [r7, #3]
 80030f2:	6879      	ldr	r1, [r7, #4]
 80030f4:	4613      	mov	r3, r2
 80030f6:	011b      	lsls	r3, r3, #4
 80030f8:	1a9b      	subs	r3, r3, r2
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	440b      	add	r3, r1
 80030fe:	3326      	adds	r3, #38	@ 0x26
 8003100:	781b      	ldrb	r3, [r3, #0]
 8003102:	2b03      	cmp	r3, #3
 8003104:	d16b      	bne.n	80031de <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8003106:	78fa      	ldrb	r2, [r7, #3]
 8003108:	6879      	ldr	r1, [r7, #4]
 800310a:	4613      	mov	r3, r2
 800310c:	011b      	lsls	r3, r3, #4
 800310e:	1a9b      	subs	r3, r3, r2
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	440b      	add	r3, r1
 8003114:	3348      	adds	r3, #72	@ 0x48
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	1c59      	adds	r1, r3, #1
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	4613      	mov	r3, r2
 800311e:	011b      	lsls	r3, r3, #4
 8003120:	1a9b      	subs	r3, r3, r2
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	4403      	add	r3, r0
 8003126:	3348      	adds	r3, #72	@ 0x48
 8003128:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 800312a:	78fa      	ldrb	r2, [r7, #3]
 800312c:	6879      	ldr	r1, [r7, #4]
 800312e:	4613      	mov	r3, r2
 8003130:	011b      	lsls	r3, r3, #4
 8003132:	1a9b      	subs	r3, r3, r2
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	440b      	add	r3, r1
 8003138:	3348      	adds	r3, #72	@ 0x48
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	2b02      	cmp	r3, #2
 800313e:	d943      	bls.n	80031c8 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8003140:	78fa      	ldrb	r2, [r7, #3]
 8003142:	6879      	ldr	r1, [r7, #4]
 8003144:	4613      	mov	r3, r2
 8003146:	011b      	lsls	r3, r3, #4
 8003148:	1a9b      	subs	r3, r3, r2
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	440b      	add	r3, r1
 800314e:	3348      	adds	r3, #72	@ 0x48
 8003150:	2200      	movs	r2, #0
 8003152:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8003154:	78fa      	ldrb	r2, [r7, #3]
 8003156:	6879      	ldr	r1, [r7, #4]
 8003158:	4613      	mov	r3, r2
 800315a:	011b      	lsls	r3, r3, #4
 800315c:	1a9b      	subs	r3, r3, r2
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	440b      	add	r3, r1
 8003162:	331b      	adds	r3, #27
 8003164:	2200      	movs	r2, #0
 8003166:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8003168:	78fa      	ldrb	r2, [r7, #3]
 800316a:	6879      	ldr	r1, [r7, #4]
 800316c:	4613      	mov	r3, r2
 800316e:	011b      	lsls	r3, r3, #4
 8003170:	1a9b      	subs	r3, r3, r2
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	440b      	add	r3, r1
 8003176:	3344      	adds	r3, #68	@ 0x44
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	2b02      	cmp	r3, #2
 800317c:	d809      	bhi.n	8003192 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 800317e:	78fa      	ldrb	r2, [r7, #3]
 8003180:	6879      	ldr	r1, [r7, #4]
 8003182:	4613      	mov	r3, r2
 8003184:	011b      	lsls	r3, r3, #4
 8003186:	1a9b      	subs	r3, r3, r2
 8003188:	009b      	lsls	r3, r3, #2
 800318a:	440b      	add	r3, r1
 800318c:	331c      	adds	r3, #28
 800318e:	2201      	movs	r2, #1
 8003190:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003192:	78fb      	ldrb	r3, [r7, #3]
 8003194:	015a      	lsls	r2, r3, #5
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	4413      	add	r3, r2
 800319a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	78fa      	ldrb	r2, [r7, #3]
 80031a2:	0151      	lsls	r1, r2, #5
 80031a4:	693a      	ldr	r2, [r7, #16]
 80031a6:	440a      	add	r2, r1
 80031a8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80031ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031b0:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80031b2:	78fa      	ldrb	r2, [r7, #3]
 80031b4:	6879      	ldr	r1, [r7, #4]
 80031b6:	4613      	mov	r3, r2
 80031b8:	011b      	lsls	r3, r3, #4
 80031ba:	1a9b      	subs	r3, r3, r2
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	440b      	add	r3, r1
 80031c0:	334c      	adds	r3, #76	@ 0x4c
 80031c2:	2204      	movs	r2, #4
 80031c4:	701a      	strb	r2, [r3, #0]
 80031c6:	e014      	b.n	80031f2 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80031c8:	78fa      	ldrb	r2, [r7, #3]
 80031ca:	6879      	ldr	r1, [r7, #4]
 80031cc:	4613      	mov	r3, r2
 80031ce:	011b      	lsls	r3, r3, #4
 80031d0:	1a9b      	subs	r3, r3, r2
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	440b      	add	r3, r1
 80031d6:	334c      	adds	r3, #76	@ 0x4c
 80031d8:	2202      	movs	r2, #2
 80031da:	701a      	strb	r2, [r3, #0]
 80031dc:	e009      	b.n	80031f2 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80031de:	78fa      	ldrb	r2, [r7, #3]
 80031e0:	6879      	ldr	r1, [r7, #4]
 80031e2:	4613      	mov	r3, r2
 80031e4:	011b      	lsls	r3, r3, #4
 80031e6:	1a9b      	subs	r3, r3, r2
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	440b      	add	r3, r1
 80031ec:	334c      	adds	r3, #76	@ 0x4c
 80031ee:	2202      	movs	r2, #2
 80031f0:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80031f2:	78fa      	ldrb	r2, [r7, #3]
 80031f4:	6879      	ldr	r1, [r7, #4]
 80031f6:	4613      	mov	r3, r2
 80031f8:	011b      	lsls	r3, r3, #4
 80031fa:	1a9b      	subs	r3, r3, r2
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	440b      	add	r3, r1
 8003200:	3326      	adds	r3, #38	@ 0x26
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d00b      	beq.n	8003220 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003208:	78fa      	ldrb	r2, [r7, #3]
 800320a:	6879      	ldr	r1, [r7, #4]
 800320c:	4613      	mov	r3, r2
 800320e:	011b      	lsls	r3, r3, #4
 8003210:	1a9b      	subs	r3, r3, r2
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	440b      	add	r3, r1
 8003216:	3326      	adds	r3, #38	@ 0x26
 8003218:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800321a:	2b02      	cmp	r3, #2
 800321c:	f040 8136 	bne.w	800348c <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003220:	78fb      	ldrb	r3, [r7, #3]
 8003222:	015a      	lsls	r2, r3, #5
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	4413      	add	r3, r2
 8003228:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003236:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800323e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003240:	78fb      	ldrb	r3, [r7, #3]
 8003242:	015a      	lsls	r2, r3, #5
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	4413      	add	r3, r2
 8003248:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800324c:	461a      	mov	r2, r3
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	6013      	str	r3, [r2, #0]
 8003252:	e11b      	b.n	800348c <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003254:	78fa      	ldrb	r2, [r7, #3]
 8003256:	6879      	ldr	r1, [r7, #4]
 8003258:	4613      	mov	r3, r2
 800325a:	011b      	lsls	r3, r3, #4
 800325c:	1a9b      	subs	r3, r3, r2
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	440b      	add	r3, r1
 8003262:	334d      	adds	r3, #77	@ 0x4d
 8003264:	781b      	ldrb	r3, [r3, #0]
 8003266:	2b03      	cmp	r3, #3
 8003268:	f040 8081 	bne.w	800336e <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800326c:	78fa      	ldrb	r2, [r7, #3]
 800326e:	6879      	ldr	r1, [r7, #4]
 8003270:	4613      	mov	r3, r2
 8003272:	011b      	lsls	r3, r3, #4
 8003274:	1a9b      	subs	r3, r3, r2
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	440b      	add	r3, r1
 800327a:	334d      	adds	r3, #77	@ 0x4d
 800327c:	2202      	movs	r2, #2
 800327e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003280:	78fa      	ldrb	r2, [r7, #3]
 8003282:	6879      	ldr	r1, [r7, #4]
 8003284:	4613      	mov	r3, r2
 8003286:	011b      	lsls	r3, r3, #4
 8003288:	1a9b      	subs	r3, r3, r2
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	440b      	add	r3, r1
 800328e:	331b      	adds	r3, #27
 8003290:	781b      	ldrb	r3, [r3, #0]
 8003292:	2b01      	cmp	r3, #1
 8003294:	f040 80fa 	bne.w	800348c <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003298:	78fa      	ldrb	r2, [r7, #3]
 800329a:	6879      	ldr	r1, [r7, #4]
 800329c:	4613      	mov	r3, r2
 800329e:	011b      	lsls	r3, r3, #4
 80032a0:	1a9b      	subs	r3, r3, r2
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	440b      	add	r3, r1
 80032a6:	334c      	adds	r3, #76	@ 0x4c
 80032a8:	2202      	movs	r2, #2
 80032aa:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80032ac:	78fb      	ldrb	r3, [r7, #3]
 80032ae:	015a      	lsls	r2, r3, #5
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	4413      	add	r3, r2
 80032b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	78fa      	ldrb	r2, [r7, #3]
 80032bc:	0151      	lsls	r1, r2, #5
 80032be:	693a      	ldr	r2, [r7, #16]
 80032c0:	440a      	add	r2, r1
 80032c2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80032c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032ca:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80032cc:	78fb      	ldrb	r3, [r7, #3]
 80032ce:	015a      	lsls	r2, r3, #5
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	4413      	add	r3, r2
 80032d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032d8:	68db      	ldr	r3, [r3, #12]
 80032da:	78fa      	ldrb	r2, [r7, #3]
 80032dc:	0151      	lsls	r1, r2, #5
 80032de:	693a      	ldr	r2, [r7, #16]
 80032e0:	440a      	add	r2, r1
 80032e2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80032e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80032ea:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 80032ec:	78fb      	ldrb	r3, [r7, #3]
 80032ee:	015a      	lsls	r2, r3, #5
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	4413      	add	r3, r2
 80032f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032f8:	68db      	ldr	r3, [r3, #12]
 80032fa:	78fa      	ldrb	r2, [r7, #3]
 80032fc:	0151      	lsls	r1, r2, #5
 80032fe:	693a      	ldr	r2, [r7, #16]
 8003300:	440a      	add	r2, r1
 8003302:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003306:	f023 0320 	bic.w	r3, r3, #32
 800330a:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800330c:	78fa      	ldrb	r2, [r7, #3]
 800330e:	6879      	ldr	r1, [r7, #4]
 8003310:	4613      	mov	r3, r2
 8003312:	011b      	lsls	r3, r3, #4
 8003314:	1a9b      	subs	r3, r3, r2
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	440b      	add	r3, r1
 800331a:	3326      	adds	r3, #38	@ 0x26
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d00b      	beq.n	800333a <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003322:	78fa      	ldrb	r2, [r7, #3]
 8003324:	6879      	ldr	r1, [r7, #4]
 8003326:	4613      	mov	r3, r2
 8003328:	011b      	lsls	r3, r3, #4
 800332a:	1a9b      	subs	r3, r3, r2
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	440b      	add	r3, r1
 8003330:	3326      	adds	r3, #38	@ 0x26
 8003332:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003334:	2b02      	cmp	r3, #2
 8003336:	f040 80a9 	bne.w	800348c <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800333a:	78fb      	ldrb	r3, [r7, #3]
 800333c:	015a      	lsls	r2, r3, #5
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	4413      	add	r3, r2
 8003342:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003350:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003358:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800335a:	78fb      	ldrb	r3, [r7, #3]
 800335c:	015a      	lsls	r2, r3, #5
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	4413      	add	r3, r2
 8003362:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003366:	461a      	mov	r2, r3
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	6013      	str	r3, [r2, #0]
 800336c:	e08e      	b.n	800348c <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800336e:	78fa      	ldrb	r2, [r7, #3]
 8003370:	6879      	ldr	r1, [r7, #4]
 8003372:	4613      	mov	r3, r2
 8003374:	011b      	lsls	r3, r3, #4
 8003376:	1a9b      	subs	r3, r3, r2
 8003378:	009b      	lsls	r3, r3, #2
 800337a:	440b      	add	r3, r1
 800337c:	334d      	adds	r3, #77	@ 0x4d
 800337e:	781b      	ldrb	r3, [r3, #0]
 8003380:	2b04      	cmp	r3, #4
 8003382:	d143      	bne.n	800340c <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003384:	78fa      	ldrb	r2, [r7, #3]
 8003386:	6879      	ldr	r1, [r7, #4]
 8003388:	4613      	mov	r3, r2
 800338a:	011b      	lsls	r3, r3, #4
 800338c:	1a9b      	subs	r3, r3, r2
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	440b      	add	r3, r1
 8003392:	334d      	adds	r3, #77	@ 0x4d
 8003394:	2202      	movs	r2, #2
 8003396:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003398:	78fa      	ldrb	r2, [r7, #3]
 800339a:	6879      	ldr	r1, [r7, #4]
 800339c:	4613      	mov	r3, r2
 800339e:	011b      	lsls	r3, r3, #4
 80033a0:	1a9b      	subs	r3, r3, r2
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	440b      	add	r3, r1
 80033a6:	334c      	adds	r3, #76	@ 0x4c
 80033a8:	2202      	movs	r2, #2
 80033aa:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80033ac:	78fa      	ldrb	r2, [r7, #3]
 80033ae:	6879      	ldr	r1, [r7, #4]
 80033b0:	4613      	mov	r3, r2
 80033b2:	011b      	lsls	r3, r3, #4
 80033b4:	1a9b      	subs	r3, r3, r2
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	440b      	add	r3, r1
 80033ba:	3326      	adds	r3, #38	@ 0x26
 80033bc:	781b      	ldrb	r3, [r3, #0]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d00a      	beq.n	80033d8 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80033c2:	78fa      	ldrb	r2, [r7, #3]
 80033c4:	6879      	ldr	r1, [r7, #4]
 80033c6:	4613      	mov	r3, r2
 80033c8:	011b      	lsls	r3, r3, #4
 80033ca:	1a9b      	subs	r3, r3, r2
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	440b      	add	r3, r1
 80033d0:	3326      	adds	r3, #38	@ 0x26
 80033d2:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80033d4:	2b02      	cmp	r3, #2
 80033d6:	d159      	bne.n	800348c <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80033d8:	78fb      	ldrb	r3, [r7, #3]
 80033da:	015a      	lsls	r2, r3, #5
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	4413      	add	r3, r2
 80033e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80033ee:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80033f6:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80033f8:	78fb      	ldrb	r3, [r7, #3]
 80033fa:	015a      	lsls	r2, r3, #5
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	4413      	add	r3, r2
 8003400:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003404:	461a      	mov	r2, r3
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	6013      	str	r3, [r2, #0]
 800340a:	e03f      	b.n	800348c <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 800340c:	78fa      	ldrb	r2, [r7, #3]
 800340e:	6879      	ldr	r1, [r7, #4]
 8003410:	4613      	mov	r3, r2
 8003412:	011b      	lsls	r3, r3, #4
 8003414:	1a9b      	subs	r3, r3, r2
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	440b      	add	r3, r1
 800341a:	334d      	adds	r3, #77	@ 0x4d
 800341c:	781b      	ldrb	r3, [r3, #0]
 800341e:	2b08      	cmp	r3, #8
 8003420:	d126      	bne.n	8003470 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003422:	78fa      	ldrb	r2, [r7, #3]
 8003424:	6879      	ldr	r1, [r7, #4]
 8003426:	4613      	mov	r3, r2
 8003428:	011b      	lsls	r3, r3, #4
 800342a:	1a9b      	subs	r3, r3, r2
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	440b      	add	r3, r1
 8003430:	334d      	adds	r3, #77	@ 0x4d
 8003432:	2202      	movs	r2, #2
 8003434:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003436:	78fa      	ldrb	r2, [r7, #3]
 8003438:	6879      	ldr	r1, [r7, #4]
 800343a:	4613      	mov	r3, r2
 800343c:	011b      	lsls	r3, r3, #4
 800343e:	1a9b      	subs	r3, r3, r2
 8003440:	009b      	lsls	r3, r3, #2
 8003442:	440b      	add	r3, r1
 8003444:	3344      	adds	r3, #68	@ 0x44
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	1c59      	adds	r1, r3, #1
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	4613      	mov	r3, r2
 800344e:	011b      	lsls	r3, r3, #4
 8003450:	1a9b      	subs	r3, r3, r2
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	4403      	add	r3, r0
 8003456:	3344      	adds	r3, #68	@ 0x44
 8003458:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 800345a:	78fa      	ldrb	r2, [r7, #3]
 800345c:	6879      	ldr	r1, [r7, #4]
 800345e:	4613      	mov	r3, r2
 8003460:	011b      	lsls	r3, r3, #4
 8003462:	1a9b      	subs	r3, r3, r2
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	440b      	add	r3, r1
 8003468:	334c      	adds	r3, #76	@ 0x4c
 800346a:	2204      	movs	r2, #4
 800346c:	701a      	strb	r2, [r3, #0]
 800346e:	e00d      	b.n	800348c <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8003470:	78fa      	ldrb	r2, [r7, #3]
 8003472:	6879      	ldr	r1, [r7, #4]
 8003474:	4613      	mov	r3, r2
 8003476:	011b      	lsls	r3, r3, #4
 8003478:	1a9b      	subs	r3, r3, r2
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	440b      	add	r3, r1
 800347e:	334d      	adds	r3, #77	@ 0x4d
 8003480:	781b      	ldrb	r3, [r3, #0]
 8003482:	2b02      	cmp	r3, #2
 8003484:	f000 8100 	beq.w	8003688 <HCD_HC_IN_IRQHandler+0xcca>
 8003488:	e000      	b.n	800348c <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800348a:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800348c:	78fa      	ldrb	r2, [r7, #3]
 800348e:	6879      	ldr	r1, [r7, #4]
 8003490:	4613      	mov	r3, r2
 8003492:	011b      	lsls	r3, r3, #4
 8003494:	1a9b      	subs	r3, r3, r2
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	440b      	add	r3, r1
 800349a:	334c      	adds	r3, #76	@ 0x4c
 800349c:	781a      	ldrb	r2, [r3, #0]
 800349e:	78fb      	ldrb	r3, [r7, #3]
 80034a0:	4619      	mov	r1, r3
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f006 fd72 	bl	8009f8c <HAL_HCD_HC_NotifyURBChange_Callback>
 80034a8:	e0ef      	b.n	800368a <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	78fa      	ldrb	r2, [r7, #3]
 80034b0:	4611      	mov	r1, r2
 80034b2:	4618      	mov	r0, r3
 80034b4:	f003 fc6d 	bl	8006d92 <USB_ReadChInterrupts>
 80034b8:	4603      	mov	r3, r0
 80034ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034be:	2b40      	cmp	r3, #64	@ 0x40
 80034c0:	d12f      	bne.n	8003522 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80034c2:	78fb      	ldrb	r3, [r7, #3]
 80034c4:	015a      	lsls	r2, r3, #5
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	4413      	add	r3, r2
 80034ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034ce:	461a      	mov	r2, r3
 80034d0:	2340      	movs	r3, #64	@ 0x40
 80034d2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 80034d4:	78fa      	ldrb	r2, [r7, #3]
 80034d6:	6879      	ldr	r1, [r7, #4]
 80034d8:	4613      	mov	r3, r2
 80034da:	011b      	lsls	r3, r3, #4
 80034dc:	1a9b      	subs	r3, r3, r2
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	440b      	add	r3, r1
 80034e2:	334d      	adds	r3, #77	@ 0x4d
 80034e4:	2205      	movs	r2, #5
 80034e6:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80034e8:	78fa      	ldrb	r2, [r7, #3]
 80034ea:	6879      	ldr	r1, [r7, #4]
 80034ec:	4613      	mov	r3, r2
 80034ee:	011b      	lsls	r3, r3, #4
 80034f0:	1a9b      	subs	r3, r3, r2
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	440b      	add	r3, r1
 80034f6:	331a      	adds	r3, #26
 80034f8:	781b      	ldrb	r3, [r3, #0]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d109      	bne.n	8003512 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80034fe:	78fa      	ldrb	r2, [r7, #3]
 8003500:	6879      	ldr	r1, [r7, #4]
 8003502:	4613      	mov	r3, r2
 8003504:	011b      	lsls	r3, r3, #4
 8003506:	1a9b      	subs	r3, r3, r2
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	440b      	add	r3, r1
 800350c:	3344      	adds	r3, #68	@ 0x44
 800350e:	2200      	movs	r2, #0
 8003510:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	78fa      	ldrb	r2, [r7, #3]
 8003518:	4611      	mov	r1, r2
 800351a:	4618      	mov	r0, r3
 800351c:	f004 f9dd 	bl	80078da <USB_HC_Halt>
 8003520:	e0b3      	b.n	800368a <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	78fa      	ldrb	r2, [r7, #3]
 8003528:	4611      	mov	r1, r2
 800352a:	4618      	mov	r0, r3
 800352c:	f003 fc31 	bl	8006d92 <USB_ReadChInterrupts>
 8003530:	4603      	mov	r3, r0
 8003532:	f003 0310 	and.w	r3, r3, #16
 8003536:	2b10      	cmp	r3, #16
 8003538:	f040 80a7 	bne.w	800368a <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800353c:	78fa      	ldrb	r2, [r7, #3]
 800353e:	6879      	ldr	r1, [r7, #4]
 8003540:	4613      	mov	r3, r2
 8003542:	011b      	lsls	r3, r3, #4
 8003544:	1a9b      	subs	r3, r3, r2
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	440b      	add	r3, r1
 800354a:	3326      	adds	r3, #38	@ 0x26
 800354c:	781b      	ldrb	r3, [r3, #0]
 800354e:	2b03      	cmp	r3, #3
 8003550:	d11b      	bne.n	800358a <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003552:	78fa      	ldrb	r2, [r7, #3]
 8003554:	6879      	ldr	r1, [r7, #4]
 8003556:	4613      	mov	r3, r2
 8003558:	011b      	lsls	r3, r3, #4
 800355a:	1a9b      	subs	r3, r3, r2
 800355c:	009b      	lsls	r3, r3, #2
 800355e:	440b      	add	r3, r1
 8003560:	3344      	adds	r3, #68	@ 0x44
 8003562:	2200      	movs	r2, #0
 8003564:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8003566:	78fa      	ldrb	r2, [r7, #3]
 8003568:	6879      	ldr	r1, [r7, #4]
 800356a:	4613      	mov	r3, r2
 800356c:	011b      	lsls	r3, r3, #4
 800356e:	1a9b      	subs	r3, r3, r2
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	440b      	add	r3, r1
 8003574:	334d      	adds	r3, #77	@ 0x4d
 8003576:	2204      	movs	r2, #4
 8003578:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	78fa      	ldrb	r2, [r7, #3]
 8003580:	4611      	mov	r1, r2
 8003582:	4618      	mov	r0, r3
 8003584:	f004 f9a9 	bl	80078da <USB_HC_Halt>
 8003588:	e03f      	b.n	800360a <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800358a:	78fa      	ldrb	r2, [r7, #3]
 800358c:	6879      	ldr	r1, [r7, #4]
 800358e:	4613      	mov	r3, r2
 8003590:	011b      	lsls	r3, r3, #4
 8003592:	1a9b      	subs	r3, r3, r2
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	440b      	add	r3, r1
 8003598:	3326      	adds	r3, #38	@ 0x26
 800359a:	781b      	ldrb	r3, [r3, #0]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d00a      	beq.n	80035b6 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80035a0:	78fa      	ldrb	r2, [r7, #3]
 80035a2:	6879      	ldr	r1, [r7, #4]
 80035a4:	4613      	mov	r3, r2
 80035a6:	011b      	lsls	r3, r3, #4
 80035a8:	1a9b      	subs	r3, r3, r2
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	440b      	add	r3, r1
 80035ae:	3326      	adds	r3, #38	@ 0x26
 80035b0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d129      	bne.n	800360a <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80035b6:	78fa      	ldrb	r2, [r7, #3]
 80035b8:	6879      	ldr	r1, [r7, #4]
 80035ba:	4613      	mov	r3, r2
 80035bc:	011b      	lsls	r3, r3, #4
 80035be:	1a9b      	subs	r3, r3, r2
 80035c0:	009b      	lsls	r3, r3, #2
 80035c2:	440b      	add	r3, r1
 80035c4:	3344      	adds	r3, #68	@ 0x44
 80035c6:	2200      	movs	r2, #0
 80035c8:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	799b      	ldrb	r3, [r3, #6]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d00a      	beq.n	80035e8 <HCD_HC_IN_IRQHandler+0xc2a>
 80035d2:	78fa      	ldrb	r2, [r7, #3]
 80035d4:	6879      	ldr	r1, [r7, #4]
 80035d6:	4613      	mov	r3, r2
 80035d8:	011b      	lsls	r3, r3, #4
 80035da:	1a9b      	subs	r3, r3, r2
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	440b      	add	r3, r1
 80035e0:	331b      	adds	r3, #27
 80035e2:	781b      	ldrb	r3, [r3, #0]
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d110      	bne.n	800360a <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 80035e8:	78fa      	ldrb	r2, [r7, #3]
 80035ea:	6879      	ldr	r1, [r7, #4]
 80035ec:	4613      	mov	r3, r2
 80035ee:	011b      	lsls	r3, r3, #4
 80035f0:	1a9b      	subs	r3, r3, r2
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	440b      	add	r3, r1
 80035f6:	334d      	adds	r3, #77	@ 0x4d
 80035f8:	2204      	movs	r2, #4
 80035fa:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	78fa      	ldrb	r2, [r7, #3]
 8003602:	4611      	mov	r1, r2
 8003604:	4618      	mov	r0, r3
 8003606:	f004 f968 	bl	80078da <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 800360a:	78fa      	ldrb	r2, [r7, #3]
 800360c:	6879      	ldr	r1, [r7, #4]
 800360e:	4613      	mov	r3, r2
 8003610:	011b      	lsls	r3, r3, #4
 8003612:	1a9b      	subs	r3, r3, r2
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	440b      	add	r3, r1
 8003618:	331b      	adds	r3, #27
 800361a:	781b      	ldrb	r3, [r3, #0]
 800361c:	2b01      	cmp	r3, #1
 800361e:	d129      	bne.n	8003674 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003620:	78fa      	ldrb	r2, [r7, #3]
 8003622:	6879      	ldr	r1, [r7, #4]
 8003624:	4613      	mov	r3, r2
 8003626:	011b      	lsls	r3, r3, #4
 8003628:	1a9b      	subs	r3, r3, r2
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	440b      	add	r3, r1
 800362e:	331b      	adds	r3, #27
 8003630:	2200      	movs	r2, #0
 8003632:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003634:	78fb      	ldrb	r3, [r7, #3]
 8003636:	015a      	lsls	r2, r3, #5
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	4413      	add	r3, r2
 800363c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	78fa      	ldrb	r2, [r7, #3]
 8003644:	0151      	lsls	r1, r2, #5
 8003646:	693a      	ldr	r2, [r7, #16]
 8003648:	440a      	add	r2, r1
 800364a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800364e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003652:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8003654:	78fb      	ldrb	r3, [r7, #3]
 8003656:	015a      	lsls	r2, r3, #5
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	4413      	add	r3, r2
 800365c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003660:	68db      	ldr	r3, [r3, #12]
 8003662:	78fa      	ldrb	r2, [r7, #3]
 8003664:	0151      	lsls	r1, r2, #5
 8003666:	693a      	ldr	r2, [r7, #16]
 8003668:	440a      	add	r2, r1
 800366a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800366e:	f043 0320 	orr.w	r3, r3, #32
 8003672:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003674:	78fb      	ldrb	r3, [r7, #3]
 8003676:	015a      	lsls	r2, r3, #5
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	4413      	add	r3, r2
 800367c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003680:	461a      	mov	r2, r3
 8003682:	2310      	movs	r3, #16
 8003684:	6093      	str	r3, [r2, #8]
 8003686:	e000      	b.n	800368a <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8003688:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 800368a:	3718      	adds	r7, #24
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}

08003690 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b086      	sub	sp, #24
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
 8003698:	460b      	mov	r3, r1
 800369a:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	78fa      	ldrb	r2, [r7, #3]
 80036ac:	4611      	mov	r1, r2
 80036ae:	4618      	mov	r0, r3
 80036b0:	f003 fb6f 	bl	8006d92 <USB_ReadChInterrupts>
 80036b4:	4603      	mov	r3, r0
 80036b6:	f003 0304 	and.w	r3, r3, #4
 80036ba:	2b04      	cmp	r3, #4
 80036bc:	d11b      	bne.n	80036f6 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80036be:	78fb      	ldrb	r3, [r7, #3]
 80036c0:	015a      	lsls	r2, r3, #5
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	4413      	add	r3, r2
 80036c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036ca:	461a      	mov	r2, r3
 80036cc:	2304      	movs	r3, #4
 80036ce:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80036d0:	78fa      	ldrb	r2, [r7, #3]
 80036d2:	6879      	ldr	r1, [r7, #4]
 80036d4:	4613      	mov	r3, r2
 80036d6:	011b      	lsls	r3, r3, #4
 80036d8:	1a9b      	subs	r3, r3, r2
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	440b      	add	r3, r1
 80036de:	334d      	adds	r3, #77	@ 0x4d
 80036e0:	2207      	movs	r2, #7
 80036e2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	78fa      	ldrb	r2, [r7, #3]
 80036ea:	4611      	mov	r1, r2
 80036ec:	4618      	mov	r0, r3
 80036ee:	f004 f8f4 	bl	80078da <USB_HC_Halt>
 80036f2:	f000 bc89 	b.w	8004008 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	78fa      	ldrb	r2, [r7, #3]
 80036fc:	4611      	mov	r1, r2
 80036fe:	4618      	mov	r0, r3
 8003700:	f003 fb47 	bl	8006d92 <USB_ReadChInterrupts>
 8003704:	4603      	mov	r3, r0
 8003706:	f003 0320 	and.w	r3, r3, #32
 800370a:	2b20      	cmp	r3, #32
 800370c:	f040 8082 	bne.w	8003814 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003710:	78fb      	ldrb	r3, [r7, #3]
 8003712:	015a      	lsls	r2, r3, #5
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	4413      	add	r3, r2
 8003718:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800371c:	461a      	mov	r2, r3
 800371e:	2320      	movs	r3, #32
 8003720:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8003722:	78fa      	ldrb	r2, [r7, #3]
 8003724:	6879      	ldr	r1, [r7, #4]
 8003726:	4613      	mov	r3, r2
 8003728:	011b      	lsls	r3, r3, #4
 800372a:	1a9b      	subs	r3, r3, r2
 800372c:	009b      	lsls	r3, r3, #2
 800372e:	440b      	add	r3, r1
 8003730:	3319      	adds	r3, #25
 8003732:	781b      	ldrb	r3, [r3, #0]
 8003734:	2b01      	cmp	r3, #1
 8003736:	d124      	bne.n	8003782 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8003738:	78fa      	ldrb	r2, [r7, #3]
 800373a:	6879      	ldr	r1, [r7, #4]
 800373c:	4613      	mov	r3, r2
 800373e:	011b      	lsls	r3, r3, #4
 8003740:	1a9b      	subs	r3, r3, r2
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	440b      	add	r3, r1
 8003746:	3319      	adds	r3, #25
 8003748:	2200      	movs	r2, #0
 800374a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800374c:	78fa      	ldrb	r2, [r7, #3]
 800374e:	6879      	ldr	r1, [r7, #4]
 8003750:	4613      	mov	r3, r2
 8003752:	011b      	lsls	r3, r3, #4
 8003754:	1a9b      	subs	r3, r3, r2
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	440b      	add	r3, r1
 800375a:	334c      	adds	r3, #76	@ 0x4c
 800375c:	2202      	movs	r2, #2
 800375e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003760:	78fa      	ldrb	r2, [r7, #3]
 8003762:	6879      	ldr	r1, [r7, #4]
 8003764:	4613      	mov	r3, r2
 8003766:	011b      	lsls	r3, r3, #4
 8003768:	1a9b      	subs	r3, r3, r2
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	440b      	add	r3, r1
 800376e:	334d      	adds	r3, #77	@ 0x4d
 8003770:	2203      	movs	r2, #3
 8003772:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	78fa      	ldrb	r2, [r7, #3]
 800377a:	4611      	mov	r1, r2
 800377c:	4618      	mov	r0, r3
 800377e:	f004 f8ac 	bl	80078da <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8003782:	78fa      	ldrb	r2, [r7, #3]
 8003784:	6879      	ldr	r1, [r7, #4]
 8003786:	4613      	mov	r3, r2
 8003788:	011b      	lsls	r3, r3, #4
 800378a:	1a9b      	subs	r3, r3, r2
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	440b      	add	r3, r1
 8003790:	331a      	adds	r3, #26
 8003792:	781b      	ldrb	r3, [r3, #0]
 8003794:	2b01      	cmp	r3, #1
 8003796:	f040 8437 	bne.w	8004008 <HCD_HC_OUT_IRQHandler+0x978>
 800379a:	78fa      	ldrb	r2, [r7, #3]
 800379c:	6879      	ldr	r1, [r7, #4]
 800379e:	4613      	mov	r3, r2
 80037a0:	011b      	lsls	r3, r3, #4
 80037a2:	1a9b      	subs	r3, r3, r2
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	440b      	add	r3, r1
 80037a8:	331b      	adds	r3, #27
 80037aa:	781b      	ldrb	r3, [r3, #0]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	f040 842b 	bne.w	8004008 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 80037b2:	78fa      	ldrb	r2, [r7, #3]
 80037b4:	6879      	ldr	r1, [r7, #4]
 80037b6:	4613      	mov	r3, r2
 80037b8:	011b      	lsls	r3, r3, #4
 80037ba:	1a9b      	subs	r3, r3, r2
 80037bc:	009b      	lsls	r3, r3, #2
 80037be:	440b      	add	r3, r1
 80037c0:	3326      	adds	r3, #38	@ 0x26
 80037c2:	781b      	ldrb	r3, [r3, #0]
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d009      	beq.n	80037dc <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 80037c8:	78fa      	ldrb	r2, [r7, #3]
 80037ca:	6879      	ldr	r1, [r7, #4]
 80037cc:	4613      	mov	r3, r2
 80037ce:	011b      	lsls	r3, r3, #4
 80037d0:	1a9b      	subs	r3, r3, r2
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	440b      	add	r3, r1
 80037d6:	331b      	adds	r3, #27
 80037d8:	2201      	movs	r2, #1
 80037da:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 80037dc:	78fa      	ldrb	r2, [r7, #3]
 80037de:	6879      	ldr	r1, [r7, #4]
 80037e0:	4613      	mov	r3, r2
 80037e2:	011b      	lsls	r3, r3, #4
 80037e4:	1a9b      	subs	r3, r3, r2
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	440b      	add	r3, r1
 80037ea:	334d      	adds	r3, #77	@ 0x4d
 80037ec:	2203      	movs	r2, #3
 80037ee:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	78fa      	ldrb	r2, [r7, #3]
 80037f6:	4611      	mov	r1, r2
 80037f8:	4618      	mov	r0, r3
 80037fa:	f004 f86e 	bl	80078da <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 80037fe:	78fa      	ldrb	r2, [r7, #3]
 8003800:	6879      	ldr	r1, [r7, #4]
 8003802:	4613      	mov	r3, r2
 8003804:	011b      	lsls	r3, r3, #4
 8003806:	1a9b      	subs	r3, r3, r2
 8003808:	009b      	lsls	r3, r3, #2
 800380a:	440b      	add	r3, r1
 800380c:	3344      	adds	r3, #68	@ 0x44
 800380e:	2200      	movs	r2, #0
 8003810:	601a      	str	r2, [r3, #0]
 8003812:	e3f9      	b.n	8004008 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	78fa      	ldrb	r2, [r7, #3]
 800381a:	4611      	mov	r1, r2
 800381c:	4618      	mov	r0, r3
 800381e:	f003 fab8 	bl	8006d92 <USB_ReadChInterrupts>
 8003822:	4603      	mov	r3, r0
 8003824:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003828:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800382c:	d111      	bne.n	8003852 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800382e:	78fb      	ldrb	r3, [r7, #3]
 8003830:	015a      	lsls	r2, r3, #5
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	4413      	add	r3, r2
 8003836:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800383a:	461a      	mov	r2, r3
 800383c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003840:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	78fa      	ldrb	r2, [r7, #3]
 8003848:	4611      	mov	r1, r2
 800384a:	4618      	mov	r0, r3
 800384c:	f004 f845 	bl	80078da <USB_HC_Halt>
 8003850:	e3da      	b.n	8004008 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	78fa      	ldrb	r2, [r7, #3]
 8003858:	4611      	mov	r1, r2
 800385a:	4618      	mov	r0, r3
 800385c:	f003 fa99 	bl	8006d92 <USB_ReadChInterrupts>
 8003860:	4603      	mov	r3, r0
 8003862:	f003 0301 	and.w	r3, r3, #1
 8003866:	2b01      	cmp	r3, #1
 8003868:	d168      	bne.n	800393c <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800386a:	78fa      	ldrb	r2, [r7, #3]
 800386c:	6879      	ldr	r1, [r7, #4]
 800386e:	4613      	mov	r3, r2
 8003870:	011b      	lsls	r3, r3, #4
 8003872:	1a9b      	subs	r3, r3, r2
 8003874:	009b      	lsls	r3, r3, #2
 8003876:	440b      	add	r3, r1
 8003878:	3344      	adds	r3, #68	@ 0x44
 800387a:	2200      	movs	r2, #0
 800387c:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	78fa      	ldrb	r2, [r7, #3]
 8003884:	4611      	mov	r1, r2
 8003886:	4618      	mov	r0, r3
 8003888:	f003 fa83 	bl	8006d92 <USB_ReadChInterrupts>
 800388c:	4603      	mov	r3, r0
 800388e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003892:	2b40      	cmp	r3, #64	@ 0x40
 8003894:	d112      	bne.n	80038bc <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003896:	78fa      	ldrb	r2, [r7, #3]
 8003898:	6879      	ldr	r1, [r7, #4]
 800389a:	4613      	mov	r3, r2
 800389c:	011b      	lsls	r3, r3, #4
 800389e:	1a9b      	subs	r3, r3, r2
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	440b      	add	r3, r1
 80038a4:	3319      	adds	r3, #25
 80038a6:	2201      	movs	r2, #1
 80038a8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80038aa:	78fb      	ldrb	r3, [r7, #3]
 80038ac:	015a      	lsls	r2, r3, #5
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	4413      	add	r3, r2
 80038b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038b6:	461a      	mov	r2, r3
 80038b8:	2340      	movs	r3, #64	@ 0x40
 80038ba:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 80038bc:	78fa      	ldrb	r2, [r7, #3]
 80038be:	6879      	ldr	r1, [r7, #4]
 80038c0:	4613      	mov	r3, r2
 80038c2:	011b      	lsls	r3, r3, #4
 80038c4:	1a9b      	subs	r3, r3, r2
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	440b      	add	r3, r1
 80038ca:	331b      	adds	r3, #27
 80038cc:	781b      	ldrb	r3, [r3, #0]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d019      	beq.n	8003906 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80038d2:	78fa      	ldrb	r2, [r7, #3]
 80038d4:	6879      	ldr	r1, [r7, #4]
 80038d6:	4613      	mov	r3, r2
 80038d8:	011b      	lsls	r3, r3, #4
 80038da:	1a9b      	subs	r3, r3, r2
 80038dc:	009b      	lsls	r3, r3, #2
 80038de:	440b      	add	r3, r1
 80038e0:	331b      	adds	r3, #27
 80038e2:	2200      	movs	r2, #0
 80038e4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80038e6:	78fb      	ldrb	r3, [r7, #3]
 80038e8:	015a      	lsls	r2, r3, #5
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	4413      	add	r3, r2
 80038ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	78fa      	ldrb	r2, [r7, #3]
 80038f6:	0151      	lsls	r1, r2, #5
 80038f8:	693a      	ldr	r2, [r7, #16]
 80038fa:	440a      	add	r2, r1
 80038fc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003900:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003904:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003906:	78fb      	ldrb	r3, [r7, #3]
 8003908:	015a      	lsls	r2, r3, #5
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	4413      	add	r3, r2
 800390e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003912:	461a      	mov	r2, r3
 8003914:	2301      	movs	r3, #1
 8003916:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8003918:	78fa      	ldrb	r2, [r7, #3]
 800391a:	6879      	ldr	r1, [r7, #4]
 800391c:	4613      	mov	r3, r2
 800391e:	011b      	lsls	r3, r3, #4
 8003920:	1a9b      	subs	r3, r3, r2
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	440b      	add	r3, r1
 8003926:	334d      	adds	r3, #77	@ 0x4d
 8003928:	2201      	movs	r2, #1
 800392a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	78fa      	ldrb	r2, [r7, #3]
 8003932:	4611      	mov	r1, r2
 8003934:	4618      	mov	r0, r3
 8003936:	f003 ffd0 	bl	80078da <USB_HC_Halt>
 800393a:	e365      	b.n	8004008 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	78fa      	ldrb	r2, [r7, #3]
 8003942:	4611      	mov	r1, r2
 8003944:	4618      	mov	r0, r3
 8003946:	f003 fa24 	bl	8006d92 <USB_ReadChInterrupts>
 800394a:	4603      	mov	r3, r0
 800394c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003950:	2b40      	cmp	r3, #64	@ 0x40
 8003952:	d139      	bne.n	80039c8 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8003954:	78fa      	ldrb	r2, [r7, #3]
 8003956:	6879      	ldr	r1, [r7, #4]
 8003958:	4613      	mov	r3, r2
 800395a:	011b      	lsls	r3, r3, #4
 800395c:	1a9b      	subs	r3, r3, r2
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	440b      	add	r3, r1
 8003962:	334d      	adds	r3, #77	@ 0x4d
 8003964:	2205      	movs	r2, #5
 8003966:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003968:	78fa      	ldrb	r2, [r7, #3]
 800396a:	6879      	ldr	r1, [r7, #4]
 800396c:	4613      	mov	r3, r2
 800396e:	011b      	lsls	r3, r3, #4
 8003970:	1a9b      	subs	r3, r3, r2
 8003972:	009b      	lsls	r3, r3, #2
 8003974:	440b      	add	r3, r1
 8003976:	331a      	adds	r3, #26
 8003978:	781b      	ldrb	r3, [r3, #0]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d109      	bne.n	8003992 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800397e:	78fa      	ldrb	r2, [r7, #3]
 8003980:	6879      	ldr	r1, [r7, #4]
 8003982:	4613      	mov	r3, r2
 8003984:	011b      	lsls	r3, r3, #4
 8003986:	1a9b      	subs	r3, r3, r2
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	440b      	add	r3, r1
 800398c:	3319      	adds	r3, #25
 800398e:	2201      	movs	r2, #1
 8003990:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8003992:	78fa      	ldrb	r2, [r7, #3]
 8003994:	6879      	ldr	r1, [r7, #4]
 8003996:	4613      	mov	r3, r2
 8003998:	011b      	lsls	r3, r3, #4
 800399a:	1a9b      	subs	r3, r3, r2
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	440b      	add	r3, r1
 80039a0:	3344      	adds	r3, #68	@ 0x44
 80039a2:	2200      	movs	r2, #0
 80039a4:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	78fa      	ldrb	r2, [r7, #3]
 80039ac:	4611      	mov	r1, r2
 80039ae:	4618      	mov	r0, r3
 80039b0:	f003 ff93 	bl	80078da <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80039b4:	78fb      	ldrb	r3, [r7, #3]
 80039b6:	015a      	lsls	r2, r3, #5
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	4413      	add	r3, r2
 80039bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039c0:	461a      	mov	r2, r3
 80039c2:	2340      	movs	r3, #64	@ 0x40
 80039c4:	6093      	str	r3, [r2, #8]
 80039c6:	e31f      	b.n	8004008 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	78fa      	ldrb	r2, [r7, #3]
 80039ce:	4611      	mov	r1, r2
 80039d0:	4618      	mov	r0, r3
 80039d2:	f003 f9de 	bl	8006d92 <USB_ReadChInterrupts>
 80039d6:	4603      	mov	r3, r0
 80039d8:	f003 0308 	and.w	r3, r3, #8
 80039dc:	2b08      	cmp	r3, #8
 80039de:	d11a      	bne.n	8003a16 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80039e0:	78fb      	ldrb	r3, [r7, #3]
 80039e2:	015a      	lsls	r2, r3, #5
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	4413      	add	r3, r2
 80039e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039ec:	461a      	mov	r2, r3
 80039ee:	2308      	movs	r3, #8
 80039f0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80039f2:	78fa      	ldrb	r2, [r7, #3]
 80039f4:	6879      	ldr	r1, [r7, #4]
 80039f6:	4613      	mov	r3, r2
 80039f8:	011b      	lsls	r3, r3, #4
 80039fa:	1a9b      	subs	r3, r3, r2
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	440b      	add	r3, r1
 8003a00:	334d      	adds	r3, #77	@ 0x4d
 8003a02:	2206      	movs	r2, #6
 8003a04:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	78fa      	ldrb	r2, [r7, #3]
 8003a0c:	4611      	mov	r1, r2
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f003 ff63 	bl	80078da <USB_HC_Halt>
 8003a14:	e2f8      	b.n	8004008 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	78fa      	ldrb	r2, [r7, #3]
 8003a1c:	4611      	mov	r1, r2
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f003 f9b7 	bl	8006d92 <USB_ReadChInterrupts>
 8003a24:	4603      	mov	r3, r0
 8003a26:	f003 0310 	and.w	r3, r3, #16
 8003a2a:	2b10      	cmp	r3, #16
 8003a2c:	d144      	bne.n	8003ab8 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003a2e:	78fa      	ldrb	r2, [r7, #3]
 8003a30:	6879      	ldr	r1, [r7, #4]
 8003a32:	4613      	mov	r3, r2
 8003a34:	011b      	lsls	r3, r3, #4
 8003a36:	1a9b      	subs	r3, r3, r2
 8003a38:	009b      	lsls	r3, r3, #2
 8003a3a:	440b      	add	r3, r1
 8003a3c:	3344      	adds	r3, #68	@ 0x44
 8003a3e:	2200      	movs	r2, #0
 8003a40:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8003a42:	78fa      	ldrb	r2, [r7, #3]
 8003a44:	6879      	ldr	r1, [r7, #4]
 8003a46:	4613      	mov	r3, r2
 8003a48:	011b      	lsls	r3, r3, #4
 8003a4a:	1a9b      	subs	r3, r3, r2
 8003a4c:	009b      	lsls	r3, r3, #2
 8003a4e:	440b      	add	r3, r1
 8003a50:	334d      	adds	r3, #77	@ 0x4d
 8003a52:	2204      	movs	r2, #4
 8003a54:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8003a56:	78fa      	ldrb	r2, [r7, #3]
 8003a58:	6879      	ldr	r1, [r7, #4]
 8003a5a:	4613      	mov	r3, r2
 8003a5c:	011b      	lsls	r3, r3, #4
 8003a5e:	1a9b      	subs	r3, r3, r2
 8003a60:	009b      	lsls	r3, r3, #2
 8003a62:	440b      	add	r3, r1
 8003a64:	3319      	adds	r3, #25
 8003a66:	781b      	ldrb	r3, [r3, #0]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d114      	bne.n	8003a96 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8003a6c:	78fa      	ldrb	r2, [r7, #3]
 8003a6e:	6879      	ldr	r1, [r7, #4]
 8003a70:	4613      	mov	r3, r2
 8003a72:	011b      	lsls	r3, r3, #4
 8003a74:	1a9b      	subs	r3, r3, r2
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	440b      	add	r3, r1
 8003a7a:	3318      	adds	r3, #24
 8003a7c:	781b      	ldrb	r3, [r3, #0]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d109      	bne.n	8003a96 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8003a82:	78fa      	ldrb	r2, [r7, #3]
 8003a84:	6879      	ldr	r1, [r7, #4]
 8003a86:	4613      	mov	r3, r2
 8003a88:	011b      	lsls	r3, r3, #4
 8003a8a:	1a9b      	subs	r3, r3, r2
 8003a8c:	009b      	lsls	r3, r3, #2
 8003a8e:	440b      	add	r3, r1
 8003a90:	3319      	adds	r3, #25
 8003a92:	2201      	movs	r2, #1
 8003a94:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	78fa      	ldrb	r2, [r7, #3]
 8003a9c:	4611      	mov	r1, r2
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f003 ff1b 	bl	80078da <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003aa4:	78fb      	ldrb	r3, [r7, #3]
 8003aa6:	015a      	lsls	r2, r3, #5
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	4413      	add	r3, r2
 8003aac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	2310      	movs	r3, #16
 8003ab4:	6093      	str	r3, [r2, #8]
 8003ab6:	e2a7      	b.n	8004008 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	78fa      	ldrb	r2, [r7, #3]
 8003abe:	4611      	mov	r1, r2
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f003 f966 	bl	8006d92 <USB_ReadChInterrupts>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003acc:	2b80      	cmp	r3, #128	@ 0x80
 8003ace:	f040 8083 	bne.w	8003bd8 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	799b      	ldrb	r3, [r3, #6]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d111      	bne.n	8003afe <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8003ada:	78fa      	ldrb	r2, [r7, #3]
 8003adc:	6879      	ldr	r1, [r7, #4]
 8003ade:	4613      	mov	r3, r2
 8003ae0:	011b      	lsls	r3, r3, #4
 8003ae2:	1a9b      	subs	r3, r3, r2
 8003ae4:	009b      	lsls	r3, r3, #2
 8003ae6:	440b      	add	r3, r1
 8003ae8:	334d      	adds	r3, #77	@ 0x4d
 8003aea:	2207      	movs	r2, #7
 8003aec:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	78fa      	ldrb	r2, [r7, #3]
 8003af4:	4611      	mov	r1, r2
 8003af6:	4618      	mov	r0, r3
 8003af8:	f003 feef 	bl	80078da <USB_HC_Halt>
 8003afc:	e062      	b.n	8003bc4 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8003afe:	78fa      	ldrb	r2, [r7, #3]
 8003b00:	6879      	ldr	r1, [r7, #4]
 8003b02:	4613      	mov	r3, r2
 8003b04:	011b      	lsls	r3, r3, #4
 8003b06:	1a9b      	subs	r3, r3, r2
 8003b08:	009b      	lsls	r3, r3, #2
 8003b0a:	440b      	add	r3, r1
 8003b0c:	3344      	adds	r3, #68	@ 0x44
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	1c59      	adds	r1, r3, #1
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	4613      	mov	r3, r2
 8003b16:	011b      	lsls	r3, r3, #4
 8003b18:	1a9b      	subs	r3, r3, r2
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	4403      	add	r3, r0
 8003b1e:	3344      	adds	r3, #68	@ 0x44
 8003b20:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003b22:	78fa      	ldrb	r2, [r7, #3]
 8003b24:	6879      	ldr	r1, [r7, #4]
 8003b26:	4613      	mov	r3, r2
 8003b28:	011b      	lsls	r3, r3, #4
 8003b2a:	1a9b      	subs	r3, r3, r2
 8003b2c:	009b      	lsls	r3, r3, #2
 8003b2e:	440b      	add	r3, r1
 8003b30:	3344      	adds	r3, #68	@ 0x44
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	2b02      	cmp	r3, #2
 8003b36:	d922      	bls.n	8003b7e <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003b38:	78fa      	ldrb	r2, [r7, #3]
 8003b3a:	6879      	ldr	r1, [r7, #4]
 8003b3c:	4613      	mov	r3, r2
 8003b3e:	011b      	lsls	r3, r3, #4
 8003b40:	1a9b      	subs	r3, r3, r2
 8003b42:	009b      	lsls	r3, r3, #2
 8003b44:	440b      	add	r3, r1
 8003b46:	3344      	adds	r3, #68	@ 0x44
 8003b48:	2200      	movs	r2, #0
 8003b4a:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003b4c:	78fa      	ldrb	r2, [r7, #3]
 8003b4e:	6879      	ldr	r1, [r7, #4]
 8003b50:	4613      	mov	r3, r2
 8003b52:	011b      	lsls	r3, r3, #4
 8003b54:	1a9b      	subs	r3, r3, r2
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	440b      	add	r3, r1
 8003b5a:	334c      	adds	r3, #76	@ 0x4c
 8003b5c:	2204      	movs	r2, #4
 8003b5e:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003b60:	78fa      	ldrb	r2, [r7, #3]
 8003b62:	6879      	ldr	r1, [r7, #4]
 8003b64:	4613      	mov	r3, r2
 8003b66:	011b      	lsls	r3, r3, #4
 8003b68:	1a9b      	subs	r3, r3, r2
 8003b6a:	009b      	lsls	r3, r3, #2
 8003b6c:	440b      	add	r3, r1
 8003b6e:	334c      	adds	r3, #76	@ 0x4c
 8003b70:	781a      	ldrb	r2, [r3, #0]
 8003b72:	78fb      	ldrb	r3, [r7, #3]
 8003b74:	4619      	mov	r1, r3
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f006 fa08 	bl	8009f8c <HAL_HCD_HC_NotifyURBChange_Callback>
 8003b7c:	e022      	b.n	8003bc4 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003b7e:	78fa      	ldrb	r2, [r7, #3]
 8003b80:	6879      	ldr	r1, [r7, #4]
 8003b82:	4613      	mov	r3, r2
 8003b84:	011b      	lsls	r3, r3, #4
 8003b86:	1a9b      	subs	r3, r3, r2
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	440b      	add	r3, r1
 8003b8c:	334c      	adds	r3, #76	@ 0x4c
 8003b8e:	2202      	movs	r2, #2
 8003b90:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003b92:	78fb      	ldrb	r3, [r7, #3]
 8003b94:	015a      	lsls	r2, r3, #5
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	4413      	add	r3, r2
 8003b9a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003ba8:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003bb0:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003bb2:	78fb      	ldrb	r3, [r7, #3]
 8003bb4:	015a      	lsls	r2, r3, #5
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	4413      	add	r3, r2
 8003bba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003bbe:	461a      	mov	r2, r3
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003bc4:	78fb      	ldrb	r3, [r7, #3]
 8003bc6:	015a      	lsls	r2, r3, #5
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	4413      	add	r3, r2
 8003bcc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	2380      	movs	r3, #128	@ 0x80
 8003bd4:	6093      	str	r3, [r2, #8]
 8003bd6:	e217      	b.n	8004008 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	78fa      	ldrb	r2, [r7, #3]
 8003bde:	4611      	mov	r1, r2
 8003be0:	4618      	mov	r0, r3
 8003be2:	f003 f8d6 	bl	8006d92 <USB_ReadChInterrupts>
 8003be6:	4603      	mov	r3, r0
 8003be8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bf0:	d11b      	bne.n	8003c2a <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003bf2:	78fa      	ldrb	r2, [r7, #3]
 8003bf4:	6879      	ldr	r1, [r7, #4]
 8003bf6:	4613      	mov	r3, r2
 8003bf8:	011b      	lsls	r3, r3, #4
 8003bfa:	1a9b      	subs	r3, r3, r2
 8003bfc:	009b      	lsls	r3, r3, #2
 8003bfe:	440b      	add	r3, r1
 8003c00:	334d      	adds	r3, #77	@ 0x4d
 8003c02:	2209      	movs	r2, #9
 8003c04:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	78fa      	ldrb	r2, [r7, #3]
 8003c0c:	4611      	mov	r1, r2
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f003 fe63 	bl	80078da <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003c14:	78fb      	ldrb	r3, [r7, #3]
 8003c16:	015a      	lsls	r2, r3, #5
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	4413      	add	r3, r2
 8003c1c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c20:	461a      	mov	r2, r3
 8003c22:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003c26:	6093      	str	r3, [r2, #8]
 8003c28:	e1ee      	b.n	8004008 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	78fa      	ldrb	r2, [r7, #3]
 8003c30:	4611      	mov	r1, r2
 8003c32:	4618      	mov	r0, r3
 8003c34:	f003 f8ad 	bl	8006d92 <USB_ReadChInterrupts>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	f003 0302 	and.w	r3, r3, #2
 8003c3e:	2b02      	cmp	r3, #2
 8003c40:	f040 81df 	bne.w	8004002 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003c44:	78fb      	ldrb	r3, [r7, #3]
 8003c46:	015a      	lsls	r2, r3, #5
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	4413      	add	r3, r2
 8003c4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c50:	461a      	mov	r2, r3
 8003c52:	2302      	movs	r3, #2
 8003c54:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003c56:	78fa      	ldrb	r2, [r7, #3]
 8003c58:	6879      	ldr	r1, [r7, #4]
 8003c5a:	4613      	mov	r3, r2
 8003c5c:	011b      	lsls	r3, r3, #4
 8003c5e:	1a9b      	subs	r3, r3, r2
 8003c60:	009b      	lsls	r3, r3, #2
 8003c62:	440b      	add	r3, r1
 8003c64:	334d      	adds	r3, #77	@ 0x4d
 8003c66:	781b      	ldrb	r3, [r3, #0]
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	f040 8093 	bne.w	8003d94 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003c6e:	78fa      	ldrb	r2, [r7, #3]
 8003c70:	6879      	ldr	r1, [r7, #4]
 8003c72:	4613      	mov	r3, r2
 8003c74:	011b      	lsls	r3, r3, #4
 8003c76:	1a9b      	subs	r3, r3, r2
 8003c78:	009b      	lsls	r3, r3, #2
 8003c7a:	440b      	add	r3, r1
 8003c7c:	334d      	adds	r3, #77	@ 0x4d
 8003c7e:	2202      	movs	r2, #2
 8003c80:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003c82:	78fa      	ldrb	r2, [r7, #3]
 8003c84:	6879      	ldr	r1, [r7, #4]
 8003c86:	4613      	mov	r3, r2
 8003c88:	011b      	lsls	r3, r3, #4
 8003c8a:	1a9b      	subs	r3, r3, r2
 8003c8c:	009b      	lsls	r3, r3, #2
 8003c8e:	440b      	add	r3, r1
 8003c90:	334c      	adds	r3, #76	@ 0x4c
 8003c92:	2201      	movs	r2, #1
 8003c94:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003c96:	78fa      	ldrb	r2, [r7, #3]
 8003c98:	6879      	ldr	r1, [r7, #4]
 8003c9a:	4613      	mov	r3, r2
 8003c9c:	011b      	lsls	r3, r3, #4
 8003c9e:	1a9b      	subs	r3, r3, r2
 8003ca0:	009b      	lsls	r3, r3, #2
 8003ca2:	440b      	add	r3, r1
 8003ca4:	3326      	adds	r3, #38	@ 0x26
 8003ca6:	781b      	ldrb	r3, [r3, #0]
 8003ca8:	2b02      	cmp	r3, #2
 8003caa:	d00b      	beq.n	8003cc4 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8003cac:	78fa      	ldrb	r2, [r7, #3]
 8003cae:	6879      	ldr	r1, [r7, #4]
 8003cb0:	4613      	mov	r3, r2
 8003cb2:	011b      	lsls	r3, r3, #4
 8003cb4:	1a9b      	subs	r3, r3, r2
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	440b      	add	r3, r1
 8003cba:	3326      	adds	r3, #38	@ 0x26
 8003cbc:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003cbe:	2b03      	cmp	r3, #3
 8003cc0:	f040 8190 	bne.w	8003fe4 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	799b      	ldrb	r3, [r3, #6]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d115      	bne.n	8003cf8 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8003ccc:	78fa      	ldrb	r2, [r7, #3]
 8003cce:	6879      	ldr	r1, [r7, #4]
 8003cd0:	4613      	mov	r3, r2
 8003cd2:	011b      	lsls	r3, r3, #4
 8003cd4:	1a9b      	subs	r3, r3, r2
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	440b      	add	r3, r1
 8003cda:	333d      	adds	r3, #61	@ 0x3d
 8003cdc:	781b      	ldrb	r3, [r3, #0]
 8003cde:	78fa      	ldrb	r2, [r7, #3]
 8003ce0:	f083 0301 	eor.w	r3, r3, #1
 8003ce4:	b2d8      	uxtb	r0, r3
 8003ce6:	6879      	ldr	r1, [r7, #4]
 8003ce8:	4613      	mov	r3, r2
 8003cea:	011b      	lsls	r3, r3, #4
 8003cec:	1a9b      	subs	r3, r3, r2
 8003cee:	009b      	lsls	r3, r3, #2
 8003cf0:	440b      	add	r3, r1
 8003cf2:	333d      	adds	r3, #61	@ 0x3d
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	799b      	ldrb	r3, [r3, #6]
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	f040 8171 	bne.w	8003fe4 <HCD_HC_OUT_IRQHandler+0x954>
 8003d02:	78fa      	ldrb	r2, [r7, #3]
 8003d04:	6879      	ldr	r1, [r7, #4]
 8003d06:	4613      	mov	r3, r2
 8003d08:	011b      	lsls	r3, r3, #4
 8003d0a:	1a9b      	subs	r3, r3, r2
 8003d0c:	009b      	lsls	r3, r3, #2
 8003d0e:	440b      	add	r3, r1
 8003d10:	3334      	adds	r3, #52	@ 0x34
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	f000 8165 	beq.w	8003fe4 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8003d1a:	78fa      	ldrb	r2, [r7, #3]
 8003d1c:	6879      	ldr	r1, [r7, #4]
 8003d1e:	4613      	mov	r3, r2
 8003d20:	011b      	lsls	r3, r3, #4
 8003d22:	1a9b      	subs	r3, r3, r2
 8003d24:	009b      	lsls	r3, r3, #2
 8003d26:	440b      	add	r3, r1
 8003d28:	3334      	adds	r3, #52	@ 0x34
 8003d2a:	6819      	ldr	r1, [r3, #0]
 8003d2c:	78fa      	ldrb	r2, [r7, #3]
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	4613      	mov	r3, r2
 8003d32:	011b      	lsls	r3, r3, #4
 8003d34:	1a9b      	subs	r3, r3, r2
 8003d36:	009b      	lsls	r3, r3, #2
 8003d38:	4403      	add	r3, r0
 8003d3a:	3328      	adds	r3, #40	@ 0x28
 8003d3c:	881b      	ldrh	r3, [r3, #0]
 8003d3e:	440b      	add	r3, r1
 8003d40:	1e59      	subs	r1, r3, #1
 8003d42:	78fa      	ldrb	r2, [r7, #3]
 8003d44:	6878      	ldr	r0, [r7, #4]
 8003d46:	4613      	mov	r3, r2
 8003d48:	011b      	lsls	r3, r3, #4
 8003d4a:	1a9b      	subs	r3, r3, r2
 8003d4c:	009b      	lsls	r3, r3, #2
 8003d4e:	4403      	add	r3, r0
 8003d50:	3328      	adds	r3, #40	@ 0x28
 8003d52:	881b      	ldrh	r3, [r3, #0]
 8003d54:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d58:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	f003 0301 	and.w	r3, r3, #1
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	f000 813f 	beq.w	8003fe4 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8003d66:	78fa      	ldrb	r2, [r7, #3]
 8003d68:	6879      	ldr	r1, [r7, #4]
 8003d6a:	4613      	mov	r3, r2
 8003d6c:	011b      	lsls	r3, r3, #4
 8003d6e:	1a9b      	subs	r3, r3, r2
 8003d70:	009b      	lsls	r3, r3, #2
 8003d72:	440b      	add	r3, r1
 8003d74:	333d      	adds	r3, #61	@ 0x3d
 8003d76:	781b      	ldrb	r3, [r3, #0]
 8003d78:	78fa      	ldrb	r2, [r7, #3]
 8003d7a:	f083 0301 	eor.w	r3, r3, #1
 8003d7e:	b2d8      	uxtb	r0, r3
 8003d80:	6879      	ldr	r1, [r7, #4]
 8003d82:	4613      	mov	r3, r2
 8003d84:	011b      	lsls	r3, r3, #4
 8003d86:	1a9b      	subs	r3, r3, r2
 8003d88:	009b      	lsls	r3, r3, #2
 8003d8a:	440b      	add	r3, r1
 8003d8c:	333d      	adds	r3, #61	@ 0x3d
 8003d8e:	4602      	mov	r2, r0
 8003d90:	701a      	strb	r2, [r3, #0]
 8003d92:	e127      	b.n	8003fe4 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003d94:	78fa      	ldrb	r2, [r7, #3]
 8003d96:	6879      	ldr	r1, [r7, #4]
 8003d98:	4613      	mov	r3, r2
 8003d9a:	011b      	lsls	r3, r3, #4
 8003d9c:	1a9b      	subs	r3, r3, r2
 8003d9e:	009b      	lsls	r3, r3, #2
 8003da0:	440b      	add	r3, r1
 8003da2:	334d      	adds	r3, #77	@ 0x4d
 8003da4:	781b      	ldrb	r3, [r3, #0]
 8003da6:	2b03      	cmp	r3, #3
 8003da8:	d120      	bne.n	8003dec <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003daa:	78fa      	ldrb	r2, [r7, #3]
 8003dac:	6879      	ldr	r1, [r7, #4]
 8003dae:	4613      	mov	r3, r2
 8003db0:	011b      	lsls	r3, r3, #4
 8003db2:	1a9b      	subs	r3, r3, r2
 8003db4:	009b      	lsls	r3, r3, #2
 8003db6:	440b      	add	r3, r1
 8003db8:	334d      	adds	r3, #77	@ 0x4d
 8003dba:	2202      	movs	r2, #2
 8003dbc:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003dbe:	78fa      	ldrb	r2, [r7, #3]
 8003dc0:	6879      	ldr	r1, [r7, #4]
 8003dc2:	4613      	mov	r3, r2
 8003dc4:	011b      	lsls	r3, r3, #4
 8003dc6:	1a9b      	subs	r3, r3, r2
 8003dc8:	009b      	lsls	r3, r3, #2
 8003dca:	440b      	add	r3, r1
 8003dcc:	331b      	adds	r3, #27
 8003dce:	781b      	ldrb	r3, [r3, #0]
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	f040 8107 	bne.w	8003fe4 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003dd6:	78fa      	ldrb	r2, [r7, #3]
 8003dd8:	6879      	ldr	r1, [r7, #4]
 8003dda:	4613      	mov	r3, r2
 8003ddc:	011b      	lsls	r3, r3, #4
 8003dde:	1a9b      	subs	r3, r3, r2
 8003de0:	009b      	lsls	r3, r3, #2
 8003de2:	440b      	add	r3, r1
 8003de4:	334c      	adds	r3, #76	@ 0x4c
 8003de6:	2202      	movs	r2, #2
 8003de8:	701a      	strb	r2, [r3, #0]
 8003dea:	e0fb      	b.n	8003fe4 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003dec:	78fa      	ldrb	r2, [r7, #3]
 8003dee:	6879      	ldr	r1, [r7, #4]
 8003df0:	4613      	mov	r3, r2
 8003df2:	011b      	lsls	r3, r3, #4
 8003df4:	1a9b      	subs	r3, r3, r2
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	440b      	add	r3, r1
 8003dfa:	334d      	adds	r3, #77	@ 0x4d
 8003dfc:	781b      	ldrb	r3, [r3, #0]
 8003dfe:	2b04      	cmp	r3, #4
 8003e00:	d13a      	bne.n	8003e78 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003e02:	78fa      	ldrb	r2, [r7, #3]
 8003e04:	6879      	ldr	r1, [r7, #4]
 8003e06:	4613      	mov	r3, r2
 8003e08:	011b      	lsls	r3, r3, #4
 8003e0a:	1a9b      	subs	r3, r3, r2
 8003e0c:	009b      	lsls	r3, r3, #2
 8003e0e:	440b      	add	r3, r1
 8003e10:	334d      	adds	r3, #77	@ 0x4d
 8003e12:	2202      	movs	r2, #2
 8003e14:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003e16:	78fa      	ldrb	r2, [r7, #3]
 8003e18:	6879      	ldr	r1, [r7, #4]
 8003e1a:	4613      	mov	r3, r2
 8003e1c:	011b      	lsls	r3, r3, #4
 8003e1e:	1a9b      	subs	r3, r3, r2
 8003e20:	009b      	lsls	r3, r3, #2
 8003e22:	440b      	add	r3, r1
 8003e24:	334c      	adds	r3, #76	@ 0x4c
 8003e26:	2202      	movs	r2, #2
 8003e28:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003e2a:	78fa      	ldrb	r2, [r7, #3]
 8003e2c:	6879      	ldr	r1, [r7, #4]
 8003e2e:	4613      	mov	r3, r2
 8003e30:	011b      	lsls	r3, r3, #4
 8003e32:	1a9b      	subs	r3, r3, r2
 8003e34:	009b      	lsls	r3, r3, #2
 8003e36:	440b      	add	r3, r1
 8003e38:	331b      	adds	r3, #27
 8003e3a:	781b      	ldrb	r3, [r3, #0]
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	f040 80d1 	bne.w	8003fe4 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8003e42:	78fa      	ldrb	r2, [r7, #3]
 8003e44:	6879      	ldr	r1, [r7, #4]
 8003e46:	4613      	mov	r3, r2
 8003e48:	011b      	lsls	r3, r3, #4
 8003e4a:	1a9b      	subs	r3, r3, r2
 8003e4c:	009b      	lsls	r3, r3, #2
 8003e4e:	440b      	add	r3, r1
 8003e50:	331b      	adds	r3, #27
 8003e52:	2200      	movs	r2, #0
 8003e54:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003e56:	78fb      	ldrb	r3, [r7, #3]
 8003e58:	015a      	lsls	r2, r3, #5
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	4413      	add	r3, r2
 8003e5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	78fa      	ldrb	r2, [r7, #3]
 8003e66:	0151      	lsls	r1, r2, #5
 8003e68:	693a      	ldr	r2, [r7, #16]
 8003e6a:	440a      	add	r2, r1
 8003e6c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003e70:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e74:	6053      	str	r3, [r2, #4]
 8003e76:	e0b5      	b.n	8003fe4 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003e78:	78fa      	ldrb	r2, [r7, #3]
 8003e7a:	6879      	ldr	r1, [r7, #4]
 8003e7c:	4613      	mov	r3, r2
 8003e7e:	011b      	lsls	r3, r3, #4
 8003e80:	1a9b      	subs	r3, r3, r2
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	440b      	add	r3, r1
 8003e86:	334d      	adds	r3, #77	@ 0x4d
 8003e88:	781b      	ldrb	r3, [r3, #0]
 8003e8a:	2b05      	cmp	r3, #5
 8003e8c:	d114      	bne.n	8003eb8 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003e8e:	78fa      	ldrb	r2, [r7, #3]
 8003e90:	6879      	ldr	r1, [r7, #4]
 8003e92:	4613      	mov	r3, r2
 8003e94:	011b      	lsls	r3, r3, #4
 8003e96:	1a9b      	subs	r3, r3, r2
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	440b      	add	r3, r1
 8003e9c:	334d      	adds	r3, #77	@ 0x4d
 8003e9e:	2202      	movs	r2, #2
 8003ea0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8003ea2:	78fa      	ldrb	r2, [r7, #3]
 8003ea4:	6879      	ldr	r1, [r7, #4]
 8003ea6:	4613      	mov	r3, r2
 8003ea8:	011b      	lsls	r3, r3, #4
 8003eaa:	1a9b      	subs	r3, r3, r2
 8003eac:	009b      	lsls	r3, r3, #2
 8003eae:	440b      	add	r3, r1
 8003eb0:	334c      	adds	r3, #76	@ 0x4c
 8003eb2:	2202      	movs	r2, #2
 8003eb4:	701a      	strb	r2, [r3, #0]
 8003eb6:	e095      	b.n	8003fe4 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003eb8:	78fa      	ldrb	r2, [r7, #3]
 8003eba:	6879      	ldr	r1, [r7, #4]
 8003ebc:	4613      	mov	r3, r2
 8003ebe:	011b      	lsls	r3, r3, #4
 8003ec0:	1a9b      	subs	r3, r3, r2
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	440b      	add	r3, r1
 8003ec6:	334d      	adds	r3, #77	@ 0x4d
 8003ec8:	781b      	ldrb	r3, [r3, #0]
 8003eca:	2b06      	cmp	r3, #6
 8003ecc:	d114      	bne.n	8003ef8 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003ece:	78fa      	ldrb	r2, [r7, #3]
 8003ed0:	6879      	ldr	r1, [r7, #4]
 8003ed2:	4613      	mov	r3, r2
 8003ed4:	011b      	lsls	r3, r3, #4
 8003ed6:	1a9b      	subs	r3, r3, r2
 8003ed8:	009b      	lsls	r3, r3, #2
 8003eda:	440b      	add	r3, r1
 8003edc:	334d      	adds	r3, #77	@ 0x4d
 8003ede:	2202      	movs	r2, #2
 8003ee0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8003ee2:	78fa      	ldrb	r2, [r7, #3]
 8003ee4:	6879      	ldr	r1, [r7, #4]
 8003ee6:	4613      	mov	r3, r2
 8003ee8:	011b      	lsls	r3, r3, #4
 8003eea:	1a9b      	subs	r3, r3, r2
 8003eec:	009b      	lsls	r3, r3, #2
 8003eee:	440b      	add	r3, r1
 8003ef0:	334c      	adds	r3, #76	@ 0x4c
 8003ef2:	2205      	movs	r2, #5
 8003ef4:	701a      	strb	r2, [r3, #0]
 8003ef6:	e075      	b.n	8003fe4 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003ef8:	78fa      	ldrb	r2, [r7, #3]
 8003efa:	6879      	ldr	r1, [r7, #4]
 8003efc:	4613      	mov	r3, r2
 8003efe:	011b      	lsls	r3, r3, #4
 8003f00:	1a9b      	subs	r3, r3, r2
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	440b      	add	r3, r1
 8003f06:	334d      	adds	r3, #77	@ 0x4d
 8003f08:	781b      	ldrb	r3, [r3, #0]
 8003f0a:	2b07      	cmp	r3, #7
 8003f0c:	d00a      	beq.n	8003f24 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003f0e:	78fa      	ldrb	r2, [r7, #3]
 8003f10:	6879      	ldr	r1, [r7, #4]
 8003f12:	4613      	mov	r3, r2
 8003f14:	011b      	lsls	r3, r3, #4
 8003f16:	1a9b      	subs	r3, r3, r2
 8003f18:	009b      	lsls	r3, r3, #2
 8003f1a:	440b      	add	r3, r1
 8003f1c:	334d      	adds	r3, #77	@ 0x4d
 8003f1e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003f20:	2b09      	cmp	r3, #9
 8003f22:	d170      	bne.n	8004006 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003f24:	78fa      	ldrb	r2, [r7, #3]
 8003f26:	6879      	ldr	r1, [r7, #4]
 8003f28:	4613      	mov	r3, r2
 8003f2a:	011b      	lsls	r3, r3, #4
 8003f2c:	1a9b      	subs	r3, r3, r2
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	440b      	add	r3, r1
 8003f32:	334d      	adds	r3, #77	@ 0x4d
 8003f34:	2202      	movs	r2, #2
 8003f36:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003f38:	78fa      	ldrb	r2, [r7, #3]
 8003f3a:	6879      	ldr	r1, [r7, #4]
 8003f3c:	4613      	mov	r3, r2
 8003f3e:	011b      	lsls	r3, r3, #4
 8003f40:	1a9b      	subs	r3, r3, r2
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	440b      	add	r3, r1
 8003f46:	3344      	adds	r3, #68	@ 0x44
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	1c59      	adds	r1, r3, #1
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	4613      	mov	r3, r2
 8003f50:	011b      	lsls	r3, r3, #4
 8003f52:	1a9b      	subs	r3, r3, r2
 8003f54:	009b      	lsls	r3, r3, #2
 8003f56:	4403      	add	r3, r0
 8003f58:	3344      	adds	r3, #68	@ 0x44
 8003f5a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003f5c:	78fa      	ldrb	r2, [r7, #3]
 8003f5e:	6879      	ldr	r1, [r7, #4]
 8003f60:	4613      	mov	r3, r2
 8003f62:	011b      	lsls	r3, r3, #4
 8003f64:	1a9b      	subs	r3, r3, r2
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	440b      	add	r3, r1
 8003f6a:	3344      	adds	r3, #68	@ 0x44
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	2b02      	cmp	r3, #2
 8003f70:	d914      	bls.n	8003f9c <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003f72:	78fa      	ldrb	r2, [r7, #3]
 8003f74:	6879      	ldr	r1, [r7, #4]
 8003f76:	4613      	mov	r3, r2
 8003f78:	011b      	lsls	r3, r3, #4
 8003f7a:	1a9b      	subs	r3, r3, r2
 8003f7c:	009b      	lsls	r3, r3, #2
 8003f7e:	440b      	add	r3, r1
 8003f80:	3344      	adds	r3, #68	@ 0x44
 8003f82:	2200      	movs	r2, #0
 8003f84:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003f86:	78fa      	ldrb	r2, [r7, #3]
 8003f88:	6879      	ldr	r1, [r7, #4]
 8003f8a:	4613      	mov	r3, r2
 8003f8c:	011b      	lsls	r3, r3, #4
 8003f8e:	1a9b      	subs	r3, r3, r2
 8003f90:	009b      	lsls	r3, r3, #2
 8003f92:	440b      	add	r3, r1
 8003f94:	334c      	adds	r3, #76	@ 0x4c
 8003f96:	2204      	movs	r2, #4
 8003f98:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003f9a:	e022      	b.n	8003fe2 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003f9c:	78fa      	ldrb	r2, [r7, #3]
 8003f9e:	6879      	ldr	r1, [r7, #4]
 8003fa0:	4613      	mov	r3, r2
 8003fa2:	011b      	lsls	r3, r3, #4
 8003fa4:	1a9b      	subs	r3, r3, r2
 8003fa6:	009b      	lsls	r3, r3, #2
 8003fa8:	440b      	add	r3, r1
 8003faa:	334c      	adds	r3, #76	@ 0x4c
 8003fac:	2202      	movs	r2, #2
 8003fae:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003fb0:	78fb      	ldrb	r3, [r7, #3]
 8003fb2:	015a      	lsls	r2, r3, #5
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	4413      	add	r3, r2
 8003fb8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003fc6:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003fce:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003fd0:	78fb      	ldrb	r3, [r7, #3]
 8003fd2:	015a      	lsls	r2, r3, #5
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	4413      	add	r3, r2
 8003fd8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003fdc:	461a      	mov	r2, r3
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003fe2:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003fe4:	78fa      	ldrb	r2, [r7, #3]
 8003fe6:	6879      	ldr	r1, [r7, #4]
 8003fe8:	4613      	mov	r3, r2
 8003fea:	011b      	lsls	r3, r3, #4
 8003fec:	1a9b      	subs	r3, r3, r2
 8003fee:	009b      	lsls	r3, r3, #2
 8003ff0:	440b      	add	r3, r1
 8003ff2:	334c      	adds	r3, #76	@ 0x4c
 8003ff4:	781a      	ldrb	r2, [r3, #0]
 8003ff6:	78fb      	ldrb	r3, [r7, #3]
 8003ff8:	4619      	mov	r1, r3
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f005 ffc6 	bl	8009f8c <HAL_HCD_HC_NotifyURBChange_Callback>
 8004000:	e002      	b.n	8004008 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8004002:	bf00      	nop
 8004004:	e000      	b.n	8004008 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8004006:	bf00      	nop
  }
}
 8004008:	3718      	adds	r7, #24
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}

0800400e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800400e:	b580      	push	{r7, lr}
 8004010:	b08a      	sub	sp, #40	@ 0x28
 8004012:	af00      	add	r7, sp, #0
 8004014:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800401c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800401e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	6a1b      	ldr	r3, [r3, #32]
 8004026:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004028:	69fb      	ldr	r3, [r7, #28]
 800402a:	f003 030f 	and.w	r3, r3, #15
 800402e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004030:	69fb      	ldr	r3, [r7, #28]
 8004032:	0c5b      	lsrs	r3, r3, #17
 8004034:	f003 030f 	and.w	r3, r3, #15
 8004038:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800403a:	69fb      	ldr	r3, [r7, #28]
 800403c:	091b      	lsrs	r3, r3, #4
 800403e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004042:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	2b02      	cmp	r3, #2
 8004048:	d004      	beq.n	8004054 <HCD_RXQLVL_IRQHandler+0x46>
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	2b05      	cmp	r3, #5
 800404e:	f000 80b6 	beq.w	80041be <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004052:	e0b7      	b.n	80041c4 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	2b00      	cmp	r3, #0
 8004058:	f000 80b3 	beq.w	80041c2 <HCD_RXQLVL_IRQHandler+0x1b4>
 800405c:	6879      	ldr	r1, [r7, #4]
 800405e:	69ba      	ldr	r2, [r7, #24]
 8004060:	4613      	mov	r3, r2
 8004062:	011b      	lsls	r3, r3, #4
 8004064:	1a9b      	subs	r3, r3, r2
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	440b      	add	r3, r1
 800406a:	332c      	adds	r3, #44	@ 0x2c
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	2b00      	cmp	r3, #0
 8004070:	f000 80a7 	beq.w	80041c2 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8004074:	6879      	ldr	r1, [r7, #4]
 8004076:	69ba      	ldr	r2, [r7, #24]
 8004078:	4613      	mov	r3, r2
 800407a:	011b      	lsls	r3, r3, #4
 800407c:	1a9b      	subs	r3, r3, r2
 800407e:	009b      	lsls	r3, r3, #2
 8004080:	440b      	add	r3, r1
 8004082:	3338      	adds	r3, #56	@ 0x38
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	18d1      	adds	r1, r2, r3
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	69ba      	ldr	r2, [r7, #24]
 800408e:	4613      	mov	r3, r2
 8004090:	011b      	lsls	r3, r3, #4
 8004092:	1a9b      	subs	r3, r3, r2
 8004094:	009b      	lsls	r3, r3, #2
 8004096:	4403      	add	r3, r0
 8004098:	3334      	adds	r3, #52	@ 0x34
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4299      	cmp	r1, r3
 800409e:	f200 8083 	bhi.w	80041a8 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6818      	ldr	r0, [r3, #0]
 80040a6:	6879      	ldr	r1, [r7, #4]
 80040a8:	69ba      	ldr	r2, [r7, #24]
 80040aa:	4613      	mov	r3, r2
 80040ac:	011b      	lsls	r3, r3, #4
 80040ae:	1a9b      	subs	r3, r3, r2
 80040b0:	009b      	lsls	r3, r3, #2
 80040b2:	440b      	add	r3, r1
 80040b4:	332c      	adds	r3, #44	@ 0x2c
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	693a      	ldr	r2, [r7, #16]
 80040ba:	b292      	uxth	r2, r2
 80040bc:	4619      	mov	r1, r3
 80040be:	f002 fdfd 	bl	8006cbc <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80040c2:	6879      	ldr	r1, [r7, #4]
 80040c4:	69ba      	ldr	r2, [r7, #24]
 80040c6:	4613      	mov	r3, r2
 80040c8:	011b      	lsls	r3, r3, #4
 80040ca:	1a9b      	subs	r3, r3, r2
 80040cc:	009b      	lsls	r3, r3, #2
 80040ce:	440b      	add	r3, r1
 80040d0:	332c      	adds	r3, #44	@ 0x2c
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	18d1      	adds	r1, r2, r3
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	69ba      	ldr	r2, [r7, #24]
 80040dc:	4613      	mov	r3, r2
 80040de:	011b      	lsls	r3, r3, #4
 80040e0:	1a9b      	subs	r3, r3, r2
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	4403      	add	r3, r0
 80040e6:	332c      	adds	r3, #44	@ 0x2c
 80040e8:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 80040ea:	6879      	ldr	r1, [r7, #4]
 80040ec:	69ba      	ldr	r2, [r7, #24]
 80040ee:	4613      	mov	r3, r2
 80040f0:	011b      	lsls	r3, r3, #4
 80040f2:	1a9b      	subs	r3, r3, r2
 80040f4:	009b      	lsls	r3, r3, #2
 80040f6:	440b      	add	r3, r1
 80040f8:	3338      	adds	r3, #56	@ 0x38
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	18d1      	adds	r1, r2, r3
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	69ba      	ldr	r2, [r7, #24]
 8004104:	4613      	mov	r3, r2
 8004106:	011b      	lsls	r3, r3, #4
 8004108:	1a9b      	subs	r3, r3, r2
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	4403      	add	r3, r0
 800410e:	3338      	adds	r3, #56	@ 0x38
 8004110:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004112:	69bb      	ldr	r3, [r7, #24]
 8004114:	015a      	lsls	r2, r3, #5
 8004116:	6a3b      	ldr	r3, [r7, #32]
 8004118:	4413      	add	r3, r2
 800411a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800411e:	691b      	ldr	r3, [r3, #16]
 8004120:	0cdb      	lsrs	r3, r3, #19
 8004122:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004126:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004128:	6879      	ldr	r1, [r7, #4]
 800412a:	69ba      	ldr	r2, [r7, #24]
 800412c:	4613      	mov	r3, r2
 800412e:	011b      	lsls	r3, r3, #4
 8004130:	1a9b      	subs	r3, r3, r2
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	440b      	add	r3, r1
 8004136:	3328      	adds	r3, #40	@ 0x28
 8004138:	881b      	ldrh	r3, [r3, #0]
 800413a:	461a      	mov	r2, r3
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	4293      	cmp	r3, r2
 8004140:	d13f      	bne.n	80041c2 <HCD_RXQLVL_IRQHandler+0x1b4>
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d03c      	beq.n	80041c2 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8004148:	69bb      	ldr	r3, [r7, #24]
 800414a:	015a      	lsls	r2, r3, #5
 800414c:	6a3b      	ldr	r3, [r7, #32]
 800414e:	4413      	add	r3, r2
 8004150:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800415e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004166:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8004168:	69bb      	ldr	r3, [r7, #24]
 800416a:	015a      	lsls	r2, r3, #5
 800416c:	6a3b      	ldr	r3, [r7, #32]
 800416e:	4413      	add	r3, r2
 8004170:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004174:	461a      	mov	r2, r3
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 800417a:	6879      	ldr	r1, [r7, #4]
 800417c:	69ba      	ldr	r2, [r7, #24]
 800417e:	4613      	mov	r3, r2
 8004180:	011b      	lsls	r3, r3, #4
 8004182:	1a9b      	subs	r3, r3, r2
 8004184:	009b      	lsls	r3, r3, #2
 8004186:	440b      	add	r3, r1
 8004188:	333c      	adds	r3, #60	@ 0x3c
 800418a:	781b      	ldrb	r3, [r3, #0]
 800418c:	f083 0301 	eor.w	r3, r3, #1
 8004190:	b2d8      	uxtb	r0, r3
 8004192:	6879      	ldr	r1, [r7, #4]
 8004194:	69ba      	ldr	r2, [r7, #24]
 8004196:	4613      	mov	r3, r2
 8004198:	011b      	lsls	r3, r3, #4
 800419a:	1a9b      	subs	r3, r3, r2
 800419c:	009b      	lsls	r3, r3, #2
 800419e:	440b      	add	r3, r1
 80041a0:	333c      	adds	r3, #60	@ 0x3c
 80041a2:	4602      	mov	r2, r0
 80041a4:	701a      	strb	r2, [r3, #0]
      break;
 80041a6:	e00c      	b.n	80041c2 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80041a8:	6879      	ldr	r1, [r7, #4]
 80041aa:	69ba      	ldr	r2, [r7, #24]
 80041ac:	4613      	mov	r3, r2
 80041ae:	011b      	lsls	r3, r3, #4
 80041b0:	1a9b      	subs	r3, r3, r2
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	440b      	add	r3, r1
 80041b6:	334c      	adds	r3, #76	@ 0x4c
 80041b8:	2204      	movs	r2, #4
 80041ba:	701a      	strb	r2, [r3, #0]
      break;
 80041bc:	e001      	b.n	80041c2 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80041be:	bf00      	nop
 80041c0:	e000      	b.n	80041c4 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 80041c2:	bf00      	nop
  }
}
 80041c4:	bf00      	nop
 80041c6:	3728      	adds	r7, #40	@ 0x28
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}

080041cc <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b086      	sub	sp, #24
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80041f8:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	f003 0302 	and.w	r3, r3, #2
 8004200:	2b02      	cmp	r3, #2
 8004202:	d10b      	bne.n	800421c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f003 0301 	and.w	r3, r3, #1
 800420a:	2b01      	cmp	r3, #1
 800420c:	d102      	bne.n	8004214 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f005 fea0 	bl	8009f54 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	f043 0302 	orr.w	r3, r3, #2
 800421a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f003 0308 	and.w	r3, r3, #8
 8004222:	2b08      	cmp	r3, #8
 8004224:	d132      	bne.n	800428c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	f043 0308 	orr.w	r3, r3, #8
 800422c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	f003 0304 	and.w	r3, r3, #4
 8004234:	2b04      	cmp	r3, #4
 8004236:	d126      	bne.n	8004286 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	7a5b      	ldrb	r3, [r3, #9]
 800423c:	2b02      	cmp	r3, #2
 800423e:	d113      	bne.n	8004268 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8004246:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800424a:	d106      	bne.n	800425a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	2102      	movs	r1, #2
 8004252:	4618      	mov	r0, r3
 8004254:	f002 fec2 	bl	8006fdc <USB_InitFSLSPClkSel>
 8004258:	e011      	b.n	800427e <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	2101      	movs	r1, #1
 8004260:	4618      	mov	r0, r3
 8004262:	f002 febb 	bl	8006fdc <USB_InitFSLSPClkSel>
 8004266:	e00a      	b.n	800427e <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	79db      	ldrb	r3, [r3, #7]
 800426c:	2b01      	cmp	r3, #1
 800426e:	d106      	bne.n	800427e <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004276:	461a      	mov	r2, r3
 8004278:	f64e 2360 	movw	r3, #60000	@ 0xea60
 800427c:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f005 fe92 	bl	8009fa8 <HAL_HCD_PortEnabled_Callback>
 8004284:	e002      	b.n	800428c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f005 fe9c 	bl	8009fc4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	f003 0320 	and.w	r3, r3, #32
 8004292:	2b20      	cmp	r3, #32
 8004294:	d103      	bne.n	800429e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	f043 0320 	orr.w	r3, r3, #32
 800429c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80042a4:	461a      	mov	r2, r3
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	6013      	str	r3, [r2, #0]
}
 80042aa:	bf00      	nop
 80042ac:	3718      	adds	r7, #24
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}
	...

080042b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b084      	sub	sp, #16
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d101      	bne.n	80042c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e12b      	b.n	800451e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d106      	bne.n	80042e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2200      	movs	r2, #0
 80042d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f7fd f8c8 	bl	8001470 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2224      	movs	r2, #36	@ 0x24
 80042e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f022 0201 	bic.w	r2, r2, #1
 80042f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004306:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004316:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004318:	f001 fa20 	bl	800575c <HAL_RCC_GetPCLK1Freq>
 800431c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	4a81      	ldr	r2, [pc, #516]	@ (8004528 <HAL_I2C_Init+0x274>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d807      	bhi.n	8004338 <HAL_I2C_Init+0x84>
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	4a80      	ldr	r2, [pc, #512]	@ (800452c <HAL_I2C_Init+0x278>)
 800432c:	4293      	cmp	r3, r2
 800432e:	bf94      	ite	ls
 8004330:	2301      	movls	r3, #1
 8004332:	2300      	movhi	r3, #0
 8004334:	b2db      	uxtb	r3, r3
 8004336:	e006      	b.n	8004346 <HAL_I2C_Init+0x92>
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	4a7d      	ldr	r2, [pc, #500]	@ (8004530 <HAL_I2C_Init+0x27c>)
 800433c:	4293      	cmp	r3, r2
 800433e:	bf94      	ite	ls
 8004340:	2301      	movls	r3, #1
 8004342:	2300      	movhi	r3, #0
 8004344:	b2db      	uxtb	r3, r3
 8004346:	2b00      	cmp	r3, #0
 8004348:	d001      	beq.n	800434e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	e0e7      	b.n	800451e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	4a78      	ldr	r2, [pc, #480]	@ (8004534 <HAL_I2C_Init+0x280>)
 8004352:	fba2 2303 	umull	r2, r3, r2, r3
 8004356:	0c9b      	lsrs	r3, r3, #18
 8004358:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	68ba      	ldr	r2, [r7, #8]
 800436a:	430a      	orrs	r2, r1
 800436c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	6a1b      	ldr	r3, [r3, #32]
 8004374:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	4a6a      	ldr	r2, [pc, #424]	@ (8004528 <HAL_I2C_Init+0x274>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d802      	bhi.n	8004388 <HAL_I2C_Init+0xd4>
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	3301      	adds	r3, #1
 8004386:	e009      	b.n	800439c <HAL_I2C_Init+0xe8>
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800438e:	fb02 f303 	mul.w	r3, r2, r3
 8004392:	4a69      	ldr	r2, [pc, #420]	@ (8004538 <HAL_I2C_Init+0x284>)
 8004394:	fba2 2303 	umull	r2, r3, r2, r3
 8004398:	099b      	lsrs	r3, r3, #6
 800439a:	3301      	adds	r3, #1
 800439c:	687a      	ldr	r2, [r7, #4]
 800439e:	6812      	ldr	r2, [r2, #0]
 80043a0:	430b      	orrs	r3, r1
 80043a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	69db      	ldr	r3, [r3, #28]
 80043aa:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80043ae:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	495c      	ldr	r1, [pc, #368]	@ (8004528 <HAL_I2C_Init+0x274>)
 80043b8:	428b      	cmp	r3, r1
 80043ba:	d819      	bhi.n	80043f0 <HAL_I2C_Init+0x13c>
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	1e59      	subs	r1, r3, #1
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	005b      	lsls	r3, r3, #1
 80043c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80043ca:	1c59      	adds	r1, r3, #1
 80043cc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80043d0:	400b      	ands	r3, r1
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d00a      	beq.n	80043ec <HAL_I2C_Init+0x138>
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	1e59      	subs	r1, r3, #1
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	005b      	lsls	r3, r3, #1
 80043e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80043e4:	3301      	adds	r3, #1
 80043e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043ea:	e051      	b.n	8004490 <HAL_I2C_Init+0x1dc>
 80043ec:	2304      	movs	r3, #4
 80043ee:	e04f      	b.n	8004490 <HAL_I2C_Init+0x1dc>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d111      	bne.n	800441c <HAL_I2C_Init+0x168>
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	1e58      	subs	r0, r3, #1
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6859      	ldr	r1, [r3, #4]
 8004400:	460b      	mov	r3, r1
 8004402:	005b      	lsls	r3, r3, #1
 8004404:	440b      	add	r3, r1
 8004406:	fbb0 f3f3 	udiv	r3, r0, r3
 800440a:	3301      	adds	r3, #1
 800440c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004410:	2b00      	cmp	r3, #0
 8004412:	bf0c      	ite	eq
 8004414:	2301      	moveq	r3, #1
 8004416:	2300      	movne	r3, #0
 8004418:	b2db      	uxtb	r3, r3
 800441a:	e012      	b.n	8004442 <HAL_I2C_Init+0x18e>
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	1e58      	subs	r0, r3, #1
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6859      	ldr	r1, [r3, #4]
 8004424:	460b      	mov	r3, r1
 8004426:	009b      	lsls	r3, r3, #2
 8004428:	440b      	add	r3, r1
 800442a:	0099      	lsls	r1, r3, #2
 800442c:	440b      	add	r3, r1
 800442e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004432:	3301      	adds	r3, #1
 8004434:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004438:	2b00      	cmp	r3, #0
 800443a:	bf0c      	ite	eq
 800443c:	2301      	moveq	r3, #1
 800443e:	2300      	movne	r3, #0
 8004440:	b2db      	uxtb	r3, r3
 8004442:	2b00      	cmp	r3, #0
 8004444:	d001      	beq.n	800444a <HAL_I2C_Init+0x196>
 8004446:	2301      	movs	r3, #1
 8004448:	e022      	b.n	8004490 <HAL_I2C_Init+0x1dc>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d10e      	bne.n	8004470 <HAL_I2C_Init+0x1bc>
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	1e58      	subs	r0, r3, #1
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6859      	ldr	r1, [r3, #4]
 800445a:	460b      	mov	r3, r1
 800445c:	005b      	lsls	r3, r3, #1
 800445e:	440b      	add	r3, r1
 8004460:	fbb0 f3f3 	udiv	r3, r0, r3
 8004464:	3301      	adds	r3, #1
 8004466:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800446a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800446e:	e00f      	b.n	8004490 <HAL_I2C_Init+0x1dc>
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	1e58      	subs	r0, r3, #1
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6859      	ldr	r1, [r3, #4]
 8004478:	460b      	mov	r3, r1
 800447a:	009b      	lsls	r3, r3, #2
 800447c:	440b      	add	r3, r1
 800447e:	0099      	lsls	r1, r3, #2
 8004480:	440b      	add	r3, r1
 8004482:	fbb0 f3f3 	udiv	r3, r0, r3
 8004486:	3301      	adds	r3, #1
 8004488:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800448c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004490:	6879      	ldr	r1, [r7, #4]
 8004492:	6809      	ldr	r1, [r1, #0]
 8004494:	4313      	orrs	r3, r2
 8004496:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	69da      	ldr	r2, [r3, #28]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6a1b      	ldr	r3, [r3, #32]
 80044aa:	431a      	orrs	r2, r3
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	430a      	orrs	r2, r1
 80044b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80044be:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	6911      	ldr	r1, [r2, #16]
 80044c6:	687a      	ldr	r2, [r7, #4]
 80044c8:	68d2      	ldr	r2, [r2, #12]
 80044ca:	4311      	orrs	r1, r2
 80044cc:	687a      	ldr	r2, [r7, #4]
 80044ce:	6812      	ldr	r2, [r2, #0]
 80044d0:	430b      	orrs	r3, r1
 80044d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	68db      	ldr	r3, [r3, #12]
 80044da:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	695a      	ldr	r2, [r3, #20]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	699b      	ldr	r3, [r3, #24]
 80044e6:	431a      	orrs	r2, r3
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	430a      	orrs	r2, r1
 80044ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f042 0201 	orr.w	r2, r2, #1
 80044fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2200      	movs	r2, #0
 8004504:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2220      	movs	r2, #32
 800450a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2200      	movs	r2, #0
 8004512:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2200      	movs	r2, #0
 8004518:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800451c:	2300      	movs	r3, #0
}
 800451e:	4618      	mov	r0, r3
 8004520:	3710      	adds	r7, #16
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}
 8004526:	bf00      	nop
 8004528:	000186a0 	.word	0x000186a0
 800452c:	001e847f 	.word	0x001e847f
 8004530:	003d08ff 	.word	0x003d08ff
 8004534:	431bde83 	.word	0x431bde83
 8004538:	10624dd3 	.word	0x10624dd3

0800453c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b088      	sub	sp, #32
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d101      	bne.n	800454e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	e128      	b.n	80047a0 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004554:	b2db      	uxtb	r3, r3
 8004556:	2b00      	cmp	r3, #0
 8004558:	d109      	bne.n	800456e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2200      	movs	r2, #0
 800455e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	4a90      	ldr	r2, [pc, #576]	@ (80047a8 <HAL_I2S_Init+0x26c>)
 8004566:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f7fc ffc9 	bl	8001500 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2202      	movs	r2, #2
 8004572:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	69db      	ldr	r3, [r3, #28]
 800457c:	687a      	ldr	r2, [r7, #4]
 800457e:	6812      	ldr	r2, [r2, #0]
 8004580:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004584:	f023 030f 	bic.w	r3, r3, #15
 8004588:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	2202      	movs	r2, #2
 8004590:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	695b      	ldr	r3, [r3, #20]
 8004596:	2b02      	cmp	r3, #2
 8004598:	d060      	beq.n	800465c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	68db      	ldr	r3, [r3, #12]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d102      	bne.n	80045a8 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80045a2:	2310      	movs	r3, #16
 80045a4:	617b      	str	r3, [r7, #20]
 80045a6:	e001      	b.n	80045ac <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80045a8:	2320      	movs	r3, #32
 80045aa:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	2b20      	cmp	r3, #32
 80045b2:	d802      	bhi.n	80045ba <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	005b      	lsls	r3, r3, #1
 80045b8:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80045ba:	2001      	movs	r0, #1
 80045bc:	f001 f9d8 	bl	8005970 <HAL_RCCEx_GetPeriphCLKFreq>
 80045c0:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	691b      	ldr	r3, [r3, #16]
 80045c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80045ca:	d125      	bne.n	8004618 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	68db      	ldr	r3, [r3, #12]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d010      	beq.n	80045f6 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	009b      	lsls	r3, r3, #2
 80045d8:	68fa      	ldr	r2, [r7, #12]
 80045da:	fbb2 f2f3 	udiv	r2, r2, r3
 80045de:	4613      	mov	r3, r2
 80045e0:	009b      	lsls	r3, r3, #2
 80045e2:	4413      	add	r3, r2
 80045e4:	005b      	lsls	r3, r3, #1
 80045e6:	461a      	mov	r2, r3
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	695b      	ldr	r3, [r3, #20]
 80045ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80045f0:	3305      	adds	r3, #5
 80045f2:	613b      	str	r3, [r7, #16]
 80045f4:	e01f      	b.n	8004636 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	00db      	lsls	r3, r3, #3
 80045fa:	68fa      	ldr	r2, [r7, #12]
 80045fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8004600:	4613      	mov	r3, r2
 8004602:	009b      	lsls	r3, r3, #2
 8004604:	4413      	add	r3, r2
 8004606:	005b      	lsls	r3, r3, #1
 8004608:	461a      	mov	r2, r3
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	695b      	ldr	r3, [r3, #20]
 800460e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004612:	3305      	adds	r3, #5
 8004614:	613b      	str	r3, [r7, #16]
 8004616:	e00e      	b.n	8004636 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004618:	68fa      	ldr	r2, [r7, #12]
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004620:	4613      	mov	r3, r2
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	4413      	add	r3, r2
 8004626:	005b      	lsls	r3, r3, #1
 8004628:	461a      	mov	r2, r3
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	695b      	ldr	r3, [r3, #20]
 800462e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004632:	3305      	adds	r3, #5
 8004634:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	4a5c      	ldr	r2, [pc, #368]	@ (80047ac <HAL_I2S_Init+0x270>)
 800463a:	fba2 2303 	umull	r2, r3, r2, r3
 800463e:	08db      	lsrs	r3, r3, #3
 8004640:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	f003 0301 	and.w	r3, r3, #1
 8004648:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800464a:	693a      	ldr	r2, [r7, #16]
 800464c:	69bb      	ldr	r3, [r7, #24]
 800464e:	1ad3      	subs	r3, r2, r3
 8004650:	085b      	lsrs	r3, r3, #1
 8004652:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004654:	69bb      	ldr	r3, [r7, #24]
 8004656:	021b      	lsls	r3, r3, #8
 8004658:	61bb      	str	r3, [r7, #24]
 800465a:	e003      	b.n	8004664 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800465c:	2302      	movs	r3, #2
 800465e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004660:	2300      	movs	r3, #0
 8004662:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004664:	69fb      	ldr	r3, [r7, #28]
 8004666:	2b01      	cmp	r3, #1
 8004668:	d902      	bls.n	8004670 <HAL_I2S_Init+0x134>
 800466a:	69fb      	ldr	r3, [r7, #28]
 800466c:	2bff      	cmp	r3, #255	@ 0xff
 800466e:	d907      	bls.n	8004680 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004674:	f043 0210 	orr.w	r2, r3, #16
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 800467c:	2301      	movs	r3, #1
 800467e:	e08f      	b.n	80047a0 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	691a      	ldr	r2, [r3, #16]
 8004684:	69bb      	ldr	r3, [r7, #24]
 8004686:	ea42 0103 	orr.w	r1, r2, r3
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	69fa      	ldr	r2, [r7, #28]
 8004690:	430a      	orrs	r2, r1
 8004692:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	69db      	ldr	r3, [r3, #28]
 800469a:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800469e:	f023 030f 	bic.w	r3, r3, #15
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	6851      	ldr	r1, [r2, #4]
 80046a6:	687a      	ldr	r2, [r7, #4]
 80046a8:	6892      	ldr	r2, [r2, #8]
 80046aa:	4311      	orrs	r1, r2
 80046ac:	687a      	ldr	r2, [r7, #4]
 80046ae:	68d2      	ldr	r2, [r2, #12]
 80046b0:	4311      	orrs	r1, r2
 80046b2:	687a      	ldr	r2, [r7, #4]
 80046b4:	6992      	ldr	r2, [r2, #24]
 80046b6:	430a      	orrs	r2, r1
 80046b8:	431a      	orrs	r2, r3
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80046c2:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6a1b      	ldr	r3, [r3, #32]
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d161      	bne.n	8004790 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	4a38      	ldr	r2, [pc, #224]	@ (80047b0 <HAL_I2S_Init+0x274>)
 80046d0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a37      	ldr	r2, [pc, #220]	@ (80047b4 <HAL_I2S_Init+0x278>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d101      	bne.n	80046e0 <HAL_I2S_Init+0x1a4>
 80046dc:	4b36      	ldr	r3, [pc, #216]	@ (80047b8 <HAL_I2S_Init+0x27c>)
 80046de:	e001      	b.n	80046e4 <HAL_I2S_Init+0x1a8>
 80046e0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80046e4:	69db      	ldr	r3, [r3, #28]
 80046e6:	687a      	ldr	r2, [r7, #4]
 80046e8:	6812      	ldr	r2, [r2, #0]
 80046ea:	4932      	ldr	r1, [pc, #200]	@ (80047b4 <HAL_I2S_Init+0x278>)
 80046ec:	428a      	cmp	r2, r1
 80046ee:	d101      	bne.n	80046f4 <HAL_I2S_Init+0x1b8>
 80046f0:	4a31      	ldr	r2, [pc, #196]	@ (80047b8 <HAL_I2S_Init+0x27c>)
 80046f2:	e001      	b.n	80046f8 <HAL_I2S_Init+0x1bc>
 80046f4:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80046f8:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80046fc:	f023 030f 	bic.w	r3, r3, #15
 8004700:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a2b      	ldr	r2, [pc, #172]	@ (80047b4 <HAL_I2S_Init+0x278>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d101      	bne.n	8004710 <HAL_I2S_Init+0x1d4>
 800470c:	4b2a      	ldr	r3, [pc, #168]	@ (80047b8 <HAL_I2S_Init+0x27c>)
 800470e:	e001      	b.n	8004714 <HAL_I2S_Init+0x1d8>
 8004710:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004714:	2202      	movs	r2, #2
 8004716:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a25      	ldr	r2, [pc, #148]	@ (80047b4 <HAL_I2S_Init+0x278>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d101      	bne.n	8004726 <HAL_I2S_Init+0x1ea>
 8004722:	4b25      	ldr	r3, [pc, #148]	@ (80047b8 <HAL_I2S_Init+0x27c>)
 8004724:	e001      	b.n	800472a <HAL_I2S_Init+0x1ee>
 8004726:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800472a:	69db      	ldr	r3, [r3, #28]
 800472c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004736:	d003      	beq.n	8004740 <HAL_I2S_Init+0x204>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d103      	bne.n	8004748 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004740:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004744:	613b      	str	r3, [r7, #16]
 8004746:	e001      	b.n	800474c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004748:	2300      	movs	r3, #0
 800474a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004756:	4313      	orrs	r3, r2
 8004758:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	68db      	ldr	r3, [r3, #12]
 800475e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004760:	4313      	orrs	r3, r2
 8004762:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	699b      	ldr	r3, [r3, #24]
 8004768:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800476a:	4313      	orrs	r3, r2
 800476c:	b29a      	uxth	r2, r3
 800476e:	897b      	ldrh	r3, [r7, #10]
 8004770:	4313      	orrs	r3, r2
 8004772:	b29b      	uxth	r3, r3
 8004774:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004778:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a0d      	ldr	r2, [pc, #52]	@ (80047b4 <HAL_I2S_Init+0x278>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d101      	bne.n	8004788 <HAL_I2S_Init+0x24c>
 8004784:	4b0c      	ldr	r3, [pc, #48]	@ (80047b8 <HAL_I2S_Init+0x27c>)
 8004786:	e001      	b.n	800478c <HAL_I2S_Init+0x250>
 8004788:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800478c:	897a      	ldrh	r2, [r7, #10]
 800478e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2200      	movs	r2, #0
 8004794:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2201      	movs	r2, #1
 800479a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 800479e:	2300      	movs	r3, #0
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3720      	adds	r7, #32
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}
 80047a8:	080048b3 	.word	0x080048b3
 80047ac:	cccccccd 	.word	0xcccccccd
 80047b0:	080049c9 	.word	0x080049c9
 80047b4:	40003800 	.word	0x40003800
 80047b8:	40003400 	.word	0x40003400

080047bc <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80047bc:	b480      	push	{r7}
 80047be:	b083      	sub	sp, #12
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80047c4:	bf00      	nop
 80047c6:	370c      	adds	r7, #12
 80047c8:	46bd      	mov	sp, r7
 80047ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ce:	4770      	bx	lr

080047d0 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b083      	sub	sp, #12
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80047d8:	bf00      	nop
 80047da:	370c      	adds	r7, #12
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr

080047e4 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b083      	sub	sp, #12
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80047ec:	bf00      	nop
 80047ee:	370c      	adds	r7, #12
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr

080047f8 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b082      	sub	sp, #8
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004804:	881a      	ldrh	r2, [r3, #0]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004810:	1c9a      	adds	r2, r3, #2
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800481a:	b29b      	uxth	r3, r3
 800481c:	3b01      	subs	r3, #1
 800481e:	b29a      	uxth	r2, r3
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004828:	b29b      	uxth	r3, r3
 800482a:	2b00      	cmp	r3, #0
 800482c:	d10e      	bne.n	800484c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	685a      	ldr	r2, [r3, #4]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800483c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2201      	movs	r2, #1
 8004842:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f7ff ffb8 	bl	80047bc <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800484c:	bf00      	nop
 800484e:	3708      	adds	r7, #8
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}

08004854 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b082      	sub	sp, #8
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	68da      	ldr	r2, [r3, #12]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004866:	b292      	uxth	r2, r2
 8004868:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800486e:	1c9a      	adds	r2, r3, #2
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004878:	b29b      	uxth	r3, r3
 800487a:	3b01      	subs	r3, #1
 800487c:	b29a      	uxth	r2, r3
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004886:	b29b      	uxth	r3, r3
 8004888:	2b00      	cmp	r3, #0
 800488a:	d10e      	bne.n	80048aa <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	685a      	ldr	r2, [r3, #4]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800489a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2201      	movs	r2, #1
 80048a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	f7ff ff93 	bl	80047d0 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80048aa:	bf00      	nop
 80048ac:	3708      	adds	r7, #8
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}

080048b2 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80048b2:	b580      	push	{r7, lr}
 80048b4:	b086      	sub	sp, #24
 80048b6:	af00      	add	r7, sp, #0
 80048b8:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	2b04      	cmp	r3, #4
 80048cc:	d13a      	bne.n	8004944 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	f003 0301 	and.w	r3, r3, #1
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d109      	bne.n	80048ec <I2S_IRQHandler+0x3a>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048e2:	2b40      	cmp	r3, #64	@ 0x40
 80048e4:	d102      	bne.n	80048ec <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f7ff ffb4 	bl	8004854 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048f2:	2b40      	cmp	r3, #64	@ 0x40
 80048f4:	d126      	bne.n	8004944 <I2S_IRQHandler+0x92>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	f003 0320 	and.w	r3, r3, #32
 8004900:	2b20      	cmp	r3, #32
 8004902:	d11f      	bne.n	8004944 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	685a      	ldr	r2, [r3, #4]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004912:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004914:	2300      	movs	r3, #0
 8004916:	613b      	str	r3, [r7, #16]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	68db      	ldr	r3, [r3, #12]
 800491e:	613b      	str	r3, [r7, #16]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	613b      	str	r3, [r7, #16]
 8004928:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2201      	movs	r2, #1
 800492e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004936:	f043 0202 	orr.w	r2, r3, #2
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f7ff ff50 	bl	80047e4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800494a:	b2db      	uxtb	r3, r3
 800494c:	2b03      	cmp	r3, #3
 800494e:	d136      	bne.n	80049be <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	f003 0302 	and.w	r3, r3, #2
 8004956:	2b02      	cmp	r3, #2
 8004958:	d109      	bne.n	800496e <I2S_IRQHandler+0xbc>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004964:	2b80      	cmp	r3, #128	@ 0x80
 8004966:	d102      	bne.n	800496e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004968:	6878      	ldr	r0, [r7, #4]
 800496a:	f7ff ff45 	bl	80047f8 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	f003 0308 	and.w	r3, r3, #8
 8004974:	2b08      	cmp	r3, #8
 8004976:	d122      	bne.n	80049be <I2S_IRQHandler+0x10c>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	f003 0320 	and.w	r3, r3, #32
 8004982:	2b20      	cmp	r3, #32
 8004984:	d11b      	bne.n	80049be <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	685a      	ldr	r2, [r3, #4]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004994:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004996:	2300      	movs	r3, #0
 8004998:	60fb      	str	r3, [r7, #12]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	60fb      	str	r3, [r7, #12]
 80049a2:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2201      	movs	r2, #1
 80049a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049b0:	f043 0204 	orr.w	r2, r3, #4
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80049b8:	6878      	ldr	r0, [r7, #4]
 80049ba:	f7ff ff13 	bl	80047e4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80049be:	bf00      	nop
 80049c0:	3718      	adds	r7, #24
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}
	...

080049c8 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b088      	sub	sp, #32
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a92      	ldr	r2, [pc, #584]	@ (8004c28 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d101      	bne.n	80049e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80049e2:	4b92      	ldr	r3, [pc, #584]	@ (8004c2c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80049e4:	e001      	b.n	80049ea <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80049e6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a8b      	ldr	r2, [pc, #556]	@ (8004c28 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d101      	bne.n	8004a04 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004a00:	4b8a      	ldr	r3, [pc, #552]	@ (8004c2c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004a02:	e001      	b.n	8004a08 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004a04:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a14:	d004      	beq.n	8004a20 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	f040 8099 	bne.w	8004b52 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004a20:	69fb      	ldr	r3, [r7, #28]
 8004a22:	f003 0302 	and.w	r3, r3, #2
 8004a26:	2b02      	cmp	r3, #2
 8004a28:	d107      	bne.n	8004a3a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d002      	beq.n	8004a3a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004a34:	6878      	ldr	r0, [r7, #4]
 8004a36:	f000 f925 	bl	8004c84 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004a3a:	69bb      	ldr	r3, [r7, #24]
 8004a3c:	f003 0301 	and.w	r3, r3, #1
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	d107      	bne.n	8004a54 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d002      	beq.n	8004a54 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f000 f9c8 	bl	8004de4 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004a54:	69bb      	ldr	r3, [r7, #24]
 8004a56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a5a:	2b40      	cmp	r3, #64	@ 0x40
 8004a5c:	d13a      	bne.n	8004ad4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	f003 0320 	and.w	r3, r3, #32
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d035      	beq.n	8004ad4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a6e      	ldr	r2, [pc, #440]	@ (8004c28 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d101      	bne.n	8004a76 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004a72:	4b6e      	ldr	r3, [pc, #440]	@ (8004c2c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004a74:	e001      	b.n	8004a7a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004a76:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004a7a:	685a      	ldr	r2, [r3, #4]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4969      	ldr	r1, [pc, #420]	@ (8004c28 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004a82:	428b      	cmp	r3, r1
 8004a84:	d101      	bne.n	8004a8a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004a86:	4b69      	ldr	r3, [pc, #420]	@ (8004c2c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004a88:	e001      	b.n	8004a8e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004a8a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004a8e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004a92:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	685a      	ldr	r2, [r3, #4]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004aa2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	60fb      	str	r3, [r7, #12]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	68db      	ldr	r3, [r3, #12]
 8004aae:	60fb      	str	r3, [r7, #12]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	60fb      	str	r3, [r7, #12]
 8004ab8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2201      	movs	r2, #1
 8004abe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ac6:	f043 0202 	orr.w	r2, r3, #2
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f7ff fe88 	bl	80047e4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004ad4:	69fb      	ldr	r3, [r7, #28]
 8004ad6:	f003 0308 	and.w	r3, r3, #8
 8004ada:	2b08      	cmp	r3, #8
 8004adc:	f040 80c3 	bne.w	8004c66 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	f003 0320 	and.w	r3, r3, #32
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	f000 80bd 	beq.w	8004c66 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	685a      	ldr	r2, [r3, #4]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004afa:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a49      	ldr	r2, [pc, #292]	@ (8004c28 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d101      	bne.n	8004b0a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004b06:	4b49      	ldr	r3, [pc, #292]	@ (8004c2c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004b08:	e001      	b.n	8004b0e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004b0a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004b0e:	685a      	ldr	r2, [r3, #4]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4944      	ldr	r1, [pc, #272]	@ (8004c28 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004b16:	428b      	cmp	r3, r1
 8004b18:	d101      	bne.n	8004b1e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004b1a:	4b44      	ldr	r3, [pc, #272]	@ (8004c2c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004b1c:	e001      	b.n	8004b22 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004b1e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004b22:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004b26:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004b28:	2300      	movs	r3, #0
 8004b2a:	60bb      	str	r3, [r7, #8]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	60bb      	str	r3, [r7, #8]
 8004b34:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2201      	movs	r2, #1
 8004b3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b42:	f043 0204 	orr.w	r2, r3, #4
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f7ff fe4a 	bl	80047e4 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004b50:	e089      	b.n	8004c66 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004b52:	69bb      	ldr	r3, [r7, #24]
 8004b54:	f003 0302 	and.w	r3, r3, #2
 8004b58:	2b02      	cmp	r3, #2
 8004b5a:	d107      	bne.n	8004b6c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d002      	beq.n	8004b6c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f000 f8be 	bl	8004ce8 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004b6c:	69fb      	ldr	r3, [r7, #28]
 8004b6e:	f003 0301 	and.w	r3, r3, #1
 8004b72:	2b01      	cmp	r3, #1
 8004b74:	d107      	bne.n	8004b86 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d002      	beq.n	8004b86 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	f000 f8fd 	bl	8004d80 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004b86:	69fb      	ldr	r3, [r7, #28]
 8004b88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b8c:	2b40      	cmp	r3, #64	@ 0x40
 8004b8e:	d12f      	bne.n	8004bf0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	f003 0320 	and.w	r3, r3, #32
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d02a      	beq.n	8004bf0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	685a      	ldr	r2, [r3, #4]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004ba8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a1e      	ldr	r2, [pc, #120]	@ (8004c28 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d101      	bne.n	8004bb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004bb4:	4b1d      	ldr	r3, [pc, #116]	@ (8004c2c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004bb6:	e001      	b.n	8004bbc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004bb8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004bbc:	685a      	ldr	r2, [r3, #4]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4919      	ldr	r1, [pc, #100]	@ (8004c28 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004bc4:	428b      	cmp	r3, r1
 8004bc6:	d101      	bne.n	8004bcc <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004bc8:	4b18      	ldr	r3, [pc, #96]	@ (8004c2c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004bca:	e001      	b.n	8004bd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004bcc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004bd0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004bd4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2201      	movs	r2, #1
 8004bda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004be2:	f043 0202 	orr.w	r2, r3, #2
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f7ff fdfa 	bl	80047e4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004bf0:	69bb      	ldr	r3, [r7, #24]
 8004bf2:	f003 0308 	and.w	r3, r3, #8
 8004bf6:	2b08      	cmp	r3, #8
 8004bf8:	d136      	bne.n	8004c68 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	f003 0320 	and.w	r3, r3, #32
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d031      	beq.n	8004c68 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a07      	ldr	r2, [pc, #28]	@ (8004c28 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d101      	bne.n	8004c12 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004c0e:	4b07      	ldr	r3, [pc, #28]	@ (8004c2c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004c10:	e001      	b.n	8004c16 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004c12:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004c16:	685a      	ldr	r2, [r3, #4]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4902      	ldr	r1, [pc, #8]	@ (8004c28 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004c1e:	428b      	cmp	r3, r1
 8004c20:	d106      	bne.n	8004c30 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8004c22:	4b02      	ldr	r3, [pc, #8]	@ (8004c2c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004c24:	e006      	b.n	8004c34 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8004c26:	bf00      	nop
 8004c28:	40003800 	.word	0x40003800
 8004c2c:	40003400 	.word	0x40003400
 8004c30:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004c34:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004c38:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	685a      	ldr	r2, [r3, #4]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004c48:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2201      	movs	r2, #1
 8004c4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c56:	f043 0204 	orr.w	r2, r3, #4
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f7ff fdc0 	bl	80047e4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004c64:	e000      	b.n	8004c68 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004c66:	bf00      	nop
}
 8004c68:	bf00      	nop
 8004c6a:	3720      	adds	r7, #32
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}

08004c70 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b083      	sub	sp, #12
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004c78:	bf00      	nop
 8004c7a:	370c      	adds	r7, #12
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c82:	4770      	bx	lr

08004c84 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b082      	sub	sp, #8
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c90:	1c99      	adds	r1, r3, #2
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	6251      	str	r1, [r2, #36]	@ 0x24
 8004c96:	881a      	ldrh	r2, [r3, #0]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ca2:	b29b      	uxth	r3, r3
 8004ca4:	3b01      	subs	r3, #1
 8004ca6:	b29a      	uxth	r2, r3
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cb0:	b29b      	uxth	r3, r3
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d113      	bne.n	8004cde <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	685a      	ldr	r2, [r3, #4]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004cc4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004cca:	b29b      	uxth	r3, r3
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d106      	bne.n	8004cde <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004cd8:	6878      	ldr	r0, [r7, #4]
 8004cda:	f7ff ffc9 	bl	8004c70 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004cde:	bf00      	nop
 8004ce0:	3708      	adds	r7, #8
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}
	...

08004ce8 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b082      	sub	sp, #8
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cf4:	1c99      	adds	r1, r3, #2
 8004cf6:	687a      	ldr	r2, [r7, #4]
 8004cf8:	6251      	str	r1, [r2, #36]	@ 0x24
 8004cfa:	8819      	ldrh	r1, [r3, #0]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a1d      	ldr	r2, [pc, #116]	@ (8004d78 <I2SEx_TxISR_I2SExt+0x90>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d101      	bne.n	8004d0a <I2SEx_TxISR_I2SExt+0x22>
 8004d06:	4b1d      	ldr	r3, [pc, #116]	@ (8004d7c <I2SEx_TxISR_I2SExt+0x94>)
 8004d08:	e001      	b.n	8004d0e <I2SEx_TxISR_I2SExt+0x26>
 8004d0a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004d0e:	460a      	mov	r2, r1
 8004d10:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d16:	b29b      	uxth	r3, r3
 8004d18:	3b01      	subs	r3, #1
 8004d1a:	b29a      	uxth	r2, r3
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d24:	b29b      	uxth	r3, r3
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d121      	bne.n	8004d6e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a12      	ldr	r2, [pc, #72]	@ (8004d78 <I2SEx_TxISR_I2SExt+0x90>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d101      	bne.n	8004d38 <I2SEx_TxISR_I2SExt+0x50>
 8004d34:	4b11      	ldr	r3, [pc, #68]	@ (8004d7c <I2SEx_TxISR_I2SExt+0x94>)
 8004d36:	e001      	b.n	8004d3c <I2SEx_TxISR_I2SExt+0x54>
 8004d38:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004d3c:	685a      	ldr	r2, [r3, #4]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	490d      	ldr	r1, [pc, #52]	@ (8004d78 <I2SEx_TxISR_I2SExt+0x90>)
 8004d44:	428b      	cmp	r3, r1
 8004d46:	d101      	bne.n	8004d4c <I2SEx_TxISR_I2SExt+0x64>
 8004d48:	4b0c      	ldr	r3, [pc, #48]	@ (8004d7c <I2SEx_TxISR_I2SExt+0x94>)
 8004d4a:	e001      	b.n	8004d50 <I2SEx_TxISR_I2SExt+0x68>
 8004d4c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004d50:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004d54:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d106      	bne.n	8004d6e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2201      	movs	r2, #1
 8004d64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	f7ff ff81 	bl	8004c70 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004d6e:	bf00      	nop
 8004d70:	3708      	adds	r7, #8
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}
 8004d76:	bf00      	nop
 8004d78:	40003800 	.word	0x40003800
 8004d7c:	40003400 	.word	0x40003400

08004d80 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b082      	sub	sp, #8
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	68d8      	ldr	r0, [r3, #12]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d92:	1c99      	adds	r1, r3, #2
 8004d94:	687a      	ldr	r2, [r7, #4]
 8004d96:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004d98:	b282      	uxth	r2, r0
 8004d9a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004da0:	b29b      	uxth	r3, r3
 8004da2:	3b01      	subs	r3, #1
 8004da4:	b29a      	uxth	r2, r3
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004dae:	b29b      	uxth	r3, r3
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d113      	bne.n	8004ddc <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	685a      	ldr	r2, [r3, #4]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004dc2:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d106      	bne.n	8004ddc <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f7ff ff4a 	bl	8004c70 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004ddc:	bf00      	nop
 8004dde:	3708      	adds	r7, #8
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}

08004de4 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b082      	sub	sp, #8
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a20      	ldr	r2, [pc, #128]	@ (8004e74 <I2SEx_RxISR_I2SExt+0x90>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d101      	bne.n	8004dfa <I2SEx_RxISR_I2SExt+0x16>
 8004df6:	4b20      	ldr	r3, [pc, #128]	@ (8004e78 <I2SEx_RxISR_I2SExt+0x94>)
 8004df8:	e001      	b.n	8004dfe <I2SEx_RxISR_I2SExt+0x1a>
 8004dfa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004dfe:	68d8      	ldr	r0, [r3, #12]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e04:	1c99      	adds	r1, r3, #2
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004e0a:	b282      	uxth	r2, r0
 8004e0c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	3b01      	subs	r3, #1
 8004e16:	b29a      	uxth	r2, r3
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004e20:	b29b      	uxth	r3, r3
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d121      	bne.n	8004e6a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a12      	ldr	r2, [pc, #72]	@ (8004e74 <I2SEx_RxISR_I2SExt+0x90>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d101      	bne.n	8004e34 <I2SEx_RxISR_I2SExt+0x50>
 8004e30:	4b11      	ldr	r3, [pc, #68]	@ (8004e78 <I2SEx_RxISR_I2SExt+0x94>)
 8004e32:	e001      	b.n	8004e38 <I2SEx_RxISR_I2SExt+0x54>
 8004e34:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004e38:	685a      	ldr	r2, [r3, #4]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	490d      	ldr	r1, [pc, #52]	@ (8004e74 <I2SEx_RxISR_I2SExt+0x90>)
 8004e40:	428b      	cmp	r3, r1
 8004e42:	d101      	bne.n	8004e48 <I2SEx_RxISR_I2SExt+0x64>
 8004e44:	4b0c      	ldr	r3, [pc, #48]	@ (8004e78 <I2SEx_RxISR_I2SExt+0x94>)
 8004e46:	e001      	b.n	8004e4c <I2SEx_RxISR_I2SExt+0x68>
 8004e48:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004e4c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004e50:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e56:	b29b      	uxth	r3, r3
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d106      	bne.n	8004e6a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	f7ff ff03 	bl	8004c70 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004e6a:	bf00      	nop
 8004e6c:	3708      	adds	r7, #8
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}
 8004e72:	bf00      	nop
 8004e74:	40003800 	.word	0x40003800
 8004e78:	40003400 	.word	0x40003400

08004e7c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b086      	sub	sp, #24
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d101      	bne.n	8004e8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e267      	b.n	800535e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f003 0301 	and.w	r3, r3, #1
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d075      	beq.n	8004f86 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004e9a:	4b88      	ldr	r3, [pc, #544]	@ (80050bc <HAL_RCC_OscConfig+0x240>)
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	f003 030c 	and.w	r3, r3, #12
 8004ea2:	2b04      	cmp	r3, #4
 8004ea4:	d00c      	beq.n	8004ec0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ea6:	4b85      	ldr	r3, [pc, #532]	@ (80050bc <HAL_RCC_OscConfig+0x240>)
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004eae:	2b08      	cmp	r3, #8
 8004eb0:	d112      	bne.n	8004ed8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004eb2:	4b82      	ldr	r3, [pc, #520]	@ (80050bc <HAL_RCC_OscConfig+0x240>)
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004eba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004ebe:	d10b      	bne.n	8004ed8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ec0:	4b7e      	ldr	r3, [pc, #504]	@ (80050bc <HAL_RCC_OscConfig+0x240>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d05b      	beq.n	8004f84 <HAL_RCC_OscConfig+0x108>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d157      	bne.n	8004f84 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	e242      	b.n	800535e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ee0:	d106      	bne.n	8004ef0 <HAL_RCC_OscConfig+0x74>
 8004ee2:	4b76      	ldr	r3, [pc, #472]	@ (80050bc <HAL_RCC_OscConfig+0x240>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a75      	ldr	r2, [pc, #468]	@ (80050bc <HAL_RCC_OscConfig+0x240>)
 8004ee8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004eec:	6013      	str	r3, [r2, #0]
 8004eee:	e01d      	b.n	8004f2c <HAL_RCC_OscConfig+0xb0>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004ef8:	d10c      	bne.n	8004f14 <HAL_RCC_OscConfig+0x98>
 8004efa:	4b70      	ldr	r3, [pc, #448]	@ (80050bc <HAL_RCC_OscConfig+0x240>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a6f      	ldr	r2, [pc, #444]	@ (80050bc <HAL_RCC_OscConfig+0x240>)
 8004f00:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004f04:	6013      	str	r3, [r2, #0]
 8004f06:	4b6d      	ldr	r3, [pc, #436]	@ (80050bc <HAL_RCC_OscConfig+0x240>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a6c      	ldr	r2, [pc, #432]	@ (80050bc <HAL_RCC_OscConfig+0x240>)
 8004f0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f10:	6013      	str	r3, [r2, #0]
 8004f12:	e00b      	b.n	8004f2c <HAL_RCC_OscConfig+0xb0>
 8004f14:	4b69      	ldr	r3, [pc, #420]	@ (80050bc <HAL_RCC_OscConfig+0x240>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a68      	ldr	r2, [pc, #416]	@ (80050bc <HAL_RCC_OscConfig+0x240>)
 8004f1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f1e:	6013      	str	r3, [r2, #0]
 8004f20:	4b66      	ldr	r3, [pc, #408]	@ (80050bc <HAL_RCC_OscConfig+0x240>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a65      	ldr	r2, [pc, #404]	@ (80050bc <HAL_RCC_OscConfig+0x240>)
 8004f26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004f2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d013      	beq.n	8004f5c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f34:	f7fc fd7a 	bl	8001a2c <HAL_GetTick>
 8004f38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f3a:	e008      	b.n	8004f4e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f3c:	f7fc fd76 	bl	8001a2c <HAL_GetTick>
 8004f40:	4602      	mov	r2, r0
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	1ad3      	subs	r3, r2, r3
 8004f46:	2b64      	cmp	r3, #100	@ 0x64
 8004f48:	d901      	bls.n	8004f4e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004f4a:	2303      	movs	r3, #3
 8004f4c:	e207      	b.n	800535e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f4e:	4b5b      	ldr	r3, [pc, #364]	@ (80050bc <HAL_RCC_OscConfig+0x240>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d0f0      	beq.n	8004f3c <HAL_RCC_OscConfig+0xc0>
 8004f5a:	e014      	b.n	8004f86 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f5c:	f7fc fd66 	bl	8001a2c <HAL_GetTick>
 8004f60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f62:	e008      	b.n	8004f76 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f64:	f7fc fd62 	bl	8001a2c <HAL_GetTick>
 8004f68:	4602      	mov	r2, r0
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	1ad3      	subs	r3, r2, r3
 8004f6e:	2b64      	cmp	r3, #100	@ 0x64
 8004f70:	d901      	bls.n	8004f76 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004f72:	2303      	movs	r3, #3
 8004f74:	e1f3      	b.n	800535e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f76:	4b51      	ldr	r3, [pc, #324]	@ (80050bc <HAL_RCC_OscConfig+0x240>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d1f0      	bne.n	8004f64 <HAL_RCC_OscConfig+0xe8>
 8004f82:	e000      	b.n	8004f86 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f003 0302 	and.w	r3, r3, #2
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d063      	beq.n	800505a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004f92:	4b4a      	ldr	r3, [pc, #296]	@ (80050bc <HAL_RCC_OscConfig+0x240>)
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	f003 030c 	and.w	r3, r3, #12
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d00b      	beq.n	8004fb6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f9e:	4b47      	ldr	r3, [pc, #284]	@ (80050bc <HAL_RCC_OscConfig+0x240>)
 8004fa0:	689b      	ldr	r3, [r3, #8]
 8004fa2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004fa6:	2b08      	cmp	r3, #8
 8004fa8:	d11c      	bne.n	8004fe4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004faa:	4b44      	ldr	r3, [pc, #272]	@ (80050bc <HAL_RCC_OscConfig+0x240>)
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d116      	bne.n	8004fe4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fb6:	4b41      	ldr	r3, [pc, #260]	@ (80050bc <HAL_RCC_OscConfig+0x240>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f003 0302 	and.w	r3, r3, #2
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d005      	beq.n	8004fce <HAL_RCC_OscConfig+0x152>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	68db      	ldr	r3, [r3, #12]
 8004fc6:	2b01      	cmp	r3, #1
 8004fc8:	d001      	beq.n	8004fce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	e1c7      	b.n	800535e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fce:	4b3b      	ldr	r3, [pc, #236]	@ (80050bc <HAL_RCC_OscConfig+0x240>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	691b      	ldr	r3, [r3, #16]
 8004fda:	00db      	lsls	r3, r3, #3
 8004fdc:	4937      	ldr	r1, [pc, #220]	@ (80050bc <HAL_RCC_OscConfig+0x240>)
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fe2:	e03a      	b.n	800505a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	68db      	ldr	r3, [r3, #12]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d020      	beq.n	800502e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004fec:	4b34      	ldr	r3, [pc, #208]	@ (80050c0 <HAL_RCC_OscConfig+0x244>)
 8004fee:	2201      	movs	r2, #1
 8004ff0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ff2:	f7fc fd1b 	bl	8001a2c <HAL_GetTick>
 8004ff6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ff8:	e008      	b.n	800500c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ffa:	f7fc fd17 	bl	8001a2c <HAL_GetTick>
 8004ffe:	4602      	mov	r2, r0
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	1ad3      	subs	r3, r2, r3
 8005004:	2b02      	cmp	r3, #2
 8005006:	d901      	bls.n	800500c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005008:	2303      	movs	r3, #3
 800500a:	e1a8      	b.n	800535e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800500c:	4b2b      	ldr	r3, [pc, #172]	@ (80050bc <HAL_RCC_OscConfig+0x240>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f003 0302 	and.w	r3, r3, #2
 8005014:	2b00      	cmp	r3, #0
 8005016:	d0f0      	beq.n	8004ffa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005018:	4b28      	ldr	r3, [pc, #160]	@ (80050bc <HAL_RCC_OscConfig+0x240>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	691b      	ldr	r3, [r3, #16]
 8005024:	00db      	lsls	r3, r3, #3
 8005026:	4925      	ldr	r1, [pc, #148]	@ (80050bc <HAL_RCC_OscConfig+0x240>)
 8005028:	4313      	orrs	r3, r2
 800502a:	600b      	str	r3, [r1, #0]
 800502c:	e015      	b.n	800505a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800502e:	4b24      	ldr	r3, [pc, #144]	@ (80050c0 <HAL_RCC_OscConfig+0x244>)
 8005030:	2200      	movs	r2, #0
 8005032:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005034:	f7fc fcfa 	bl	8001a2c <HAL_GetTick>
 8005038:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800503a:	e008      	b.n	800504e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800503c:	f7fc fcf6 	bl	8001a2c <HAL_GetTick>
 8005040:	4602      	mov	r2, r0
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	1ad3      	subs	r3, r2, r3
 8005046:	2b02      	cmp	r3, #2
 8005048:	d901      	bls.n	800504e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800504a:	2303      	movs	r3, #3
 800504c:	e187      	b.n	800535e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800504e:	4b1b      	ldr	r3, [pc, #108]	@ (80050bc <HAL_RCC_OscConfig+0x240>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f003 0302 	and.w	r3, r3, #2
 8005056:	2b00      	cmp	r3, #0
 8005058:	d1f0      	bne.n	800503c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f003 0308 	and.w	r3, r3, #8
 8005062:	2b00      	cmp	r3, #0
 8005064:	d036      	beq.n	80050d4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	695b      	ldr	r3, [r3, #20]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d016      	beq.n	800509c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800506e:	4b15      	ldr	r3, [pc, #84]	@ (80050c4 <HAL_RCC_OscConfig+0x248>)
 8005070:	2201      	movs	r2, #1
 8005072:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005074:	f7fc fcda 	bl	8001a2c <HAL_GetTick>
 8005078:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800507a:	e008      	b.n	800508e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800507c:	f7fc fcd6 	bl	8001a2c <HAL_GetTick>
 8005080:	4602      	mov	r2, r0
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	1ad3      	subs	r3, r2, r3
 8005086:	2b02      	cmp	r3, #2
 8005088:	d901      	bls.n	800508e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800508a:	2303      	movs	r3, #3
 800508c:	e167      	b.n	800535e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800508e:	4b0b      	ldr	r3, [pc, #44]	@ (80050bc <HAL_RCC_OscConfig+0x240>)
 8005090:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005092:	f003 0302 	and.w	r3, r3, #2
 8005096:	2b00      	cmp	r3, #0
 8005098:	d0f0      	beq.n	800507c <HAL_RCC_OscConfig+0x200>
 800509a:	e01b      	b.n	80050d4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800509c:	4b09      	ldr	r3, [pc, #36]	@ (80050c4 <HAL_RCC_OscConfig+0x248>)
 800509e:	2200      	movs	r2, #0
 80050a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050a2:	f7fc fcc3 	bl	8001a2c <HAL_GetTick>
 80050a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050a8:	e00e      	b.n	80050c8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050aa:	f7fc fcbf 	bl	8001a2c <HAL_GetTick>
 80050ae:	4602      	mov	r2, r0
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	1ad3      	subs	r3, r2, r3
 80050b4:	2b02      	cmp	r3, #2
 80050b6:	d907      	bls.n	80050c8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80050b8:	2303      	movs	r3, #3
 80050ba:	e150      	b.n	800535e <HAL_RCC_OscConfig+0x4e2>
 80050bc:	40023800 	.word	0x40023800
 80050c0:	42470000 	.word	0x42470000
 80050c4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050c8:	4b88      	ldr	r3, [pc, #544]	@ (80052ec <HAL_RCC_OscConfig+0x470>)
 80050ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050cc:	f003 0302 	and.w	r3, r3, #2
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d1ea      	bne.n	80050aa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f003 0304 	and.w	r3, r3, #4
 80050dc:	2b00      	cmp	r3, #0
 80050de:	f000 8097 	beq.w	8005210 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050e2:	2300      	movs	r3, #0
 80050e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050e6:	4b81      	ldr	r3, [pc, #516]	@ (80052ec <HAL_RCC_OscConfig+0x470>)
 80050e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d10f      	bne.n	8005112 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050f2:	2300      	movs	r3, #0
 80050f4:	60bb      	str	r3, [r7, #8]
 80050f6:	4b7d      	ldr	r3, [pc, #500]	@ (80052ec <HAL_RCC_OscConfig+0x470>)
 80050f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050fa:	4a7c      	ldr	r2, [pc, #496]	@ (80052ec <HAL_RCC_OscConfig+0x470>)
 80050fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005100:	6413      	str	r3, [r2, #64]	@ 0x40
 8005102:	4b7a      	ldr	r3, [pc, #488]	@ (80052ec <HAL_RCC_OscConfig+0x470>)
 8005104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005106:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800510a:	60bb      	str	r3, [r7, #8]
 800510c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800510e:	2301      	movs	r3, #1
 8005110:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005112:	4b77      	ldr	r3, [pc, #476]	@ (80052f0 <HAL_RCC_OscConfig+0x474>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800511a:	2b00      	cmp	r3, #0
 800511c:	d118      	bne.n	8005150 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800511e:	4b74      	ldr	r3, [pc, #464]	@ (80052f0 <HAL_RCC_OscConfig+0x474>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a73      	ldr	r2, [pc, #460]	@ (80052f0 <HAL_RCC_OscConfig+0x474>)
 8005124:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005128:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800512a:	f7fc fc7f 	bl	8001a2c <HAL_GetTick>
 800512e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005130:	e008      	b.n	8005144 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005132:	f7fc fc7b 	bl	8001a2c <HAL_GetTick>
 8005136:	4602      	mov	r2, r0
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	1ad3      	subs	r3, r2, r3
 800513c:	2b02      	cmp	r3, #2
 800513e:	d901      	bls.n	8005144 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005140:	2303      	movs	r3, #3
 8005142:	e10c      	b.n	800535e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005144:	4b6a      	ldr	r3, [pc, #424]	@ (80052f0 <HAL_RCC_OscConfig+0x474>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800514c:	2b00      	cmp	r3, #0
 800514e:	d0f0      	beq.n	8005132 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	2b01      	cmp	r3, #1
 8005156:	d106      	bne.n	8005166 <HAL_RCC_OscConfig+0x2ea>
 8005158:	4b64      	ldr	r3, [pc, #400]	@ (80052ec <HAL_RCC_OscConfig+0x470>)
 800515a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800515c:	4a63      	ldr	r2, [pc, #396]	@ (80052ec <HAL_RCC_OscConfig+0x470>)
 800515e:	f043 0301 	orr.w	r3, r3, #1
 8005162:	6713      	str	r3, [r2, #112]	@ 0x70
 8005164:	e01c      	b.n	80051a0 <HAL_RCC_OscConfig+0x324>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	2b05      	cmp	r3, #5
 800516c:	d10c      	bne.n	8005188 <HAL_RCC_OscConfig+0x30c>
 800516e:	4b5f      	ldr	r3, [pc, #380]	@ (80052ec <HAL_RCC_OscConfig+0x470>)
 8005170:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005172:	4a5e      	ldr	r2, [pc, #376]	@ (80052ec <HAL_RCC_OscConfig+0x470>)
 8005174:	f043 0304 	orr.w	r3, r3, #4
 8005178:	6713      	str	r3, [r2, #112]	@ 0x70
 800517a:	4b5c      	ldr	r3, [pc, #368]	@ (80052ec <HAL_RCC_OscConfig+0x470>)
 800517c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800517e:	4a5b      	ldr	r2, [pc, #364]	@ (80052ec <HAL_RCC_OscConfig+0x470>)
 8005180:	f043 0301 	orr.w	r3, r3, #1
 8005184:	6713      	str	r3, [r2, #112]	@ 0x70
 8005186:	e00b      	b.n	80051a0 <HAL_RCC_OscConfig+0x324>
 8005188:	4b58      	ldr	r3, [pc, #352]	@ (80052ec <HAL_RCC_OscConfig+0x470>)
 800518a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800518c:	4a57      	ldr	r2, [pc, #348]	@ (80052ec <HAL_RCC_OscConfig+0x470>)
 800518e:	f023 0301 	bic.w	r3, r3, #1
 8005192:	6713      	str	r3, [r2, #112]	@ 0x70
 8005194:	4b55      	ldr	r3, [pc, #340]	@ (80052ec <HAL_RCC_OscConfig+0x470>)
 8005196:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005198:	4a54      	ldr	r2, [pc, #336]	@ (80052ec <HAL_RCC_OscConfig+0x470>)
 800519a:	f023 0304 	bic.w	r3, r3, #4
 800519e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d015      	beq.n	80051d4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051a8:	f7fc fc40 	bl	8001a2c <HAL_GetTick>
 80051ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051ae:	e00a      	b.n	80051c6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051b0:	f7fc fc3c 	bl	8001a2c <HAL_GetTick>
 80051b4:	4602      	mov	r2, r0
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	1ad3      	subs	r3, r2, r3
 80051ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051be:	4293      	cmp	r3, r2
 80051c0:	d901      	bls.n	80051c6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80051c2:	2303      	movs	r3, #3
 80051c4:	e0cb      	b.n	800535e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051c6:	4b49      	ldr	r3, [pc, #292]	@ (80052ec <HAL_RCC_OscConfig+0x470>)
 80051c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051ca:	f003 0302 	and.w	r3, r3, #2
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d0ee      	beq.n	80051b0 <HAL_RCC_OscConfig+0x334>
 80051d2:	e014      	b.n	80051fe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051d4:	f7fc fc2a 	bl	8001a2c <HAL_GetTick>
 80051d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051da:	e00a      	b.n	80051f2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051dc:	f7fc fc26 	bl	8001a2c <HAL_GetTick>
 80051e0:	4602      	mov	r2, r0
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	1ad3      	subs	r3, r2, r3
 80051e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d901      	bls.n	80051f2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80051ee:	2303      	movs	r3, #3
 80051f0:	e0b5      	b.n	800535e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051f2:	4b3e      	ldr	r3, [pc, #248]	@ (80052ec <HAL_RCC_OscConfig+0x470>)
 80051f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051f6:	f003 0302 	and.w	r3, r3, #2
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d1ee      	bne.n	80051dc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80051fe:	7dfb      	ldrb	r3, [r7, #23]
 8005200:	2b01      	cmp	r3, #1
 8005202:	d105      	bne.n	8005210 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005204:	4b39      	ldr	r3, [pc, #228]	@ (80052ec <HAL_RCC_OscConfig+0x470>)
 8005206:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005208:	4a38      	ldr	r2, [pc, #224]	@ (80052ec <HAL_RCC_OscConfig+0x470>)
 800520a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800520e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	699b      	ldr	r3, [r3, #24]
 8005214:	2b00      	cmp	r3, #0
 8005216:	f000 80a1 	beq.w	800535c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800521a:	4b34      	ldr	r3, [pc, #208]	@ (80052ec <HAL_RCC_OscConfig+0x470>)
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	f003 030c 	and.w	r3, r3, #12
 8005222:	2b08      	cmp	r3, #8
 8005224:	d05c      	beq.n	80052e0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	699b      	ldr	r3, [r3, #24]
 800522a:	2b02      	cmp	r3, #2
 800522c:	d141      	bne.n	80052b2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800522e:	4b31      	ldr	r3, [pc, #196]	@ (80052f4 <HAL_RCC_OscConfig+0x478>)
 8005230:	2200      	movs	r2, #0
 8005232:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005234:	f7fc fbfa 	bl	8001a2c <HAL_GetTick>
 8005238:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800523a:	e008      	b.n	800524e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800523c:	f7fc fbf6 	bl	8001a2c <HAL_GetTick>
 8005240:	4602      	mov	r2, r0
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	1ad3      	subs	r3, r2, r3
 8005246:	2b02      	cmp	r3, #2
 8005248:	d901      	bls.n	800524e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800524a:	2303      	movs	r3, #3
 800524c:	e087      	b.n	800535e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800524e:	4b27      	ldr	r3, [pc, #156]	@ (80052ec <HAL_RCC_OscConfig+0x470>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005256:	2b00      	cmp	r3, #0
 8005258:	d1f0      	bne.n	800523c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	69da      	ldr	r2, [r3, #28]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6a1b      	ldr	r3, [r3, #32]
 8005262:	431a      	orrs	r2, r3
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005268:	019b      	lsls	r3, r3, #6
 800526a:	431a      	orrs	r2, r3
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005270:	085b      	lsrs	r3, r3, #1
 8005272:	3b01      	subs	r3, #1
 8005274:	041b      	lsls	r3, r3, #16
 8005276:	431a      	orrs	r2, r3
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800527c:	061b      	lsls	r3, r3, #24
 800527e:	491b      	ldr	r1, [pc, #108]	@ (80052ec <HAL_RCC_OscConfig+0x470>)
 8005280:	4313      	orrs	r3, r2
 8005282:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005284:	4b1b      	ldr	r3, [pc, #108]	@ (80052f4 <HAL_RCC_OscConfig+0x478>)
 8005286:	2201      	movs	r2, #1
 8005288:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800528a:	f7fc fbcf 	bl	8001a2c <HAL_GetTick>
 800528e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005290:	e008      	b.n	80052a4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005292:	f7fc fbcb 	bl	8001a2c <HAL_GetTick>
 8005296:	4602      	mov	r2, r0
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	1ad3      	subs	r3, r2, r3
 800529c:	2b02      	cmp	r3, #2
 800529e:	d901      	bls.n	80052a4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80052a0:	2303      	movs	r3, #3
 80052a2:	e05c      	b.n	800535e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052a4:	4b11      	ldr	r3, [pc, #68]	@ (80052ec <HAL_RCC_OscConfig+0x470>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d0f0      	beq.n	8005292 <HAL_RCC_OscConfig+0x416>
 80052b0:	e054      	b.n	800535c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052b2:	4b10      	ldr	r3, [pc, #64]	@ (80052f4 <HAL_RCC_OscConfig+0x478>)
 80052b4:	2200      	movs	r2, #0
 80052b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052b8:	f7fc fbb8 	bl	8001a2c <HAL_GetTick>
 80052bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052be:	e008      	b.n	80052d2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052c0:	f7fc fbb4 	bl	8001a2c <HAL_GetTick>
 80052c4:	4602      	mov	r2, r0
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	1ad3      	subs	r3, r2, r3
 80052ca:	2b02      	cmp	r3, #2
 80052cc:	d901      	bls.n	80052d2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80052ce:	2303      	movs	r3, #3
 80052d0:	e045      	b.n	800535e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052d2:	4b06      	ldr	r3, [pc, #24]	@ (80052ec <HAL_RCC_OscConfig+0x470>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d1f0      	bne.n	80052c0 <HAL_RCC_OscConfig+0x444>
 80052de:	e03d      	b.n	800535c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	699b      	ldr	r3, [r3, #24]
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	d107      	bne.n	80052f8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80052e8:	2301      	movs	r3, #1
 80052ea:	e038      	b.n	800535e <HAL_RCC_OscConfig+0x4e2>
 80052ec:	40023800 	.word	0x40023800
 80052f0:	40007000 	.word	0x40007000
 80052f4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80052f8:	4b1b      	ldr	r3, [pc, #108]	@ (8005368 <HAL_RCC_OscConfig+0x4ec>)
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	699b      	ldr	r3, [r3, #24]
 8005302:	2b01      	cmp	r3, #1
 8005304:	d028      	beq.n	8005358 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005310:	429a      	cmp	r2, r3
 8005312:	d121      	bne.n	8005358 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800531e:	429a      	cmp	r2, r3
 8005320:	d11a      	bne.n	8005358 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005322:	68fa      	ldr	r2, [r7, #12]
 8005324:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005328:	4013      	ands	r3, r2
 800532a:	687a      	ldr	r2, [r7, #4]
 800532c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800532e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005330:	4293      	cmp	r3, r2
 8005332:	d111      	bne.n	8005358 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800533e:	085b      	lsrs	r3, r3, #1
 8005340:	3b01      	subs	r3, #1
 8005342:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005344:	429a      	cmp	r2, r3
 8005346:	d107      	bne.n	8005358 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005352:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005354:	429a      	cmp	r2, r3
 8005356:	d001      	beq.n	800535c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005358:	2301      	movs	r3, #1
 800535a:	e000      	b.n	800535e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800535c:	2300      	movs	r3, #0
}
 800535e:	4618      	mov	r0, r3
 8005360:	3718      	adds	r7, #24
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}
 8005366:	bf00      	nop
 8005368:	40023800 	.word	0x40023800

0800536c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b084      	sub	sp, #16
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
 8005374:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d101      	bne.n	8005380 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800537c:	2301      	movs	r3, #1
 800537e:	e0cc      	b.n	800551a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005380:	4b68      	ldr	r3, [pc, #416]	@ (8005524 <HAL_RCC_ClockConfig+0x1b8>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f003 0307 	and.w	r3, r3, #7
 8005388:	683a      	ldr	r2, [r7, #0]
 800538a:	429a      	cmp	r2, r3
 800538c:	d90c      	bls.n	80053a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800538e:	4b65      	ldr	r3, [pc, #404]	@ (8005524 <HAL_RCC_ClockConfig+0x1b8>)
 8005390:	683a      	ldr	r2, [r7, #0]
 8005392:	b2d2      	uxtb	r2, r2
 8005394:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005396:	4b63      	ldr	r3, [pc, #396]	@ (8005524 <HAL_RCC_ClockConfig+0x1b8>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f003 0307 	and.w	r3, r3, #7
 800539e:	683a      	ldr	r2, [r7, #0]
 80053a0:	429a      	cmp	r2, r3
 80053a2:	d001      	beq.n	80053a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80053a4:	2301      	movs	r3, #1
 80053a6:	e0b8      	b.n	800551a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f003 0302 	and.w	r3, r3, #2
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d020      	beq.n	80053f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f003 0304 	and.w	r3, r3, #4
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d005      	beq.n	80053cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80053c0:	4b59      	ldr	r3, [pc, #356]	@ (8005528 <HAL_RCC_ClockConfig+0x1bc>)
 80053c2:	689b      	ldr	r3, [r3, #8]
 80053c4:	4a58      	ldr	r2, [pc, #352]	@ (8005528 <HAL_RCC_ClockConfig+0x1bc>)
 80053c6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80053ca:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f003 0308 	and.w	r3, r3, #8
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d005      	beq.n	80053e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80053d8:	4b53      	ldr	r3, [pc, #332]	@ (8005528 <HAL_RCC_ClockConfig+0x1bc>)
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	4a52      	ldr	r2, [pc, #328]	@ (8005528 <HAL_RCC_ClockConfig+0x1bc>)
 80053de:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80053e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053e4:	4b50      	ldr	r3, [pc, #320]	@ (8005528 <HAL_RCC_ClockConfig+0x1bc>)
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	494d      	ldr	r1, [pc, #308]	@ (8005528 <HAL_RCC_ClockConfig+0x1bc>)
 80053f2:	4313      	orrs	r3, r2
 80053f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f003 0301 	and.w	r3, r3, #1
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d044      	beq.n	800548c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	2b01      	cmp	r3, #1
 8005408:	d107      	bne.n	800541a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800540a:	4b47      	ldr	r3, [pc, #284]	@ (8005528 <HAL_RCC_ClockConfig+0x1bc>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005412:	2b00      	cmp	r3, #0
 8005414:	d119      	bne.n	800544a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005416:	2301      	movs	r3, #1
 8005418:	e07f      	b.n	800551a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	2b02      	cmp	r3, #2
 8005420:	d003      	beq.n	800542a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005426:	2b03      	cmp	r3, #3
 8005428:	d107      	bne.n	800543a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800542a:	4b3f      	ldr	r3, [pc, #252]	@ (8005528 <HAL_RCC_ClockConfig+0x1bc>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005432:	2b00      	cmp	r3, #0
 8005434:	d109      	bne.n	800544a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	e06f      	b.n	800551a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800543a:	4b3b      	ldr	r3, [pc, #236]	@ (8005528 <HAL_RCC_ClockConfig+0x1bc>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f003 0302 	and.w	r3, r3, #2
 8005442:	2b00      	cmp	r3, #0
 8005444:	d101      	bne.n	800544a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005446:	2301      	movs	r3, #1
 8005448:	e067      	b.n	800551a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800544a:	4b37      	ldr	r3, [pc, #220]	@ (8005528 <HAL_RCC_ClockConfig+0x1bc>)
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	f023 0203 	bic.w	r2, r3, #3
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	4934      	ldr	r1, [pc, #208]	@ (8005528 <HAL_RCC_ClockConfig+0x1bc>)
 8005458:	4313      	orrs	r3, r2
 800545a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800545c:	f7fc fae6 	bl	8001a2c <HAL_GetTick>
 8005460:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005462:	e00a      	b.n	800547a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005464:	f7fc fae2 	bl	8001a2c <HAL_GetTick>
 8005468:	4602      	mov	r2, r0
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	1ad3      	subs	r3, r2, r3
 800546e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005472:	4293      	cmp	r3, r2
 8005474:	d901      	bls.n	800547a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005476:	2303      	movs	r3, #3
 8005478:	e04f      	b.n	800551a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800547a:	4b2b      	ldr	r3, [pc, #172]	@ (8005528 <HAL_RCC_ClockConfig+0x1bc>)
 800547c:	689b      	ldr	r3, [r3, #8]
 800547e:	f003 020c 	and.w	r2, r3, #12
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	009b      	lsls	r3, r3, #2
 8005488:	429a      	cmp	r2, r3
 800548a:	d1eb      	bne.n	8005464 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800548c:	4b25      	ldr	r3, [pc, #148]	@ (8005524 <HAL_RCC_ClockConfig+0x1b8>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f003 0307 	and.w	r3, r3, #7
 8005494:	683a      	ldr	r2, [r7, #0]
 8005496:	429a      	cmp	r2, r3
 8005498:	d20c      	bcs.n	80054b4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800549a:	4b22      	ldr	r3, [pc, #136]	@ (8005524 <HAL_RCC_ClockConfig+0x1b8>)
 800549c:	683a      	ldr	r2, [r7, #0]
 800549e:	b2d2      	uxtb	r2, r2
 80054a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80054a2:	4b20      	ldr	r3, [pc, #128]	@ (8005524 <HAL_RCC_ClockConfig+0x1b8>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f003 0307 	and.w	r3, r3, #7
 80054aa:	683a      	ldr	r2, [r7, #0]
 80054ac:	429a      	cmp	r2, r3
 80054ae:	d001      	beq.n	80054b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80054b0:	2301      	movs	r3, #1
 80054b2:	e032      	b.n	800551a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f003 0304 	and.w	r3, r3, #4
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d008      	beq.n	80054d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80054c0:	4b19      	ldr	r3, [pc, #100]	@ (8005528 <HAL_RCC_ClockConfig+0x1bc>)
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	68db      	ldr	r3, [r3, #12]
 80054cc:	4916      	ldr	r1, [pc, #88]	@ (8005528 <HAL_RCC_ClockConfig+0x1bc>)
 80054ce:	4313      	orrs	r3, r2
 80054d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f003 0308 	and.w	r3, r3, #8
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d009      	beq.n	80054f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80054de:	4b12      	ldr	r3, [pc, #72]	@ (8005528 <HAL_RCC_ClockConfig+0x1bc>)
 80054e0:	689b      	ldr	r3, [r3, #8]
 80054e2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	691b      	ldr	r3, [r3, #16]
 80054ea:	00db      	lsls	r3, r3, #3
 80054ec:	490e      	ldr	r1, [pc, #56]	@ (8005528 <HAL_RCC_ClockConfig+0x1bc>)
 80054ee:	4313      	orrs	r3, r2
 80054f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80054f2:	f000 f821 	bl	8005538 <HAL_RCC_GetSysClockFreq>
 80054f6:	4602      	mov	r2, r0
 80054f8:	4b0b      	ldr	r3, [pc, #44]	@ (8005528 <HAL_RCC_ClockConfig+0x1bc>)
 80054fa:	689b      	ldr	r3, [r3, #8]
 80054fc:	091b      	lsrs	r3, r3, #4
 80054fe:	f003 030f 	and.w	r3, r3, #15
 8005502:	490a      	ldr	r1, [pc, #40]	@ (800552c <HAL_RCC_ClockConfig+0x1c0>)
 8005504:	5ccb      	ldrb	r3, [r1, r3]
 8005506:	fa22 f303 	lsr.w	r3, r2, r3
 800550a:	4a09      	ldr	r2, [pc, #36]	@ (8005530 <HAL_RCC_ClockConfig+0x1c4>)
 800550c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800550e:	4b09      	ldr	r3, [pc, #36]	@ (8005534 <HAL_RCC_ClockConfig+0x1c8>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4618      	mov	r0, r3
 8005514:	f7fc fa46 	bl	80019a4 <HAL_InitTick>

  return HAL_OK;
 8005518:	2300      	movs	r3, #0
}
 800551a:	4618      	mov	r0, r3
 800551c:	3710      	adds	r7, #16
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}
 8005522:	bf00      	nop
 8005524:	40023c00 	.word	0x40023c00
 8005528:	40023800 	.word	0x40023800
 800552c:	0800b468 	.word	0x0800b468
 8005530:	20000000 	.word	0x20000000
 8005534:	20000004 	.word	0x20000004

08005538 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005538:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800553c:	b094      	sub	sp, #80	@ 0x50
 800553e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005540:	2300      	movs	r3, #0
 8005542:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005544:	2300      	movs	r3, #0
 8005546:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005548:	2300      	movs	r3, #0
 800554a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800554c:	2300      	movs	r3, #0
 800554e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005550:	4b79      	ldr	r3, [pc, #484]	@ (8005738 <HAL_RCC_GetSysClockFreq+0x200>)
 8005552:	689b      	ldr	r3, [r3, #8]
 8005554:	f003 030c 	and.w	r3, r3, #12
 8005558:	2b08      	cmp	r3, #8
 800555a:	d00d      	beq.n	8005578 <HAL_RCC_GetSysClockFreq+0x40>
 800555c:	2b08      	cmp	r3, #8
 800555e:	f200 80e1 	bhi.w	8005724 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005562:	2b00      	cmp	r3, #0
 8005564:	d002      	beq.n	800556c <HAL_RCC_GetSysClockFreq+0x34>
 8005566:	2b04      	cmp	r3, #4
 8005568:	d003      	beq.n	8005572 <HAL_RCC_GetSysClockFreq+0x3a>
 800556a:	e0db      	b.n	8005724 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800556c:	4b73      	ldr	r3, [pc, #460]	@ (800573c <HAL_RCC_GetSysClockFreq+0x204>)
 800556e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005570:	e0db      	b.n	800572a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005572:	4b73      	ldr	r3, [pc, #460]	@ (8005740 <HAL_RCC_GetSysClockFreq+0x208>)
 8005574:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005576:	e0d8      	b.n	800572a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005578:	4b6f      	ldr	r3, [pc, #444]	@ (8005738 <HAL_RCC_GetSysClockFreq+0x200>)
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005580:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005582:	4b6d      	ldr	r3, [pc, #436]	@ (8005738 <HAL_RCC_GetSysClockFreq+0x200>)
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800558a:	2b00      	cmp	r3, #0
 800558c:	d063      	beq.n	8005656 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800558e:	4b6a      	ldr	r3, [pc, #424]	@ (8005738 <HAL_RCC_GetSysClockFreq+0x200>)
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	099b      	lsrs	r3, r3, #6
 8005594:	2200      	movs	r2, #0
 8005596:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005598:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800559a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800559c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80055a2:	2300      	movs	r3, #0
 80055a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80055a6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80055aa:	4622      	mov	r2, r4
 80055ac:	462b      	mov	r3, r5
 80055ae:	f04f 0000 	mov.w	r0, #0
 80055b2:	f04f 0100 	mov.w	r1, #0
 80055b6:	0159      	lsls	r1, r3, #5
 80055b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80055bc:	0150      	lsls	r0, r2, #5
 80055be:	4602      	mov	r2, r0
 80055c0:	460b      	mov	r3, r1
 80055c2:	4621      	mov	r1, r4
 80055c4:	1a51      	subs	r1, r2, r1
 80055c6:	6139      	str	r1, [r7, #16]
 80055c8:	4629      	mov	r1, r5
 80055ca:	eb63 0301 	sbc.w	r3, r3, r1
 80055ce:	617b      	str	r3, [r7, #20]
 80055d0:	f04f 0200 	mov.w	r2, #0
 80055d4:	f04f 0300 	mov.w	r3, #0
 80055d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80055dc:	4659      	mov	r1, fp
 80055de:	018b      	lsls	r3, r1, #6
 80055e0:	4651      	mov	r1, sl
 80055e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80055e6:	4651      	mov	r1, sl
 80055e8:	018a      	lsls	r2, r1, #6
 80055ea:	4651      	mov	r1, sl
 80055ec:	ebb2 0801 	subs.w	r8, r2, r1
 80055f0:	4659      	mov	r1, fp
 80055f2:	eb63 0901 	sbc.w	r9, r3, r1
 80055f6:	f04f 0200 	mov.w	r2, #0
 80055fa:	f04f 0300 	mov.w	r3, #0
 80055fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005602:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005606:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800560a:	4690      	mov	r8, r2
 800560c:	4699      	mov	r9, r3
 800560e:	4623      	mov	r3, r4
 8005610:	eb18 0303 	adds.w	r3, r8, r3
 8005614:	60bb      	str	r3, [r7, #8]
 8005616:	462b      	mov	r3, r5
 8005618:	eb49 0303 	adc.w	r3, r9, r3
 800561c:	60fb      	str	r3, [r7, #12]
 800561e:	f04f 0200 	mov.w	r2, #0
 8005622:	f04f 0300 	mov.w	r3, #0
 8005626:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800562a:	4629      	mov	r1, r5
 800562c:	024b      	lsls	r3, r1, #9
 800562e:	4621      	mov	r1, r4
 8005630:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005634:	4621      	mov	r1, r4
 8005636:	024a      	lsls	r2, r1, #9
 8005638:	4610      	mov	r0, r2
 800563a:	4619      	mov	r1, r3
 800563c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800563e:	2200      	movs	r2, #0
 8005640:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005642:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005644:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005648:	f7fa fe22 	bl	8000290 <__aeabi_uldivmod>
 800564c:	4602      	mov	r2, r0
 800564e:	460b      	mov	r3, r1
 8005650:	4613      	mov	r3, r2
 8005652:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005654:	e058      	b.n	8005708 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005656:	4b38      	ldr	r3, [pc, #224]	@ (8005738 <HAL_RCC_GetSysClockFreq+0x200>)
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	099b      	lsrs	r3, r3, #6
 800565c:	2200      	movs	r2, #0
 800565e:	4618      	mov	r0, r3
 8005660:	4611      	mov	r1, r2
 8005662:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005666:	623b      	str	r3, [r7, #32]
 8005668:	2300      	movs	r3, #0
 800566a:	627b      	str	r3, [r7, #36]	@ 0x24
 800566c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005670:	4642      	mov	r2, r8
 8005672:	464b      	mov	r3, r9
 8005674:	f04f 0000 	mov.w	r0, #0
 8005678:	f04f 0100 	mov.w	r1, #0
 800567c:	0159      	lsls	r1, r3, #5
 800567e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005682:	0150      	lsls	r0, r2, #5
 8005684:	4602      	mov	r2, r0
 8005686:	460b      	mov	r3, r1
 8005688:	4641      	mov	r1, r8
 800568a:	ebb2 0a01 	subs.w	sl, r2, r1
 800568e:	4649      	mov	r1, r9
 8005690:	eb63 0b01 	sbc.w	fp, r3, r1
 8005694:	f04f 0200 	mov.w	r2, #0
 8005698:	f04f 0300 	mov.w	r3, #0
 800569c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80056a0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80056a4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80056a8:	ebb2 040a 	subs.w	r4, r2, sl
 80056ac:	eb63 050b 	sbc.w	r5, r3, fp
 80056b0:	f04f 0200 	mov.w	r2, #0
 80056b4:	f04f 0300 	mov.w	r3, #0
 80056b8:	00eb      	lsls	r3, r5, #3
 80056ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80056be:	00e2      	lsls	r2, r4, #3
 80056c0:	4614      	mov	r4, r2
 80056c2:	461d      	mov	r5, r3
 80056c4:	4643      	mov	r3, r8
 80056c6:	18e3      	adds	r3, r4, r3
 80056c8:	603b      	str	r3, [r7, #0]
 80056ca:	464b      	mov	r3, r9
 80056cc:	eb45 0303 	adc.w	r3, r5, r3
 80056d0:	607b      	str	r3, [r7, #4]
 80056d2:	f04f 0200 	mov.w	r2, #0
 80056d6:	f04f 0300 	mov.w	r3, #0
 80056da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80056de:	4629      	mov	r1, r5
 80056e0:	028b      	lsls	r3, r1, #10
 80056e2:	4621      	mov	r1, r4
 80056e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80056e8:	4621      	mov	r1, r4
 80056ea:	028a      	lsls	r2, r1, #10
 80056ec:	4610      	mov	r0, r2
 80056ee:	4619      	mov	r1, r3
 80056f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80056f2:	2200      	movs	r2, #0
 80056f4:	61bb      	str	r3, [r7, #24]
 80056f6:	61fa      	str	r2, [r7, #28]
 80056f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80056fc:	f7fa fdc8 	bl	8000290 <__aeabi_uldivmod>
 8005700:	4602      	mov	r2, r0
 8005702:	460b      	mov	r3, r1
 8005704:	4613      	mov	r3, r2
 8005706:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005708:	4b0b      	ldr	r3, [pc, #44]	@ (8005738 <HAL_RCC_GetSysClockFreq+0x200>)
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	0c1b      	lsrs	r3, r3, #16
 800570e:	f003 0303 	and.w	r3, r3, #3
 8005712:	3301      	adds	r3, #1
 8005714:	005b      	lsls	r3, r3, #1
 8005716:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005718:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800571a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800571c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005720:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005722:	e002      	b.n	800572a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005724:	4b05      	ldr	r3, [pc, #20]	@ (800573c <HAL_RCC_GetSysClockFreq+0x204>)
 8005726:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005728:	bf00      	nop
    }
  }
  return sysclockfreq;
 800572a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800572c:	4618      	mov	r0, r3
 800572e:	3750      	adds	r7, #80	@ 0x50
 8005730:	46bd      	mov	sp, r7
 8005732:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005736:	bf00      	nop
 8005738:	40023800 	.word	0x40023800
 800573c:	00f42400 	.word	0x00f42400
 8005740:	007a1200 	.word	0x007a1200

08005744 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005744:	b480      	push	{r7}
 8005746:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005748:	4b03      	ldr	r3, [pc, #12]	@ (8005758 <HAL_RCC_GetHCLKFreq+0x14>)
 800574a:	681b      	ldr	r3, [r3, #0]
}
 800574c:	4618      	mov	r0, r3
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr
 8005756:	bf00      	nop
 8005758:	20000000 	.word	0x20000000

0800575c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005760:	f7ff fff0 	bl	8005744 <HAL_RCC_GetHCLKFreq>
 8005764:	4602      	mov	r2, r0
 8005766:	4b05      	ldr	r3, [pc, #20]	@ (800577c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005768:	689b      	ldr	r3, [r3, #8]
 800576a:	0a9b      	lsrs	r3, r3, #10
 800576c:	f003 0307 	and.w	r3, r3, #7
 8005770:	4903      	ldr	r1, [pc, #12]	@ (8005780 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005772:	5ccb      	ldrb	r3, [r1, r3]
 8005774:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005778:	4618      	mov	r0, r3
 800577a:	bd80      	pop	{r7, pc}
 800577c:	40023800 	.word	0x40023800
 8005780:	0800b478 	.word	0x0800b478

08005784 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005788:	f7ff ffdc 	bl	8005744 <HAL_RCC_GetHCLKFreq>
 800578c:	4602      	mov	r2, r0
 800578e:	4b05      	ldr	r3, [pc, #20]	@ (80057a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	0b5b      	lsrs	r3, r3, #13
 8005794:	f003 0307 	and.w	r3, r3, #7
 8005798:	4903      	ldr	r1, [pc, #12]	@ (80057a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800579a:	5ccb      	ldrb	r3, [r1, r3]
 800579c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	bd80      	pop	{r7, pc}
 80057a4:	40023800 	.word	0x40023800
 80057a8:	0800b478 	.word	0x0800b478

080057ac <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b086      	sub	sp, #24
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80057b4:	2300      	movs	r3, #0
 80057b6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80057b8:	2300      	movs	r3, #0
 80057ba:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f003 0301 	and.w	r3, r3, #1
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d105      	bne.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d035      	beq.n	8005840 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80057d4:	4b62      	ldr	r3, [pc, #392]	@ (8005960 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80057d6:	2200      	movs	r2, #0
 80057d8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80057da:	f7fc f927 	bl	8001a2c <HAL_GetTick>
 80057de:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80057e0:	e008      	b.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80057e2:	f7fc f923 	bl	8001a2c <HAL_GetTick>
 80057e6:	4602      	mov	r2, r0
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	1ad3      	subs	r3, r2, r3
 80057ec:	2b02      	cmp	r3, #2
 80057ee:	d901      	bls.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80057f0:	2303      	movs	r3, #3
 80057f2:	e0b0      	b.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80057f4:	4b5b      	ldr	r3, [pc, #364]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d1f0      	bne.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	019a      	lsls	r2, r3, #6
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	689b      	ldr	r3, [r3, #8]
 800580a:	071b      	lsls	r3, r3, #28
 800580c:	4955      	ldr	r1, [pc, #340]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800580e:	4313      	orrs	r3, r2
 8005810:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005814:	4b52      	ldr	r3, [pc, #328]	@ (8005960 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005816:	2201      	movs	r2, #1
 8005818:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800581a:	f7fc f907 	bl	8001a2c <HAL_GetTick>
 800581e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005820:	e008      	b.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005822:	f7fc f903 	bl	8001a2c <HAL_GetTick>
 8005826:	4602      	mov	r2, r0
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	1ad3      	subs	r3, r2, r3
 800582c:	2b02      	cmp	r3, #2
 800582e:	d901      	bls.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005830:	2303      	movs	r3, #3
 8005832:	e090      	b.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005834:	4b4b      	ldr	r3, [pc, #300]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800583c:	2b00      	cmp	r3, #0
 800583e:	d0f0      	beq.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f003 0302 	and.w	r3, r3, #2
 8005848:	2b00      	cmp	r3, #0
 800584a:	f000 8083 	beq.w	8005954 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800584e:	2300      	movs	r3, #0
 8005850:	60fb      	str	r3, [r7, #12]
 8005852:	4b44      	ldr	r3, [pc, #272]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005856:	4a43      	ldr	r2, [pc, #268]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005858:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800585c:	6413      	str	r3, [r2, #64]	@ 0x40
 800585e:	4b41      	ldr	r3, [pc, #260]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005862:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005866:	60fb      	str	r3, [r7, #12]
 8005868:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800586a:	4b3f      	ldr	r3, [pc, #252]	@ (8005968 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a3e      	ldr	r2, [pc, #248]	@ (8005968 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005870:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005874:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005876:	f7fc f8d9 	bl	8001a2c <HAL_GetTick>
 800587a:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800587c:	e008      	b.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800587e:	f7fc f8d5 	bl	8001a2c <HAL_GetTick>
 8005882:	4602      	mov	r2, r0
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	1ad3      	subs	r3, r2, r3
 8005888:	2b02      	cmp	r3, #2
 800588a:	d901      	bls.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800588c:	2303      	movs	r3, #3
 800588e:	e062      	b.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005890:	4b35      	ldr	r3, [pc, #212]	@ (8005968 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005898:	2b00      	cmp	r3, #0
 800589a:	d0f0      	beq.n	800587e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800589c:	4b31      	ldr	r3, [pc, #196]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800589e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058a0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80058a4:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d02f      	beq.n	800590c <HAL_RCCEx_PeriphCLKConfig+0x160>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	68db      	ldr	r3, [r3, #12]
 80058b0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80058b4:	693a      	ldr	r2, [r7, #16]
 80058b6:	429a      	cmp	r2, r3
 80058b8:	d028      	beq.n	800590c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80058ba:	4b2a      	ldr	r3, [pc, #168]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80058bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80058c2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80058c4:	4b29      	ldr	r3, [pc, #164]	@ (800596c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80058c6:	2201      	movs	r2, #1
 80058c8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80058ca:	4b28      	ldr	r3, [pc, #160]	@ (800596c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80058cc:	2200      	movs	r2, #0
 80058ce:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80058d0:	4a24      	ldr	r2, [pc, #144]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80058d6:	4b23      	ldr	r3, [pc, #140]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80058d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058da:	f003 0301 	and.w	r3, r3, #1
 80058de:	2b01      	cmp	r3, #1
 80058e0:	d114      	bne.n	800590c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80058e2:	f7fc f8a3 	bl	8001a2c <HAL_GetTick>
 80058e6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058e8:	e00a      	b.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058ea:	f7fc f89f 	bl	8001a2c <HAL_GetTick>
 80058ee:	4602      	mov	r2, r0
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	1ad3      	subs	r3, r2, r3
 80058f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d901      	bls.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80058fc:	2303      	movs	r3, #3
 80058fe:	e02a      	b.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005900:	4b18      	ldr	r3, [pc, #96]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005902:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005904:	f003 0302 	and.w	r3, r3, #2
 8005908:	2b00      	cmp	r3, #0
 800590a:	d0ee      	beq.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	68db      	ldr	r3, [r3, #12]
 8005910:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005914:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005918:	d10d      	bne.n	8005936 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800591a:	4b12      	ldr	r3, [pc, #72]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800591c:	689b      	ldr	r3, [r3, #8]
 800591e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	68db      	ldr	r3, [r3, #12]
 8005926:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800592a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800592e:	490d      	ldr	r1, [pc, #52]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005930:	4313      	orrs	r3, r2
 8005932:	608b      	str	r3, [r1, #8]
 8005934:	e005      	b.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005936:	4b0b      	ldr	r3, [pc, #44]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005938:	689b      	ldr	r3, [r3, #8]
 800593a:	4a0a      	ldr	r2, [pc, #40]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800593c:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005940:	6093      	str	r3, [r2, #8]
 8005942:	4b08      	ldr	r3, [pc, #32]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005944:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	68db      	ldr	r3, [r3, #12]
 800594a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800594e:	4905      	ldr	r1, [pc, #20]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005950:	4313      	orrs	r3, r2
 8005952:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005954:	2300      	movs	r3, #0
}
 8005956:	4618      	mov	r0, r3
 8005958:	3718      	adds	r7, #24
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}
 800595e:	bf00      	nop
 8005960:	42470068 	.word	0x42470068
 8005964:	40023800 	.word	0x40023800
 8005968:	40007000 	.word	0x40007000
 800596c:	42470e40 	.word	0x42470e40

08005970 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005970:	b480      	push	{r7}
 8005972:	b087      	sub	sp, #28
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005978:	2300      	movs	r3, #0
 800597a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800597c:	2300      	movs	r3, #0
 800597e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005980:	2300      	movs	r3, #0
 8005982:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005984:	2300      	movs	r3, #0
 8005986:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2b01      	cmp	r3, #1
 800598c:	d13f      	bne.n	8005a0e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800598e:	4b24      	ldr	r3, [pc, #144]	@ (8005a20 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005990:	689b      	ldr	r3, [r3, #8]
 8005992:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005996:	60fb      	str	r3, [r7, #12]
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d006      	beq.n	80059ac <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80059a4:	d12f      	bne.n	8005a06 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80059a6:	4b1f      	ldr	r3, [pc, #124]	@ (8005a24 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80059a8:	617b      	str	r3, [r7, #20]
          break;
 80059aa:	e02f      	b.n	8005a0c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80059ac:	4b1c      	ldr	r3, [pc, #112]	@ (8005a20 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80059b4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80059b8:	d108      	bne.n	80059cc <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80059ba:	4b19      	ldr	r3, [pc, #100]	@ (8005a20 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80059c2:	4a19      	ldr	r2, [pc, #100]	@ (8005a28 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80059c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80059c8:	613b      	str	r3, [r7, #16]
 80059ca:	e007      	b.n	80059dc <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80059cc:	4b14      	ldr	r3, [pc, #80]	@ (8005a20 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80059d4:	4a15      	ldr	r2, [pc, #84]	@ (8005a2c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 80059d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80059da:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80059dc:	4b10      	ldr	r3, [pc, #64]	@ (8005a20 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80059de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80059e2:	099b      	lsrs	r3, r3, #6
 80059e4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	fb02 f303 	mul.w	r3, r2, r3
 80059ee:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80059f0:	4b0b      	ldr	r3, [pc, #44]	@ (8005a20 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80059f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80059f6:	0f1b      	lsrs	r3, r3, #28
 80059f8:	f003 0307 	and.w	r3, r3, #7
 80059fc:	68ba      	ldr	r2, [r7, #8]
 80059fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a02:	617b      	str	r3, [r7, #20]
          break;
 8005a04:	e002      	b.n	8005a0c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8005a06:	2300      	movs	r3, #0
 8005a08:	617b      	str	r3, [r7, #20]
          break;
 8005a0a:	bf00      	nop
        }
      }
      break;
 8005a0c:	e000      	b.n	8005a10 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8005a0e:	bf00      	nop
    }
  }
  return frequency;
 8005a10:	697b      	ldr	r3, [r7, #20]
}
 8005a12:	4618      	mov	r0, r3
 8005a14:	371c      	adds	r7, #28
 8005a16:	46bd      	mov	sp, r7
 8005a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1c:	4770      	bx	lr
 8005a1e:	bf00      	nop
 8005a20:	40023800 	.word	0x40023800
 8005a24:	00bb8000 	.word	0x00bb8000
 8005a28:	007a1200 	.word	0x007a1200
 8005a2c:	00f42400 	.word	0x00f42400

08005a30 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b082      	sub	sp, #8
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d101      	bne.n	8005a42 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	e07b      	b.n	8005b3a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d108      	bne.n	8005a5c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005a52:	d009      	beq.n	8005a68 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2200      	movs	r2, #0
 8005a58:	61da      	str	r2, [r3, #28]
 8005a5a:	e005      	b.n	8005a68 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2200      	movs	r2, #0
 8005a66:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005a74:	b2db      	uxtb	r3, r3
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d106      	bne.n	8005a88 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f7fb fdbc 	bl	8001600 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2202      	movs	r2, #2
 8005a8c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	681a      	ldr	r2, [r3, #0]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005a9e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	689b      	ldr	r3, [r3, #8]
 8005aac:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005ab0:	431a      	orrs	r2, r3
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	68db      	ldr	r3, [r3, #12]
 8005ab6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005aba:	431a      	orrs	r2, r3
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	691b      	ldr	r3, [r3, #16]
 8005ac0:	f003 0302 	and.w	r3, r3, #2
 8005ac4:	431a      	orrs	r2, r3
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	695b      	ldr	r3, [r3, #20]
 8005aca:	f003 0301 	and.w	r3, r3, #1
 8005ace:	431a      	orrs	r2, r3
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	699b      	ldr	r3, [r3, #24]
 8005ad4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005ad8:	431a      	orrs	r2, r3
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	69db      	ldr	r3, [r3, #28]
 8005ade:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005ae2:	431a      	orrs	r2, r3
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6a1b      	ldr	r3, [r3, #32]
 8005ae8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005aec:	ea42 0103 	orr.w	r1, r2, r3
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005af4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	430a      	orrs	r2, r1
 8005afe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	699b      	ldr	r3, [r3, #24]
 8005b04:	0c1b      	lsrs	r3, r3, #16
 8005b06:	f003 0104 	and.w	r1, r3, #4
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b0e:	f003 0210 	and.w	r2, r3, #16
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	430a      	orrs	r2, r1
 8005b18:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	69da      	ldr	r2, [r3, #28]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005b28:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2201      	movs	r2, #1
 8005b34:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005b38:	2300      	movs	r3, #0
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	3708      	adds	r7, #8
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}

08005b42 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b42:	b580      	push	{r7, lr}
 8005b44:	b082      	sub	sp, #8
 8005b46:	af00      	add	r7, sp, #0
 8005b48:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d101      	bne.n	8005b54 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b50:	2301      	movs	r3, #1
 8005b52:	e041      	b.n	8005bd8 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b5a:	b2db      	uxtb	r3, r3
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d106      	bne.n	8005b6e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2200      	movs	r2, #0
 8005b64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	f7fb fd91 	bl	8001690 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2202      	movs	r2, #2
 8005b72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681a      	ldr	r2, [r3, #0]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	3304      	adds	r3, #4
 8005b7e:	4619      	mov	r1, r3
 8005b80:	4610      	mov	r0, r2
 8005b82:	f000 f95d 	bl	8005e40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2201      	movs	r2, #1
 8005b8a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2201      	movs	r2, #1
 8005b92:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2201      	movs	r2, #1
 8005b9a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2201      	movs	r2, #1
 8005ba2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2201      	movs	r2, #1
 8005baa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2201      	movs	r2, #1
 8005bb2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2201      	movs	r2, #1
 8005bba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2201      	movs	r2, #1
 8005bc2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2201      	movs	r2, #1
 8005bca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2201      	movs	r2, #1
 8005bd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005bd6:	2300      	movs	r3, #0
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	3708      	adds	r7, #8
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}

08005be0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b085      	sub	sp, #20
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005bee:	b2db      	uxtb	r3, r3
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	d001      	beq.n	8005bf8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	e046      	b.n	8005c86 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2202      	movs	r2, #2
 8005bfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a23      	ldr	r2, [pc, #140]	@ (8005c94 <HAL_TIM_Base_Start+0xb4>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d022      	beq.n	8005c50 <HAL_TIM_Base_Start+0x70>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c12:	d01d      	beq.n	8005c50 <HAL_TIM_Base_Start+0x70>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4a1f      	ldr	r2, [pc, #124]	@ (8005c98 <HAL_TIM_Base_Start+0xb8>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d018      	beq.n	8005c50 <HAL_TIM_Base_Start+0x70>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4a1e      	ldr	r2, [pc, #120]	@ (8005c9c <HAL_TIM_Base_Start+0xbc>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d013      	beq.n	8005c50 <HAL_TIM_Base_Start+0x70>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a1c      	ldr	r2, [pc, #112]	@ (8005ca0 <HAL_TIM_Base_Start+0xc0>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d00e      	beq.n	8005c50 <HAL_TIM_Base_Start+0x70>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a1b      	ldr	r2, [pc, #108]	@ (8005ca4 <HAL_TIM_Base_Start+0xc4>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d009      	beq.n	8005c50 <HAL_TIM_Base_Start+0x70>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a19      	ldr	r2, [pc, #100]	@ (8005ca8 <HAL_TIM_Base_Start+0xc8>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d004      	beq.n	8005c50 <HAL_TIM_Base_Start+0x70>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a18      	ldr	r2, [pc, #96]	@ (8005cac <HAL_TIM_Base_Start+0xcc>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d111      	bne.n	8005c74 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	689b      	ldr	r3, [r3, #8]
 8005c56:	f003 0307 	and.w	r3, r3, #7
 8005c5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2b06      	cmp	r3, #6
 8005c60:	d010      	beq.n	8005c84 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	681a      	ldr	r2, [r3, #0]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f042 0201 	orr.w	r2, r2, #1
 8005c70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c72:	e007      	b.n	8005c84 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	681a      	ldr	r2, [r3, #0]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f042 0201 	orr.w	r2, r2, #1
 8005c82:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005c84:	2300      	movs	r3, #0
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	3714      	adds	r7, #20
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c90:	4770      	bx	lr
 8005c92:	bf00      	nop
 8005c94:	40010000 	.word	0x40010000
 8005c98:	40000400 	.word	0x40000400
 8005c9c:	40000800 	.word	0x40000800
 8005ca0:	40000c00 	.word	0x40000c00
 8005ca4:	40010400 	.word	0x40010400
 8005ca8:	40014000 	.word	0x40014000
 8005cac:	40001800 	.word	0x40001800

08005cb0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b084      	sub	sp, #16
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
 8005cb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005cc4:	2b01      	cmp	r3, #1
 8005cc6:	d101      	bne.n	8005ccc <HAL_TIM_ConfigClockSource+0x1c>
 8005cc8:	2302      	movs	r3, #2
 8005cca:	e0b4      	b.n	8005e36 <HAL_TIM_ConfigClockSource+0x186>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2201      	movs	r2, #1
 8005cd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2202      	movs	r2, #2
 8005cd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	689b      	ldr	r3, [r3, #8]
 8005ce2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005cea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005cf2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	68ba      	ldr	r2, [r7, #8]
 8005cfa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d04:	d03e      	beq.n	8005d84 <HAL_TIM_ConfigClockSource+0xd4>
 8005d06:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d0a:	f200 8087 	bhi.w	8005e1c <HAL_TIM_ConfigClockSource+0x16c>
 8005d0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d12:	f000 8086 	beq.w	8005e22 <HAL_TIM_ConfigClockSource+0x172>
 8005d16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d1a:	d87f      	bhi.n	8005e1c <HAL_TIM_ConfigClockSource+0x16c>
 8005d1c:	2b70      	cmp	r3, #112	@ 0x70
 8005d1e:	d01a      	beq.n	8005d56 <HAL_TIM_ConfigClockSource+0xa6>
 8005d20:	2b70      	cmp	r3, #112	@ 0x70
 8005d22:	d87b      	bhi.n	8005e1c <HAL_TIM_ConfigClockSource+0x16c>
 8005d24:	2b60      	cmp	r3, #96	@ 0x60
 8005d26:	d050      	beq.n	8005dca <HAL_TIM_ConfigClockSource+0x11a>
 8005d28:	2b60      	cmp	r3, #96	@ 0x60
 8005d2a:	d877      	bhi.n	8005e1c <HAL_TIM_ConfigClockSource+0x16c>
 8005d2c:	2b50      	cmp	r3, #80	@ 0x50
 8005d2e:	d03c      	beq.n	8005daa <HAL_TIM_ConfigClockSource+0xfa>
 8005d30:	2b50      	cmp	r3, #80	@ 0x50
 8005d32:	d873      	bhi.n	8005e1c <HAL_TIM_ConfigClockSource+0x16c>
 8005d34:	2b40      	cmp	r3, #64	@ 0x40
 8005d36:	d058      	beq.n	8005dea <HAL_TIM_ConfigClockSource+0x13a>
 8005d38:	2b40      	cmp	r3, #64	@ 0x40
 8005d3a:	d86f      	bhi.n	8005e1c <HAL_TIM_ConfigClockSource+0x16c>
 8005d3c:	2b30      	cmp	r3, #48	@ 0x30
 8005d3e:	d064      	beq.n	8005e0a <HAL_TIM_ConfigClockSource+0x15a>
 8005d40:	2b30      	cmp	r3, #48	@ 0x30
 8005d42:	d86b      	bhi.n	8005e1c <HAL_TIM_ConfigClockSource+0x16c>
 8005d44:	2b20      	cmp	r3, #32
 8005d46:	d060      	beq.n	8005e0a <HAL_TIM_ConfigClockSource+0x15a>
 8005d48:	2b20      	cmp	r3, #32
 8005d4a:	d867      	bhi.n	8005e1c <HAL_TIM_ConfigClockSource+0x16c>
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d05c      	beq.n	8005e0a <HAL_TIM_ConfigClockSource+0x15a>
 8005d50:	2b10      	cmp	r3, #16
 8005d52:	d05a      	beq.n	8005e0a <HAL_TIM_ConfigClockSource+0x15a>
 8005d54:	e062      	b.n	8005e1c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005d66:	f000 f991 	bl	800608c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	689b      	ldr	r3, [r3, #8]
 8005d70:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005d78:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	68ba      	ldr	r2, [r7, #8]
 8005d80:	609a      	str	r2, [r3, #8]
      break;
 8005d82:	e04f      	b.n	8005e24 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005d94:	f000 f97a 	bl	800608c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	689a      	ldr	r2, [r3, #8]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005da6:	609a      	str	r2, [r3, #8]
      break;
 8005da8:	e03c      	b.n	8005e24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005db6:	461a      	mov	r2, r3
 8005db8:	f000 f8ee 	bl	8005f98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	2150      	movs	r1, #80	@ 0x50
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	f000 f947 	bl	8006056 <TIM_ITRx_SetConfig>
      break;
 8005dc8:	e02c      	b.n	8005e24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005dd6:	461a      	mov	r2, r3
 8005dd8:	f000 f90d 	bl	8005ff6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	2160      	movs	r1, #96	@ 0x60
 8005de2:	4618      	mov	r0, r3
 8005de4:	f000 f937 	bl	8006056 <TIM_ITRx_SetConfig>
      break;
 8005de8:	e01c      	b.n	8005e24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005df6:	461a      	mov	r2, r3
 8005df8:	f000 f8ce 	bl	8005f98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	2140      	movs	r1, #64	@ 0x40
 8005e02:	4618      	mov	r0, r3
 8005e04:	f000 f927 	bl	8006056 <TIM_ITRx_SetConfig>
      break;
 8005e08:	e00c      	b.n	8005e24 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681a      	ldr	r2, [r3, #0]
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4619      	mov	r1, r3
 8005e14:	4610      	mov	r0, r2
 8005e16:	f000 f91e 	bl	8006056 <TIM_ITRx_SetConfig>
      break;
 8005e1a:	e003      	b.n	8005e24 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	73fb      	strb	r3, [r7, #15]
      break;
 8005e20:	e000      	b.n	8005e24 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005e22:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2201      	movs	r2, #1
 8005e28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005e34:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e36:	4618      	mov	r0, r3
 8005e38:	3710      	adds	r7, #16
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bd80      	pop	{r7, pc}
	...

08005e40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b085      	sub	sp, #20
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
 8005e48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	4a46      	ldr	r2, [pc, #280]	@ (8005f6c <TIM_Base_SetConfig+0x12c>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d013      	beq.n	8005e80 <TIM_Base_SetConfig+0x40>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e5e:	d00f      	beq.n	8005e80 <TIM_Base_SetConfig+0x40>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	4a43      	ldr	r2, [pc, #268]	@ (8005f70 <TIM_Base_SetConfig+0x130>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d00b      	beq.n	8005e80 <TIM_Base_SetConfig+0x40>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	4a42      	ldr	r2, [pc, #264]	@ (8005f74 <TIM_Base_SetConfig+0x134>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d007      	beq.n	8005e80 <TIM_Base_SetConfig+0x40>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	4a41      	ldr	r2, [pc, #260]	@ (8005f78 <TIM_Base_SetConfig+0x138>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d003      	beq.n	8005e80 <TIM_Base_SetConfig+0x40>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	4a40      	ldr	r2, [pc, #256]	@ (8005f7c <TIM_Base_SetConfig+0x13c>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d108      	bne.n	8005e92 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	685b      	ldr	r3, [r3, #4]
 8005e8c:	68fa      	ldr	r2, [r7, #12]
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	4a35      	ldr	r2, [pc, #212]	@ (8005f6c <TIM_Base_SetConfig+0x12c>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d02b      	beq.n	8005ef2 <TIM_Base_SetConfig+0xb2>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ea0:	d027      	beq.n	8005ef2 <TIM_Base_SetConfig+0xb2>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	4a32      	ldr	r2, [pc, #200]	@ (8005f70 <TIM_Base_SetConfig+0x130>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d023      	beq.n	8005ef2 <TIM_Base_SetConfig+0xb2>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	4a31      	ldr	r2, [pc, #196]	@ (8005f74 <TIM_Base_SetConfig+0x134>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d01f      	beq.n	8005ef2 <TIM_Base_SetConfig+0xb2>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	4a30      	ldr	r2, [pc, #192]	@ (8005f78 <TIM_Base_SetConfig+0x138>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d01b      	beq.n	8005ef2 <TIM_Base_SetConfig+0xb2>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	4a2f      	ldr	r2, [pc, #188]	@ (8005f7c <TIM_Base_SetConfig+0x13c>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d017      	beq.n	8005ef2 <TIM_Base_SetConfig+0xb2>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	4a2e      	ldr	r2, [pc, #184]	@ (8005f80 <TIM_Base_SetConfig+0x140>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d013      	beq.n	8005ef2 <TIM_Base_SetConfig+0xb2>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	4a2d      	ldr	r2, [pc, #180]	@ (8005f84 <TIM_Base_SetConfig+0x144>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d00f      	beq.n	8005ef2 <TIM_Base_SetConfig+0xb2>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	4a2c      	ldr	r2, [pc, #176]	@ (8005f88 <TIM_Base_SetConfig+0x148>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d00b      	beq.n	8005ef2 <TIM_Base_SetConfig+0xb2>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	4a2b      	ldr	r2, [pc, #172]	@ (8005f8c <TIM_Base_SetConfig+0x14c>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d007      	beq.n	8005ef2 <TIM_Base_SetConfig+0xb2>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	4a2a      	ldr	r2, [pc, #168]	@ (8005f90 <TIM_Base_SetConfig+0x150>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d003      	beq.n	8005ef2 <TIM_Base_SetConfig+0xb2>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	4a29      	ldr	r2, [pc, #164]	@ (8005f94 <TIM_Base_SetConfig+0x154>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d108      	bne.n	8005f04 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ef8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	68db      	ldr	r3, [r3, #12]
 8005efe:	68fa      	ldr	r2, [r7, #12]
 8005f00:	4313      	orrs	r3, r2
 8005f02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	695b      	ldr	r3, [r3, #20]
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	68fa      	ldr	r2, [r7, #12]
 8005f16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	689a      	ldr	r2, [r3, #8]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	681a      	ldr	r2, [r3, #0]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	4a10      	ldr	r2, [pc, #64]	@ (8005f6c <TIM_Base_SetConfig+0x12c>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d003      	beq.n	8005f38 <TIM_Base_SetConfig+0xf8>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	4a12      	ldr	r2, [pc, #72]	@ (8005f7c <TIM_Base_SetConfig+0x13c>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d103      	bne.n	8005f40 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	691a      	ldr	r2, [r3, #16]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2201      	movs	r2, #1
 8005f44:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	691b      	ldr	r3, [r3, #16]
 8005f4a:	f003 0301 	and.w	r3, r3, #1
 8005f4e:	2b01      	cmp	r3, #1
 8005f50:	d105      	bne.n	8005f5e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	691b      	ldr	r3, [r3, #16]
 8005f56:	f023 0201 	bic.w	r2, r3, #1
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	611a      	str	r2, [r3, #16]
  }
}
 8005f5e:	bf00      	nop
 8005f60:	3714      	adds	r7, #20
 8005f62:	46bd      	mov	sp, r7
 8005f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f68:	4770      	bx	lr
 8005f6a:	bf00      	nop
 8005f6c:	40010000 	.word	0x40010000
 8005f70:	40000400 	.word	0x40000400
 8005f74:	40000800 	.word	0x40000800
 8005f78:	40000c00 	.word	0x40000c00
 8005f7c:	40010400 	.word	0x40010400
 8005f80:	40014000 	.word	0x40014000
 8005f84:	40014400 	.word	0x40014400
 8005f88:	40014800 	.word	0x40014800
 8005f8c:	40001800 	.word	0x40001800
 8005f90:	40001c00 	.word	0x40001c00
 8005f94:	40002000 	.word	0x40002000

08005f98 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b087      	sub	sp, #28
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	60f8      	str	r0, [r7, #12]
 8005fa0:	60b9      	str	r1, [r7, #8]
 8005fa2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	6a1b      	ldr	r3, [r3, #32]
 8005fa8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	6a1b      	ldr	r3, [r3, #32]
 8005fae:	f023 0201 	bic.w	r2, r3, #1
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	699b      	ldr	r3, [r3, #24]
 8005fba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005fc2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	011b      	lsls	r3, r3, #4
 8005fc8:	693a      	ldr	r2, [r7, #16]
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	f023 030a 	bic.w	r3, r3, #10
 8005fd4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005fd6:	697a      	ldr	r2, [r7, #20]
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	693a      	ldr	r2, [r7, #16]
 8005fe2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	697a      	ldr	r2, [r7, #20]
 8005fe8:	621a      	str	r2, [r3, #32]
}
 8005fea:	bf00      	nop
 8005fec:	371c      	adds	r7, #28
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff4:	4770      	bx	lr

08005ff6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ff6:	b480      	push	{r7}
 8005ff8:	b087      	sub	sp, #28
 8005ffa:	af00      	add	r7, sp, #0
 8005ffc:	60f8      	str	r0, [r7, #12]
 8005ffe:	60b9      	str	r1, [r7, #8]
 8006000:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	6a1b      	ldr	r3, [r3, #32]
 8006006:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	6a1b      	ldr	r3, [r3, #32]
 800600c:	f023 0210 	bic.w	r2, r3, #16
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	699b      	ldr	r3, [r3, #24]
 8006018:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800601a:	693b      	ldr	r3, [r7, #16]
 800601c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006020:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	031b      	lsls	r3, r3, #12
 8006026:	693a      	ldr	r2, [r7, #16]
 8006028:	4313      	orrs	r3, r2
 800602a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006032:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	011b      	lsls	r3, r3, #4
 8006038:	697a      	ldr	r2, [r7, #20]
 800603a:	4313      	orrs	r3, r2
 800603c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	693a      	ldr	r2, [r7, #16]
 8006042:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	697a      	ldr	r2, [r7, #20]
 8006048:	621a      	str	r2, [r3, #32]
}
 800604a:	bf00      	nop
 800604c:	371c      	adds	r7, #28
 800604e:	46bd      	mov	sp, r7
 8006050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006054:	4770      	bx	lr

08006056 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006056:	b480      	push	{r7}
 8006058:	b085      	sub	sp, #20
 800605a:	af00      	add	r7, sp, #0
 800605c:	6078      	str	r0, [r7, #4]
 800605e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	689b      	ldr	r3, [r3, #8]
 8006064:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800606c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800606e:	683a      	ldr	r2, [r7, #0]
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	4313      	orrs	r3, r2
 8006074:	f043 0307 	orr.w	r3, r3, #7
 8006078:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	68fa      	ldr	r2, [r7, #12]
 800607e:	609a      	str	r2, [r3, #8]
}
 8006080:	bf00      	nop
 8006082:	3714      	adds	r7, #20
 8006084:	46bd      	mov	sp, r7
 8006086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608a:	4770      	bx	lr

0800608c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800608c:	b480      	push	{r7}
 800608e:	b087      	sub	sp, #28
 8006090:	af00      	add	r7, sp, #0
 8006092:	60f8      	str	r0, [r7, #12]
 8006094:	60b9      	str	r1, [r7, #8]
 8006096:	607a      	str	r2, [r7, #4]
 8006098:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	689b      	ldr	r3, [r3, #8]
 800609e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80060a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	021a      	lsls	r2, r3, #8
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	431a      	orrs	r2, r3
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	4313      	orrs	r3, r2
 80060b4:	697a      	ldr	r2, [r7, #20]
 80060b6:	4313      	orrs	r3, r2
 80060b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	697a      	ldr	r2, [r7, #20]
 80060be:	609a      	str	r2, [r3, #8]
}
 80060c0:	bf00      	nop
 80060c2:	371c      	adds	r7, #28
 80060c4:	46bd      	mov	sp, r7
 80060c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ca:	4770      	bx	lr

080060cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80060cc:	b480      	push	{r7}
 80060ce:	b085      	sub	sp, #20
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
 80060d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80060dc:	2b01      	cmp	r3, #1
 80060de:	d101      	bne.n	80060e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80060e0:	2302      	movs	r3, #2
 80060e2:	e05a      	b.n	800619a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2201      	movs	r2, #1
 80060e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2202      	movs	r2, #2
 80060f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	685b      	ldr	r3, [r3, #4]
 80060fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	689b      	ldr	r3, [r3, #8]
 8006102:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800610a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	68fa      	ldr	r2, [r7, #12]
 8006112:	4313      	orrs	r3, r2
 8006114:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	68fa      	ldr	r2, [r7, #12]
 800611c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a21      	ldr	r2, [pc, #132]	@ (80061a8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d022      	beq.n	800616e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006130:	d01d      	beq.n	800616e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a1d      	ldr	r2, [pc, #116]	@ (80061ac <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d018      	beq.n	800616e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a1b      	ldr	r2, [pc, #108]	@ (80061b0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d013      	beq.n	800616e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a1a      	ldr	r2, [pc, #104]	@ (80061b4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d00e      	beq.n	800616e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a18      	ldr	r2, [pc, #96]	@ (80061b8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d009      	beq.n	800616e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a17      	ldr	r2, [pc, #92]	@ (80061bc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d004      	beq.n	800616e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a15      	ldr	r2, [pc, #84]	@ (80061c0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d10c      	bne.n	8006188 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006174:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	685b      	ldr	r3, [r3, #4]
 800617a:	68ba      	ldr	r2, [r7, #8]
 800617c:	4313      	orrs	r3, r2
 800617e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	68ba      	ldr	r2, [r7, #8]
 8006186:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2201      	movs	r2, #1
 800618c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2200      	movs	r2, #0
 8006194:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006198:	2300      	movs	r3, #0
}
 800619a:	4618      	mov	r0, r3
 800619c:	3714      	adds	r7, #20
 800619e:	46bd      	mov	sp, r7
 80061a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a4:	4770      	bx	lr
 80061a6:	bf00      	nop
 80061a8:	40010000 	.word	0x40010000
 80061ac:	40000400 	.word	0x40000400
 80061b0:	40000800 	.word	0x40000800
 80061b4:	40000c00 	.word	0x40000c00
 80061b8:	40010400 	.word	0x40010400
 80061bc:	40014000 	.word	0x40014000
 80061c0:	40001800 	.word	0x40001800

080061c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b082      	sub	sp, #8
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d101      	bne.n	80061d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80061d2:	2301      	movs	r3, #1
 80061d4:	e042      	b.n	800625c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80061dc:	b2db      	uxtb	r3, r3
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d106      	bne.n	80061f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2200      	movs	r2, #0
 80061e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f7fb fa72 	bl	80016d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2224      	movs	r2, #36	@ 0x24
 80061f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	68da      	ldr	r2, [r3, #12]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006206:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	f000 f973 	bl	80064f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	691a      	ldr	r2, [r3, #16]
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800621c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	695a      	ldr	r2, [r3, #20]
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800622c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	68da      	ldr	r2, [r3, #12]
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800623c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2200      	movs	r2, #0
 8006242:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2220      	movs	r2, #32
 8006248:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2220      	movs	r2, #32
 8006250:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2200      	movs	r2, #0
 8006258:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800625a:	2300      	movs	r3, #0
}
 800625c:	4618      	mov	r0, r3
 800625e:	3708      	adds	r7, #8
 8006260:	46bd      	mov	sp, r7
 8006262:	bd80      	pop	{r7, pc}

08006264 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b08a      	sub	sp, #40	@ 0x28
 8006268:	af02      	add	r7, sp, #8
 800626a:	60f8      	str	r0, [r7, #12]
 800626c:	60b9      	str	r1, [r7, #8]
 800626e:	603b      	str	r3, [r7, #0]
 8006270:	4613      	mov	r3, r2
 8006272:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006274:	2300      	movs	r3, #0
 8006276:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800627e:	b2db      	uxtb	r3, r3
 8006280:	2b20      	cmp	r3, #32
 8006282:	d175      	bne.n	8006370 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d002      	beq.n	8006290 <HAL_UART_Transmit+0x2c>
 800628a:	88fb      	ldrh	r3, [r7, #6]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d101      	bne.n	8006294 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006290:	2301      	movs	r3, #1
 8006292:	e06e      	b.n	8006372 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	2200      	movs	r2, #0
 8006298:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	2221      	movs	r2, #33	@ 0x21
 800629e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80062a2:	f7fb fbc3 	bl	8001a2c <HAL_GetTick>
 80062a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	88fa      	ldrh	r2, [r7, #6]
 80062ac:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	88fa      	ldrh	r2, [r7, #6]
 80062b2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062bc:	d108      	bne.n	80062d0 <HAL_UART_Transmit+0x6c>
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	691b      	ldr	r3, [r3, #16]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d104      	bne.n	80062d0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80062c6:	2300      	movs	r3, #0
 80062c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	61bb      	str	r3, [r7, #24]
 80062ce:	e003      	b.n	80062d8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80062d4:	2300      	movs	r3, #0
 80062d6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80062d8:	e02e      	b.n	8006338 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	9300      	str	r3, [sp, #0]
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	2200      	movs	r2, #0
 80062e2:	2180      	movs	r1, #128	@ 0x80
 80062e4:	68f8      	ldr	r0, [r7, #12]
 80062e6:	f000 f848 	bl	800637a <UART_WaitOnFlagUntilTimeout>
 80062ea:	4603      	mov	r3, r0
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d005      	beq.n	80062fc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	2220      	movs	r2, #32
 80062f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80062f8:	2303      	movs	r3, #3
 80062fa:	e03a      	b.n	8006372 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80062fc:	69fb      	ldr	r3, [r7, #28]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d10b      	bne.n	800631a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006302:	69bb      	ldr	r3, [r7, #24]
 8006304:	881b      	ldrh	r3, [r3, #0]
 8006306:	461a      	mov	r2, r3
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006310:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006312:	69bb      	ldr	r3, [r7, #24]
 8006314:	3302      	adds	r3, #2
 8006316:	61bb      	str	r3, [r7, #24]
 8006318:	e007      	b.n	800632a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800631a:	69fb      	ldr	r3, [r7, #28]
 800631c:	781a      	ldrb	r2, [r3, #0]
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006324:	69fb      	ldr	r3, [r7, #28]
 8006326:	3301      	adds	r3, #1
 8006328:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800632e:	b29b      	uxth	r3, r3
 8006330:	3b01      	subs	r3, #1
 8006332:	b29a      	uxth	r2, r3
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800633c:	b29b      	uxth	r3, r3
 800633e:	2b00      	cmp	r3, #0
 8006340:	d1cb      	bne.n	80062da <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	9300      	str	r3, [sp, #0]
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	2200      	movs	r2, #0
 800634a:	2140      	movs	r1, #64	@ 0x40
 800634c:	68f8      	ldr	r0, [r7, #12]
 800634e:	f000 f814 	bl	800637a <UART_WaitOnFlagUntilTimeout>
 8006352:	4603      	mov	r3, r0
 8006354:	2b00      	cmp	r3, #0
 8006356:	d005      	beq.n	8006364 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	2220      	movs	r2, #32
 800635c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006360:	2303      	movs	r3, #3
 8006362:	e006      	b.n	8006372 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	2220      	movs	r2, #32
 8006368:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800636c:	2300      	movs	r3, #0
 800636e:	e000      	b.n	8006372 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006370:	2302      	movs	r3, #2
  }
}
 8006372:	4618      	mov	r0, r3
 8006374:	3720      	adds	r7, #32
 8006376:	46bd      	mov	sp, r7
 8006378:	bd80      	pop	{r7, pc}

0800637a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800637a:	b580      	push	{r7, lr}
 800637c:	b086      	sub	sp, #24
 800637e:	af00      	add	r7, sp, #0
 8006380:	60f8      	str	r0, [r7, #12]
 8006382:	60b9      	str	r1, [r7, #8]
 8006384:	603b      	str	r3, [r7, #0]
 8006386:	4613      	mov	r3, r2
 8006388:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800638a:	e03b      	b.n	8006404 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800638c:	6a3b      	ldr	r3, [r7, #32]
 800638e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006392:	d037      	beq.n	8006404 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006394:	f7fb fb4a 	bl	8001a2c <HAL_GetTick>
 8006398:	4602      	mov	r2, r0
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	1ad3      	subs	r3, r2, r3
 800639e:	6a3a      	ldr	r2, [r7, #32]
 80063a0:	429a      	cmp	r2, r3
 80063a2:	d302      	bcc.n	80063aa <UART_WaitOnFlagUntilTimeout+0x30>
 80063a4:	6a3b      	ldr	r3, [r7, #32]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d101      	bne.n	80063ae <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80063aa:	2303      	movs	r3, #3
 80063ac:	e03a      	b.n	8006424 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	68db      	ldr	r3, [r3, #12]
 80063b4:	f003 0304 	and.w	r3, r3, #4
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d023      	beq.n	8006404 <UART_WaitOnFlagUntilTimeout+0x8a>
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	2b80      	cmp	r3, #128	@ 0x80
 80063c0:	d020      	beq.n	8006404 <UART_WaitOnFlagUntilTimeout+0x8a>
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	2b40      	cmp	r3, #64	@ 0x40
 80063c6:	d01d      	beq.n	8006404 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f003 0308 	and.w	r3, r3, #8
 80063d2:	2b08      	cmp	r3, #8
 80063d4:	d116      	bne.n	8006404 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80063d6:	2300      	movs	r3, #0
 80063d8:	617b      	str	r3, [r7, #20]
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	617b      	str	r3, [r7, #20]
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	685b      	ldr	r3, [r3, #4]
 80063e8:	617b      	str	r3, [r7, #20]
 80063ea:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80063ec:	68f8      	ldr	r0, [r7, #12]
 80063ee:	f000 f81d 	bl	800642c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	2208      	movs	r2, #8
 80063f6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	2200      	movs	r2, #0
 80063fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006400:	2301      	movs	r3, #1
 8006402:	e00f      	b.n	8006424 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	681a      	ldr	r2, [r3, #0]
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	4013      	ands	r3, r2
 800640e:	68ba      	ldr	r2, [r7, #8]
 8006410:	429a      	cmp	r2, r3
 8006412:	bf0c      	ite	eq
 8006414:	2301      	moveq	r3, #1
 8006416:	2300      	movne	r3, #0
 8006418:	b2db      	uxtb	r3, r3
 800641a:	461a      	mov	r2, r3
 800641c:	79fb      	ldrb	r3, [r7, #7]
 800641e:	429a      	cmp	r2, r3
 8006420:	d0b4      	beq.n	800638c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006422:	2300      	movs	r3, #0
}
 8006424:	4618      	mov	r0, r3
 8006426:	3718      	adds	r7, #24
 8006428:	46bd      	mov	sp, r7
 800642a:	bd80      	pop	{r7, pc}

0800642c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800642c:	b480      	push	{r7}
 800642e:	b095      	sub	sp, #84	@ 0x54
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	330c      	adds	r3, #12
 800643a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800643c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800643e:	e853 3f00 	ldrex	r3, [r3]
 8006442:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006444:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006446:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800644a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	330c      	adds	r3, #12
 8006452:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006454:	643a      	str	r2, [r7, #64]	@ 0x40
 8006456:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006458:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800645a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800645c:	e841 2300 	strex	r3, r2, [r1]
 8006460:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006462:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006464:	2b00      	cmp	r3, #0
 8006466:	d1e5      	bne.n	8006434 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	3314      	adds	r3, #20
 800646e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006470:	6a3b      	ldr	r3, [r7, #32]
 8006472:	e853 3f00 	ldrex	r3, [r3]
 8006476:	61fb      	str	r3, [r7, #28]
   return(result);
 8006478:	69fb      	ldr	r3, [r7, #28]
 800647a:	f023 0301 	bic.w	r3, r3, #1
 800647e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	3314      	adds	r3, #20
 8006486:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006488:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800648a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800648c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800648e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006490:	e841 2300 	strex	r3, r2, [r1]
 8006494:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006498:	2b00      	cmp	r3, #0
 800649a:	d1e5      	bne.n	8006468 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064a0:	2b01      	cmp	r3, #1
 80064a2:	d119      	bne.n	80064d8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	330c      	adds	r3, #12
 80064aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	e853 3f00 	ldrex	r3, [r3]
 80064b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	f023 0310 	bic.w	r3, r3, #16
 80064ba:	647b      	str	r3, [r7, #68]	@ 0x44
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	330c      	adds	r3, #12
 80064c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80064c4:	61ba      	str	r2, [r7, #24]
 80064c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064c8:	6979      	ldr	r1, [r7, #20]
 80064ca:	69ba      	ldr	r2, [r7, #24]
 80064cc:	e841 2300 	strex	r3, r2, [r1]
 80064d0:	613b      	str	r3, [r7, #16]
   return(result);
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d1e5      	bne.n	80064a4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2220      	movs	r2, #32
 80064dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2200      	movs	r2, #0
 80064e4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80064e6:	bf00      	nop
 80064e8:	3754      	adds	r7, #84	@ 0x54
 80064ea:	46bd      	mov	sp, r7
 80064ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f0:	4770      	bx	lr
	...

080064f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80064f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80064f8:	b0c0      	sub	sp, #256	@ 0x100
 80064fa:	af00      	add	r7, sp, #0
 80064fc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006500:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	691b      	ldr	r3, [r3, #16]
 8006508:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800650c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006510:	68d9      	ldr	r1, [r3, #12]
 8006512:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006516:	681a      	ldr	r2, [r3, #0]
 8006518:	ea40 0301 	orr.w	r3, r0, r1
 800651c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800651e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006522:	689a      	ldr	r2, [r3, #8]
 8006524:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006528:	691b      	ldr	r3, [r3, #16]
 800652a:	431a      	orrs	r2, r3
 800652c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006530:	695b      	ldr	r3, [r3, #20]
 8006532:	431a      	orrs	r2, r3
 8006534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006538:	69db      	ldr	r3, [r3, #28]
 800653a:	4313      	orrs	r3, r2
 800653c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006540:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	68db      	ldr	r3, [r3, #12]
 8006548:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800654c:	f021 010c 	bic.w	r1, r1, #12
 8006550:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006554:	681a      	ldr	r2, [r3, #0]
 8006556:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800655a:	430b      	orrs	r3, r1
 800655c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800655e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	695b      	ldr	r3, [r3, #20]
 8006566:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800656a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800656e:	6999      	ldr	r1, [r3, #24]
 8006570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006574:	681a      	ldr	r2, [r3, #0]
 8006576:	ea40 0301 	orr.w	r3, r0, r1
 800657a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800657c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006580:	681a      	ldr	r2, [r3, #0]
 8006582:	4b8f      	ldr	r3, [pc, #572]	@ (80067c0 <UART_SetConfig+0x2cc>)
 8006584:	429a      	cmp	r2, r3
 8006586:	d005      	beq.n	8006594 <UART_SetConfig+0xa0>
 8006588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800658c:	681a      	ldr	r2, [r3, #0]
 800658e:	4b8d      	ldr	r3, [pc, #564]	@ (80067c4 <UART_SetConfig+0x2d0>)
 8006590:	429a      	cmp	r2, r3
 8006592:	d104      	bne.n	800659e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006594:	f7ff f8f6 	bl	8005784 <HAL_RCC_GetPCLK2Freq>
 8006598:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800659c:	e003      	b.n	80065a6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800659e:	f7ff f8dd 	bl	800575c <HAL_RCC_GetPCLK1Freq>
 80065a2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80065a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065aa:	69db      	ldr	r3, [r3, #28]
 80065ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80065b0:	f040 810c 	bne.w	80067cc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80065b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80065b8:	2200      	movs	r2, #0
 80065ba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80065be:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80065c2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80065c6:	4622      	mov	r2, r4
 80065c8:	462b      	mov	r3, r5
 80065ca:	1891      	adds	r1, r2, r2
 80065cc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80065ce:	415b      	adcs	r3, r3
 80065d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80065d2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80065d6:	4621      	mov	r1, r4
 80065d8:	eb12 0801 	adds.w	r8, r2, r1
 80065dc:	4629      	mov	r1, r5
 80065de:	eb43 0901 	adc.w	r9, r3, r1
 80065e2:	f04f 0200 	mov.w	r2, #0
 80065e6:	f04f 0300 	mov.w	r3, #0
 80065ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80065ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80065f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80065f6:	4690      	mov	r8, r2
 80065f8:	4699      	mov	r9, r3
 80065fa:	4623      	mov	r3, r4
 80065fc:	eb18 0303 	adds.w	r3, r8, r3
 8006600:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006604:	462b      	mov	r3, r5
 8006606:	eb49 0303 	adc.w	r3, r9, r3
 800660a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800660e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	2200      	movs	r2, #0
 8006616:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800661a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800661e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006622:	460b      	mov	r3, r1
 8006624:	18db      	adds	r3, r3, r3
 8006626:	653b      	str	r3, [r7, #80]	@ 0x50
 8006628:	4613      	mov	r3, r2
 800662a:	eb42 0303 	adc.w	r3, r2, r3
 800662e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006630:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006634:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006638:	f7f9 fe2a 	bl	8000290 <__aeabi_uldivmod>
 800663c:	4602      	mov	r2, r0
 800663e:	460b      	mov	r3, r1
 8006640:	4b61      	ldr	r3, [pc, #388]	@ (80067c8 <UART_SetConfig+0x2d4>)
 8006642:	fba3 2302 	umull	r2, r3, r3, r2
 8006646:	095b      	lsrs	r3, r3, #5
 8006648:	011c      	lsls	r4, r3, #4
 800664a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800664e:	2200      	movs	r2, #0
 8006650:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006654:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006658:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800665c:	4642      	mov	r2, r8
 800665e:	464b      	mov	r3, r9
 8006660:	1891      	adds	r1, r2, r2
 8006662:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006664:	415b      	adcs	r3, r3
 8006666:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006668:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800666c:	4641      	mov	r1, r8
 800666e:	eb12 0a01 	adds.w	sl, r2, r1
 8006672:	4649      	mov	r1, r9
 8006674:	eb43 0b01 	adc.w	fp, r3, r1
 8006678:	f04f 0200 	mov.w	r2, #0
 800667c:	f04f 0300 	mov.w	r3, #0
 8006680:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006684:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006688:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800668c:	4692      	mov	sl, r2
 800668e:	469b      	mov	fp, r3
 8006690:	4643      	mov	r3, r8
 8006692:	eb1a 0303 	adds.w	r3, sl, r3
 8006696:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800669a:	464b      	mov	r3, r9
 800669c:	eb4b 0303 	adc.w	r3, fp, r3
 80066a0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80066a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066a8:	685b      	ldr	r3, [r3, #4]
 80066aa:	2200      	movs	r2, #0
 80066ac:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80066b0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80066b4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80066b8:	460b      	mov	r3, r1
 80066ba:	18db      	adds	r3, r3, r3
 80066bc:	643b      	str	r3, [r7, #64]	@ 0x40
 80066be:	4613      	mov	r3, r2
 80066c0:	eb42 0303 	adc.w	r3, r2, r3
 80066c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80066c6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80066ca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80066ce:	f7f9 fddf 	bl	8000290 <__aeabi_uldivmod>
 80066d2:	4602      	mov	r2, r0
 80066d4:	460b      	mov	r3, r1
 80066d6:	4611      	mov	r1, r2
 80066d8:	4b3b      	ldr	r3, [pc, #236]	@ (80067c8 <UART_SetConfig+0x2d4>)
 80066da:	fba3 2301 	umull	r2, r3, r3, r1
 80066de:	095b      	lsrs	r3, r3, #5
 80066e0:	2264      	movs	r2, #100	@ 0x64
 80066e2:	fb02 f303 	mul.w	r3, r2, r3
 80066e6:	1acb      	subs	r3, r1, r3
 80066e8:	00db      	lsls	r3, r3, #3
 80066ea:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80066ee:	4b36      	ldr	r3, [pc, #216]	@ (80067c8 <UART_SetConfig+0x2d4>)
 80066f0:	fba3 2302 	umull	r2, r3, r3, r2
 80066f4:	095b      	lsrs	r3, r3, #5
 80066f6:	005b      	lsls	r3, r3, #1
 80066f8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80066fc:	441c      	add	r4, r3
 80066fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006702:	2200      	movs	r2, #0
 8006704:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006708:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800670c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006710:	4642      	mov	r2, r8
 8006712:	464b      	mov	r3, r9
 8006714:	1891      	adds	r1, r2, r2
 8006716:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006718:	415b      	adcs	r3, r3
 800671a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800671c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006720:	4641      	mov	r1, r8
 8006722:	1851      	adds	r1, r2, r1
 8006724:	6339      	str	r1, [r7, #48]	@ 0x30
 8006726:	4649      	mov	r1, r9
 8006728:	414b      	adcs	r3, r1
 800672a:	637b      	str	r3, [r7, #52]	@ 0x34
 800672c:	f04f 0200 	mov.w	r2, #0
 8006730:	f04f 0300 	mov.w	r3, #0
 8006734:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006738:	4659      	mov	r1, fp
 800673a:	00cb      	lsls	r3, r1, #3
 800673c:	4651      	mov	r1, sl
 800673e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006742:	4651      	mov	r1, sl
 8006744:	00ca      	lsls	r2, r1, #3
 8006746:	4610      	mov	r0, r2
 8006748:	4619      	mov	r1, r3
 800674a:	4603      	mov	r3, r0
 800674c:	4642      	mov	r2, r8
 800674e:	189b      	adds	r3, r3, r2
 8006750:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006754:	464b      	mov	r3, r9
 8006756:	460a      	mov	r2, r1
 8006758:	eb42 0303 	adc.w	r3, r2, r3
 800675c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006764:	685b      	ldr	r3, [r3, #4]
 8006766:	2200      	movs	r2, #0
 8006768:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800676c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006770:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006774:	460b      	mov	r3, r1
 8006776:	18db      	adds	r3, r3, r3
 8006778:	62bb      	str	r3, [r7, #40]	@ 0x28
 800677a:	4613      	mov	r3, r2
 800677c:	eb42 0303 	adc.w	r3, r2, r3
 8006780:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006782:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006786:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800678a:	f7f9 fd81 	bl	8000290 <__aeabi_uldivmod>
 800678e:	4602      	mov	r2, r0
 8006790:	460b      	mov	r3, r1
 8006792:	4b0d      	ldr	r3, [pc, #52]	@ (80067c8 <UART_SetConfig+0x2d4>)
 8006794:	fba3 1302 	umull	r1, r3, r3, r2
 8006798:	095b      	lsrs	r3, r3, #5
 800679a:	2164      	movs	r1, #100	@ 0x64
 800679c:	fb01 f303 	mul.w	r3, r1, r3
 80067a0:	1ad3      	subs	r3, r2, r3
 80067a2:	00db      	lsls	r3, r3, #3
 80067a4:	3332      	adds	r3, #50	@ 0x32
 80067a6:	4a08      	ldr	r2, [pc, #32]	@ (80067c8 <UART_SetConfig+0x2d4>)
 80067a8:	fba2 2303 	umull	r2, r3, r2, r3
 80067ac:	095b      	lsrs	r3, r3, #5
 80067ae:	f003 0207 	and.w	r2, r3, #7
 80067b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4422      	add	r2, r4
 80067ba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80067bc:	e106      	b.n	80069cc <UART_SetConfig+0x4d8>
 80067be:	bf00      	nop
 80067c0:	40011000 	.word	0x40011000
 80067c4:	40011400 	.word	0x40011400
 80067c8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80067cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80067d0:	2200      	movs	r2, #0
 80067d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80067d6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80067da:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80067de:	4642      	mov	r2, r8
 80067e0:	464b      	mov	r3, r9
 80067e2:	1891      	adds	r1, r2, r2
 80067e4:	6239      	str	r1, [r7, #32]
 80067e6:	415b      	adcs	r3, r3
 80067e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80067ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80067ee:	4641      	mov	r1, r8
 80067f0:	1854      	adds	r4, r2, r1
 80067f2:	4649      	mov	r1, r9
 80067f4:	eb43 0501 	adc.w	r5, r3, r1
 80067f8:	f04f 0200 	mov.w	r2, #0
 80067fc:	f04f 0300 	mov.w	r3, #0
 8006800:	00eb      	lsls	r3, r5, #3
 8006802:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006806:	00e2      	lsls	r2, r4, #3
 8006808:	4614      	mov	r4, r2
 800680a:	461d      	mov	r5, r3
 800680c:	4643      	mov	r3, r8
 800680e:	18e3      	adds	r3, r4, r3
 8006810:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006814:	464b      	mov	r3, r9
 8006816:	eb45 0303 	adc.w	r3, r5, r3
 800681a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800681e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006822:	685b      	ldr	r3, [r3, #4]
 8006824:	2200      	movs	r2, #0
 8006826:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800682a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800682e:	f04f 0200 	mov.w	r2, #0
 8006832:	f04f 0300 	mov.w	r3, #0
 8006836:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800683a:	4629      	mov	r1, r5
 800683c:	008b      	lsls	r3, r1, #2
 800683e:	4621      	mov	r1, r4
 8006840:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006844:	4621      	mov	r1, r4
 8006846:	008a      	lsls	r2, r1, #2
 8006848:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800684c:	f7f9 fd20 	bl	8000290 <__aeabi_uldivmod>
 8006850:	4602      	mov	r2, r0
 8006852:	460b      	mov	r3, r1
 8006854:	4b60      	ldr	r3, [pc, #384]	@ (80069d8 <UART_SetConfig+0x4e4>)
 8006856:	fba3 2302 	umull	r2, r3, r3, r2
 800685a:	095b      	lsrs	r3, r3, #5
 800685c:	011c      	lsls	r4, r3, #4
 800685e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006862:	2200      	movs	r2, #0
 8006864:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006868:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800686c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006870:	4642      	mov	r2, r8
 8006872:	464b      	mov	r3, r9
 8006874:	1891      	adds	r1, r2, r2
 8006876:	61b9      	str	r1, [r7, #24]
 8006878:	415b      	adcs	r3, r3
 800687a:	61fb      	str	r3, [r7, #28]
 800687c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006880:	4641      	mov	r1, r8
 8006882:	1851      	adds	r1, r2, r1
 8006884:	6139      	str	r1, [r7, #16]
 8006886:	4649      	mov	r1, r9
 8006888:	414b      	adcs	r3, r1
 800688a:	617b      	str	r3, [r7, #20]
 800688c:	f04f 0200 	mov.w	r2, #0
 8006890:	f04f 0300 	mov.w	r3, #0
 8006894:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006898:	4659      	mov	r1, fp
 800689a:	00cb      	lsls	r3, r1, #3
 800689c:	4651      	mov	r1, sl
 800689e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80068a2:	4651      	mov	r1, sl
 80068a4:	00ca      	lsls	r2, r1, #3
 80068a6:	4610      	mov	r0, r2
 80068a8:	4619      	mov	r1, r3
 80068aa:	4603      	mov	r3, r0
 80068ac:	4642      	mov	r2, r8
 80068ae:	189b      	adds	r3, r3, r2
 80068b0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80068b4:	464b      	mov	r3, r9
 80068b6:	460a      	mov	r2, r1
 80068b8:	eb42 0303 	adc.w	r3, r2, r3
 80068bc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80068c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068c4:	685b      	ldr	r3, [r3, #4]
 80068c6:	2200      	movs	r2, #0
 80068c8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80068ca:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80068cc:	f04f 0200 	mov.w	r2, #0
 80068d0:	f04f 0300 	mov.w	r3, #0
 80068d4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80068d8:	4649      	mov	r1, r9
 80068da:	008b      	lsls	r3, r1, #2
 80068dc:	4641      	mov	r1, r8
 80068de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80068e2:	4641      	mov	r1, r8
 80068e4:	008a      	lsls	r2, r1, #2
 80068e6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80068ea:	f7f9 fcd1 	bl	8000290 <__aeabi_uldivmod>
 80068ee:	4602      	mov	r2, r0
 80068f0:	460b      	mov	r3, r1
 80068f2:	4611      	mov	r1, r2
 80068f4:	4b38      	ldr	r3, [pc, #224]	@ (80069d8 <UART_SetConfig+0x4e4>)
 80068f6:	fba3 2301 	umull	r2, r3, r3, r1
 80068fa:	095b      	lsrs	r3, r3, #5
 80068fc:	2264      	movs	r2, #100	@ 0x64
 80068fe:	fb02 f303 	mul.w	r3, r2, r3
 8006902:	1acb      	subs	r3, r1, r3
 8006904:	011b      	lsls	r3, r3, #4
 8006906:	3332      	adds	r3, #50	@ 0x32
 8006908:	4a33      	ldr	r2, [pc, #204]	@ (80069d8 <UART_SetConfig+0x4e4>)
 800690a:	fba2 2303 	umull	r2, r3, r2, r3
 800690e:	095b      	lsrs	r3, r3, #5
 8006910:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006914:	441c      	add	r4, r3
 8006916:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800691a:	2200      	movs	r2, #0
 800691c:	673b      	str	r3, [r7, #112]	@ 0x70
 800691e:	677a      	str	r2, [r7, #116]	@ 0x74
 8006920:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006924:	4642      	mov	r2, r8
 8006926:	464b      	mov	r3, r9
 8006928:	1891      	adds	r1, r2, r2
 800692a:	60b9      	str	r1, [r7, #8]
 800692c:	415b      	adcs	r3, r3
 800692e:	60fb      	str	r3, [r7, #12]
 8006930:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006934:	4641      	mov	r1, r8
 8006936:	1851      	adds	r1, r2, r1
 8006938:	6039      	str	r1, [r7, #0]
 800693a:	4649      	mov	r1, r9
 800693c:	414b      	adcs	r3, r1
 800693e:	607b      	str	r3, [r7, #4]
 8006940:	f04f 0200 	mov.w	r2, #0
 8006944:	f04f 0300 	mov.w	r3, #0
 8006948:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800694c:	4659      	mov	r1, fp
 800694e:	00cb      	lsls	r3, r1, #3
 8006950:	4651      	mov	r1, sl
 8006952:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006956:	4651      	mov	r1, sl
 8006958:	00ca      	lsls	r2, r1, #3
 800695a:	4610      	mov	r0, r2
 800695c:	4619      	mov	r1, r3
 800695e:	4603      	mov	r3, r0
 8006960:	4642      	mov	r2, r8
 8006962:	189b      	adds	r3, r3, r2
 8006964:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006966:	464b      	mov	r3, r9
 8006968:	460a      	mov	r2, r1
 800696a:	eb42 0303 	adc.w	r3, r2, r3
 800696e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006974:	685b      	ldr	r3, [r3, #4]
 8006976:	2200      	movs	r2, #0
 8006978:	663b      	str	r3, [r7, #96]	@ 0x60
 800697a:	667a      	str	r2, [r7, #100]	@ 0x64
 800697c:	f04f 0200 	mov.w	r2, #0
 8006980:	f04f 0300 	mov.w	r3, #0
 8006984:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006988:	4649      	mov	r1, r9
 800698a:	008b      	lsls	r3, r1, #2
 800698c:	4641      	mov	r1, r8
 800698e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006992:	4641      	mov	r1, r8
 8006994:	008a      	lsls	r2, r1, #2
 8006996:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800699a:	f7f9 fc79 	bl	8000290 <__aeabi_uldivmod>
 800699e:	4602      	mov	r2, r0
 80069a0:	460b      	mov	r3, r1
 80069a2:	4b0d      	ldr	r3, [pc, #52]	@ (80069d8 <UART_SetConfig+0x4e4>)
 80069a4:	fba3 1302 	umull	r1, r3, r3, r2
 80069a8:	095b      	lsrs	r3, r3, #5
 80069aa:	2164      	movs	r1, #100	@ 0x64
 80069ac:	fb01 f303 	mul.w	r3, r1, r3
 80069b0:	1ad3      	subs	r3, r2, r3
 80069b2:	011b      	lsls	r3, r3, #4
 80069b4:	3332      	adds	r3, #50	@ 0x32
 80069b6:	4a08      	ldr	r2, [pc, #32]	@ (80069d8 <UART_SetConfig+0x4e4>)
 80069b8:	fba2 2303 	umull	r2, r3, r2, r3
 80069bc:	095b      	lsrs	r3, r3, #5
 80069be:	f003 020f 	and.w	r2, r3, #15
 80069c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4422      	add	r2, r4
 80069ca:	609a      	str	r2, [r3, #8]
}
 80069cc:	bf00      	nop
 80069ce:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80069d2:	46bd      	mov	sp, r7
 80069d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80069d8:	51eb851f 	.word	0x51eb851f

080069dc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80069dc:	b084      	sub	sp, #16
 80069de:	b580      	push	{r7, lr}
 80069e0:	b084      	sub	sp, #16
 80069e2:	af00      	add	r7, sp, #0
 80069e4:	6078      	str	r0, [r7, #4]
 80069e6:	f107 001c 	add.w	r0, r7, #28
 80069ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80069ee:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80069f2:	2b01      	cmp	r3, #1
 80069f4:	d123      	bne.n	8006a3e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069fa:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	68db      	ldr	r3, [r3, #12]
 8006a06:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8006a0a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a0e:	687a      	ldr	r2, [r7, #4]
 8006a10:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	68db      	ldr	r3, [r3, #12]
 8006a16:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006a1e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006a22:	2b01      	cmp	r3, #1
 8006a24:	d105      	bne.n	8006a32 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	68db      	ldr	r3, [r3, #12]
 8006a2a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f000 f9dc 	bl	8006df0 <USB_CoreReset>
 8006a38:	4603      	mov	r3, r0
 8006a3a:	73fb      	strb	r3, [r7, #15]
 8006a3c:	e01b      	b.n	8006a76 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	68db      	ldr	r3, [r3, #12]
 8006a42:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f000 f9d0 	bl	8006df0 <USB_CoreReset>
 8006a50:	4603      	mov	r3, r0
 8006a52:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006a54:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d106      	bne.n	8006a6a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a60:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	639a      	str	r2, [r3, #56]	@ 0x38
 8006a68:	e005      	b.n	8006a76 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a6e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006a76:	7fbb      	ldrb	r3, [r7, #30]
 8006a78:	2b01      	cmp	r3, #1
 8006a7a:	d10b      	bne.n	8006a94 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	689b      	ldr	r3, [r3, #8]
 8006a80:	f043 0206 	orr.w	r2, r3, #6
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	689b      	ldr	r3, [r3, #8]
 8006a8c:	f043 0220 	orr.w	r2, r3, #32
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006a94:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a96:	4618      	mov	r0, r3
 8006a98:	3710      	adds	r7, #16
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006aa0:	b004      	add	sp, #16
 8006aa2:	4770      	bx	lr

08006aa4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b083      	sub	sp, #12
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	689b      	ldr	r3, [r3, #8]
 8006ab0:	f043 0201 	orr.w	r2, r3, #1
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006ab8:	2300      	movs	r3, #0
}
 8006aba:	4618      	mov	r0, r3
 8006abc:	370c      	adds	r7, #12
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac4:	4770      	bx	lr

08006ac6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006ac6:	b480      	push	{r7}
 8006ac8:	b083      	sub	sp, #12
 8006aca:	af00      	add	r7, sp, #0
 8006acc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	689b      	ldr	r3, [r3, #8]
 8006ad2:	f023 0201 	bic.w	r2, r3, #1
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006ada:	2300      	movs	r3, #0
}
 8006adc:	4618      	mov	r0, r3
 8006ade:	370c      	adds	r7, #12
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae6:	4770      	bx	lr

08006ae8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b084      	sub	sp, #16
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
 8006af0:	460b      	mov	r3, r1
 8006af2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006af4:	2300      	movs	r3, #0
 8006af6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	68db      	ldr	r3, [r3, #12]
 8006afc:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006b04:	78fb      	ldrb	r3, [r7, #3]
 8006b06:	2b01      	cmp	r3, #1
 8006b08:	d115      	bne.n	8006b36 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	68db      	ldr	r3, [r3, #12]
 8006b0e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006b16:	200a      	movs	r0, #10
 8006b18:	f7fa ff94 	bl	8001a44 <HAL_Delay>
      ms += 10U;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	330a      	adds	r3, #10
 8006b20:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f000 f956 	bl	8006dd4 <USB_GetMode>
 8006b28:	4603      	mov	r3, r0
 8006b2a:	2b01      	cmp	r3, #1
 8006b2c:	d01e      	beq.n	8006b6c <USB_SetCurrentMode+0x84>
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	2bc7      	cmp	r3, #199	@ 0xc7
 8006b32:	d9f0      	bls.n	8006b16 <USB_SetCurrentMode+0x2e>
 8006b34:	e01a      	b.n	8006b6c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006b36:	78fb      	ldrb	r3, [r7, #3]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d115      	bne.n	8006b68 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	68db      	ldr	r3, [r3, #12]
 8006b40:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006b48:	200a      	movs	r0, #10
 8006b4a:	f7fa ff7b 	bl	8001a44 <HAL_Delay>
      ms += 10U;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	330a      	adds	r3, #10
 8006b52:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	f000 f93d 	bl	8006dd4 <USB_GetMode>
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d005      	beq.n	8006b6c <USB_SetCurrentMode+0x84>
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	2bc7      	cmp	r3, #199	@ 0xc7
 8006b64:	d9f0      	bls.n	8006b48 <USB_SetCurrentMode+0x60>
 8006b66:	e001      	b.n	8006b6c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006b68:	2301      	movs	r3, #1
 8006b6a:	e005      	b.n	8006b78 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	2bc8      	cmp	r3, #200	@ 0xc8
 8006b70:	d101      	bne.n	8006b76 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006b72:	2301      	movs	r3, #1
 8006b74:	e000      	b.n	8006b78 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006b76:	2300      	movs	r3, #0
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	3710      	adds	r7, #16
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bd80      	pop	{r7, pc}

08006b80 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006b80:	b480      	push	{r7}
 8006b82:	b085      	sub	sp, #20
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
 8006b88:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	3301      	adds	r3, #1
 8006b92:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006b9a:	d901      	bls.n	8006ba0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006b9c:	2303      	movs	r3, #3
 8006b9e:	e01b      	b.n	8006bd8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	691b      	ldr	r3, [r3, #16]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	daf2      	bge.n	8006b8e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006ba8:	2300      	movs	r3, #0
 8006baa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	019b      	lsls	r3, r3, #6
 8006bb0:	f043 0220 	orr.w	r2, r3, #32
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	3301      	adds	r3, #1
 8006bbc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006bc4:	d901      	bls.n	8006bca <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006bc6:	2303      	movs	r3, #3
 8006bc8:	e006      	b.n	8006bd8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	691b      	ldr	r3, [r3, #16]
 8006bce:	f003 0320 	and.w	r3, r3, #32
 8006bd2:	2b20      	cmp	r3, #32
 8006bd4:	d0f0      	beq.n	8006bb8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006bd6:	2300      	movs	r3, #0
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	3714      	adds	r7, #20
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be2:	4770      	bx	lr

08006be4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006be4:	b480      	push	{r7}
 8006be6:	b085      	sub	sp, #20
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006bec:	2300      	movs	r3, #0
 8006bee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	3301      	adds	r3, #1
 8006bf4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006bfc:	d901      	bls.n	8006c02 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006bfe:	2303      	movs	r3, #3
 8006c00:	e018      	b.n	8006c34 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	691b      	ldr	r3, [r3, #16]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	daf2      	bge.n	8006bf0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2210      	movs	r2, #16
 8006c12:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	3301      	adds	r3, #1
 8006c18:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006c20:	d901      	bls.n	8006c26 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006c22:	2303      	movs	r3, #3
 8006c24:	e006      	b.n	8006c34 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	691b      	ldr	r3, [r3, #16]
 8006c2a:	f003 0310 	and.w	r3, r3, #16
 8006c2e:	2b10      	cmp	r3, #16
 8006c30:	d0f0      	beq.n	8006c14 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006c32:	2300      	movs	r3, #0
}
 8006c34:	4618      	mov	r0, r3
 8006c36:	3714      	adds	r7, #20
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3e:	4770      	bx	lr

08006c40 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006c40:	b480      	push	{r7}
 8006c42:	b089      	sub	sp, #36	@ 0x24
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	60f8      	str	r0, [r7, #12]
 8006c48:	60b9      	str	r1, [r7, #8]
 8006c4a:	4611      	mov	r1, r2
 8006c4c:	461a      	mov	r2, r3
 8006c4e:	460b      	mov	r3, r1
 8006c50:	71fb      	strb	r3, [r7, #7]
 8006c52:	4613      	mov	r3, r2
 8006c54:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006c5a:	68bb      	ldr	r3, [r7, #8]
 8006c5c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006c5e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d123      	bne.n	8006cae <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006c66:	88bb      	ldrh	r3, [r7, #4]
 8006c68:	3303      	adds	r3, #3
 8006c6a:	089b      	lsrs	r3, r3, #2
 8006c6c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006c6e:	2300      	movs	r3, #0
 8006c70:	61bb      	str	r3, [r7, #24]
 8006c72:	e018      	b.n	8006ca6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006c74:	79fb      	ldrb	r3, [r7, #7]
 8006c76:	031a      	lsls	r2, r3, #12
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	4413      	add	r3, r2
 8006c7c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006c80:	461a      	mov	r2, r3
 8006c82:	69fb      	ldr	r3, [r7, #28]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006c88:	69fb      	ldr	r3, [r7, #28]
 8006c8a:	3301      	adds	r3, #1
 8006c8c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006c8e:	69fb      	ldr	r3, [r7, #28]
 8006c90:	3301      	adds	r3, #1
 8006c92:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006c94:	69fb      	ldr	r3, [r7, #28]
 8006c96:	3301      	adds	r3, #1
 8006c98:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006c9a:	69fb      	ldr	r3, [r7, #28]
 8006c9c:	3301      	adds	r3, #1
 8006c9e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006ca0:	69bb      	ldr	r3, [r7, #24]
 8006ca2:	3301      	adds	r3, #1
 8006ca4:	61bb      	str	r3, [r7, #24]
 8006ca6:	69ba      	ldr	r2, [r7, #24]
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	429a      	cmp	r2, r3
 8006cac:	d3e2      	bcc.n	8006c74 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006cae:	2300      	movs	r3, #0
}
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	3724      	adds	r7, #36	@ 0x24
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cba:	4770      	bx	lr

08006cbc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b08b      	sub	sp, #44	@ 0x2c
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	60f8      	str	r0, [r7, #12]
 8006cc4:	60b9      	str	r1, [r7, #8]
 8006cc6:	4613      	mov	r3, r2
 8006cc8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006cce:	68bb      	ldr	r3, [r7, #8]
 8006cd0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006cd2:	88fb      	ldrh	r3, [r7, #6]
 8006cd4:	089b      	lsrs	r3, r3, #2
 8006cd6:	b29b      	uxth	r3, r3
 8006cd8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006cda:	88fb      	ldrh	r3, [r7, #6]
 8006cdc:	f003 0303 	and.w	r3, r3, #3
 8006ce0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	623b      	str	r3, [r7, #32]
 8006ce6:	e014      	b.n	8006d12 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006ce8:	69bb      	ldr	r3, [r7, #24]
 8006cea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006cee:	681a      	ldr	r2, [r3, #0]
 8006cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cf2:	601a      	str	r2, [r3, #0]
    pDest++;
 8006cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cf6:	3301      	adds	r3, #1
 8006cf8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cfc:	3301      	adds	r3, #1
 8006cfe:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006d00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d02:	3301      	adds	r3, #1
 8006d04:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d08:	3301      	adds	r3, #1
 8006d0a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006d0c:	6a3b      	ldr	r3, [r7, #32]
 8006d0e:	3301      	adds	r3, #1
 8006d10:	623b      	str	r3, [r7, #32]
 8006d12:	6a3a      	ldr	r2, [r7, #32]
 8006d14:	697b      	ldr	r3, [r7, #20]
 8006d16:	429a      	cmp	r2, r3
 8006d18:	d3e6      	bcc.n	8006ce8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006d1a:	8bfb      	ldrh	r3, [r7, #30]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d01e      	beq.n	8006d5e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006d20:	2300      	movs	r3, #0
 8006d22:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006d24:	69bb      	ldr	r3, [r7, #24]
 8006d26:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d2a:	461a      	mov	r2, r3
 8006d2c:	f107 0310 	add.w	r3, r7, #16
 8006d30:	6812      	ldr	r2, [r2, #0]
 8006d32:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006d34:	693a      	ldr	r2, [r7, #16]
 8006d36:	6a3b      	ldr	r3, [r7, #32]
 8006d38:	b2db      	uxtb	r3, r3
 8006d3a:	00db      	lsls	r3, r3, #3
 8006d3c:	fa22 f303 	lsr.w	r3, r2, r3
 8006d40:	b2da      	uxtb	r2, r3
 8006d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d44:	701a      	strb	r2, [r3, #0]
      i++;
 8006d46:	6a3b      	ldr	r3, [r7, #32]
 8006d48:	3301      	adds	r3, #1
 8006d4a:	623b      	str	r3, [r7, #32]
      pDest++;
 8006d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d4e:	3301      	adds	r3, #1
 8006d50:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8006d52:	8bfb      	ldrh	r3, [r7, #30]
 8006d54:	3b01      	subs	r3, #1
 8006d56:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006d58:	8bfb      	ldrh	r3, [r7, #30]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d1ea      	bne.n	8006d34 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006d60:	4618      	mov	r0, r3
 8006d62:	372c      	adds	r7, #44	@ 0x2c
 8006d64:	46bd      	mov	sp, r7
 8006d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6a:	4770      	bx	lr

08006d6c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006d6c:	b480      	push	{r7}
 8006d6e:	b085      	sub	sp, #20
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	695b      	ldr	r3, [r3, #20]
 8006d78:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	699b      	ldr	r3, [r3, #24]
 8006d7e:	68fa      	ldr	r2, [r7, #12]
 8006d80:	4013      	ands	r3, r2
 8006d82:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006d84:	68fb      	ldr	r3, [r7, #12]
}
 8006d86:	4618      	mov	r0, r3
 8006d88:	3714      	adds	r7, #20
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d90:	4770      	bx	lr

08006d92 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8006d92:	b480      	push	{r7}
 8006d94:	b085      	sub	sp, #20
 8006d96:	af00      	add	r7, sp, #0
 8006d98:	6078      	str	r0, [r7, #4]
 8006d9a:	460b      	mov	r3, r1
 8006d9c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8006da2:	78fb      	ldrb	r3, [r7, #3]
 8006da4:	015a      	lsls	r2, r3, #5
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	4413      	add	r3, r2
 8006daa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006dae:	689b      	ldr	r3, [r3, #8]
 8006db0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8006db2:	78fb      	ldrb	r3, [r7, #3]
 8006db4:	015a      	lsls	r2, r3, #5
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	4413      	add	r3, r2
 8006dba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006dbe:	68db      	ldr	r3, [r3, #12]
 8006dc0:	68ba      	ldr	r2, [r7, #8]
 8006dc2:	4013      	ands	r3, r2
 8006dc4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006dc6:	68bb      	ldr	r3, [r7, #8]
}
 8006dc8:	4618      	mov	r0, r3
 8006dca:	3714      	adds	r7, #20
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd2:	4770      	bx	lr

08006dd4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b083      	sub	sp, #12
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	695b      	ldr	r3, [r3, #20]
 8006de0:	f003 0301 	and.w	r3, r3, #1
}
 8006de4:	4618      	mov	r0, r3
 8006de6:	370c      	adds	r7, #12
 8006de8:	46bd      	mov	sp, r7
 8006dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dee:	4770      	bx	lr

08006df0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006df0:	b480      	push	{r7}
 8006df2:	b085      	sub	sp, #20
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006df8:	2300      	movs	r3, #0
 8006dfa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	3301      	adds	r3, #1
 8006e00:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006e08:	d901      	bls.n	8006e0e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006e0a:	2303      	movs	r3, #3
 8006e0c:	e01b      	b.n	8006e46 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	691b      	ldr	r3, [r3, #16]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	daf2      	bge.n	8006dfc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006e16:	2300      	movs	r3, #0
 8006e18:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	691b      	ldr	r3, [r3, #16]
 8006e1e:	f043 0201 	orr.w	r2, r3, #1
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	3301      	adds	r3, #1
 8006e2a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006e32:	d901      	bls.n	8006e38 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006e34:	2303      	movs	r3, #3
 8006e36:	e006      	b.n	8006e46 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	691b      	ldr	r3, [r3, #16]
 8006e3c:	f003 0301 	and.w	r3, r3, #1
 8006e40:	2b01      	cmp	r3, #1
 8006e42:	d0f0      	beq.n	8006e26 <USB_CoreReset+0x36>

  return HAL_OK;
 8006e44:	2300      	movs	r3, #0
}
 8006e46:	4618      	mov	r0, r3
 8006e48:	3714      	adds	r7, #20
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e50:	4770      	bx	lr
	...

08006e54 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006e54:	b084      	sub	sp, #16
 8006e56:	b580      	push	{r7, lr}
 8006e58:	b086      	sub	sp, #24
 8006e5a:	af00      	add	r7, sp, #0
 8006e5c:	6078      	str	r0, [r7, #4]
 8006e5e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006e62:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006e66:	2300      	movs	r3, #0
 8006e68:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006e74:	461a      	mov	r2, r3
 8006e76:	2300      	movs	r3, #0
 8006e78:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e7e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e8a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e96:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	68db      	ldr	r3, [r3, #12]
 8006ea2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d119      	bne.n	8006ede <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8006eaa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006eae:	2b01      	cmp	r3, #1
 8006eb0:	d10a      	bne.n	8006ec8 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	68fa      	ldr	r2, [r7, #12]
 8006ebc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006ec0:	f043 0304 	orr.w	r3, r3, #4
 8006ec4:	6013      	str	r3, [r2, #0]
 8006ec6:	e014      	b.n	8006ef2 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	68fa      	ldr	r2, [r7, #12]
 8006ed2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006ed6:	f023 0304 	bic.w	r3, r3, #4
 8006eda:	6013      	str	r3, [r2, #0]
 8006edc:	e009      	b.n	8006ef2 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	68fa      	ldr	r2, [r7, #12]
 8006ee8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006eec:	f023 0304 	bic.w	r3, r3, #4
 8006ef0:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006ef2:	2110      	movs	r1, #16
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f7ff fe43 	bl	8006b80 <USB_FlushTxFifo>
 8006efa:	4603      	mov	r3, r0
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d001      	beq.n	8006f04 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8006f00:	2301      	movs	r3, #1
 8006f02:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006f04:	6878      	ldr	r0, [r7, #4]
 8006f06:	f7ff fe6d 	bl	8006be4 <USB_FlushRxFifo>
 8006f0a:	4603      	mov	r3, r0
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d001      	beq.n	8006f14 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8006f10:	2301      	movs	r3, #1
 8006f12:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006f14:	2300      	movs	r3, #0
 8006f16:	613b      	str	r3, [r7, #16]
 8006f18:	e015      	b.n	8006f46 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8006f1a:	693b      	ldr	r3, [r7, #16]
 8006f1c:	015a      	lsls	r2, r3, #5
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	4413      	add	r3, r2
 8006f22:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f26:	461a      	mov	r2, r3
 8006f28:	f04f 33ff 	mov.w	r3, #4294967295
 8006f2c:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006f2e:	693b      	ldr	r3, [r7, #16]
 8006f30:	015a      	lsls	r2, r3, #5
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	4413      	add	r3, r2
 8006f36:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f3a:	461a      	mov	r2, r3
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006f40:	693b      	ldr	r3, [r7, #16]
 8006f42:	3301      	adds	r3, #1
 8006f44:	613b      	str	r3, [r7, #16]
 8006f46:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006f4a:	461a      	mov	r2, r3
 8006f4c:	693b      	ldr	r3, [r7, #16]
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d3e3      	bcc.n	8006f1a <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2200      	movs	r2, #0
 8006f56:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f04f 32ff 	mov.w	r2, #4294967295
 8006f5e:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	4a18      	ldr	r2, [pc, #96]	@ (8006fc4 <USB_HostInit+0x170>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d10b      	bne.n	8006f80 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006f6e:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	4a15      	ldr	r2, [pc, #84]	@ (8006fc8 <USB_HostInit+0x174>)
 8006f74:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	4a14      	ldr	r2, [pc, #80]	@ (8006fcc <USB_HostInit+0x178>)
 8006f7a:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8006f7e:	e009      	b.n	8006f94 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2280      	movs	r2, #128	@ 0x80
 8006f84:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	4a11      	ldr	r2, [pc, #68]	@ (8006fd0 <USB_HostInit+0x17c>)
 8006f8a:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	4a11      	ldr	r2, [pc, #68]	@ (8006fd4 <USB_HostInit+0x180>)
 8006f90:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006f94:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d105      	bne.n	8006fa8 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	699b      	ldr	r3, [r3, #24]
 8006fa0:	f043 0210 	orr.w	r2, r3, #16
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	699a      	ldr	r2, [r3, #24]
 8006fac:	4b0a      	ldr	r3, [pc, #40]	@ (8006fd8 <USB_HostInit+0x184>)
 8006fae:	4313      	orrs	r3, r2
 8006fb0:	687a      	ldr	r2, [r7, #4]
 8006fb2:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8006fb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	3718      	adds	r7, #24
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006fc0:	b004      	add	sp, #16
 8006fc2:	4770      	bx	lr
 8006fc4:	40040000 	.word	0x40040000
 8006fc8:	01000200 	.word	0x01000200
 8006fcc:	00e00300 	.word	0x00e00300
 8006fd0:	00600080 	.word	0x00600080
 8006fd4:	004000e0 	.word	0x004000e0
 8006fd8:	a3200008 	.word	0xa3200008

08006fdc <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006fdc:	b480      	push	{r7}
 8006fde:	b085      	sub	sp, #20
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
 8006fe4:	460b      	mov	r3, r1
 8006fe6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	68fa      	ldr	r2, [r7, #12]
 8006ff6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006ffa:	f023 0303 	bic.w	r3, r3, #3
 8006ffe:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007006:	681a      	ldr	r2, [r3, #0]
 8007008:	78fb      	ldrb	r3, [r7, #3]
 800700a:	f003 0303 	and.w	r3, r3, #3
 800700e:	68f9      	ldr	r1, [r7, #12]
 8007010:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8007014:	4313      	orrs	r3, r2
 8007016:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007018:	78fb      	ldrb	r3, [r7, #3]
 800701a:	2b01      	cmp	r3, #1
 800701c:	d107      	bne.n	800702e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007024:	461a      	mov	r2, r3
 8007026:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800702a:	6053      	str	r3, [r2, #4]
 800702c:	e00c      	b.n	8007048 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800702e:	78fb      	ldrb	r3, [r7, #3]
 8007030:	2b02      	cmp	r3, #2
 8007032:	d107      	bne.n	8007044 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800703a:	461a      	mov	r2, r3
 800703c:	f241 7370 	movw	r3, #6000	@ 0x1770
 8007040:	6053      	str	r3, [r2, #4]
 8007042:	e001      	b.n	8007048 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8007044:	2301      	movs	r3, #1
 8007046:	e000      	b.n	800704a <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8007048:	2300      	movs	r3, #0
}
 800704a:	4618      	mov	r0, r3
 800704c:	3714      	adds	r7, #20
 800704e:	46bd      	mov	sp, r7
 8007050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007054:	4770      	bx	lr

08007056 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8007056:	b580      	push	{r7, lr}
 8007058:	b084      	sub	sp, #16
 800705a:	af00      	add	r7, sp, #0
 800705c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8007062:	2300      	movs	r3, #0
 8007064:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8007076:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	68fa      	ldr	r2, [r7, #12]
 800707c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007080:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007084:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8007086:	2064      	movs	r0, #100	@ 0x64
 8007088:	f7fa fcdc 	bl	8001a44 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800708c:	68bb      	ldr	r3, [r7, #8]
 800708e:	68fa      	ldr	r2, [r7, #12]
 8007090:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007094:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007098:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800709a:	200a      	movs	r0, #10
 800709c:	f7fa fcd2 	bl	8001a44 <HAL_Delay>

  return HAL_OK;
 80070a0:	2300      	movs	r3, #0
}
 80070a2:	4618      	mov	r0, r3
 80070a4:	3710      	adds	r7, #16
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bd80      	pop	{r7, pc}

080070aa <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80070aa:	b480      	push	{r7}
 80070ac:	b085      	sub	sp, #20
 80070ae:	af00      	add	r7, sp, #0
 80070b0:	6078      	str	r0, [r7, #4]
 80070b2:	460b      	mov	r3, r1
 80070b4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80070ba:	2300      	movs	r3, #0
 80070bc:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80070ce:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d109      	bne.n	80070ee <USB_DriveVbus+0x44>
 80070da:	78fb      	ldrb	r3, [r7, #3]
 80070dc:	2b01      	cmp	r3, #1
 80070de:	d106      	bne.n	80070ee <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	68fa      	ldr	r2, [r7, #12]
 80070e4:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80070e8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80070ec:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80070ee:	68bb      	ldr	r3, [r7, #8]
 80070f0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80070f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80070f8:	d109      	bne.n	800710e <USB_DriveVbus+0x64>
 80070fa:	78fb      	ldrb	r3, [r7, #3]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d106      	bne.n	800710e <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	68fa      	ldr	r2, [r7, #12]
 8007104:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007108:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800710c:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800710e:	2300      	movs	r3, #0
}
 8007110:	4618      	mov	r0, r3
 8007112:	3714      	adds	r7, #20
 8007114:	46bd      	mov	sp, r7
 8007116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711a:	4770      	bx	lr

0800711c <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 800711c:	b480      	push	{r7}
 800711e:	b085      	sub	sp, #20
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007128:	2300      	movs	r3, #0
 800712a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	0c5b      	lsrs	r3, r3, #17
 800713a:	f003 0303 	and.w	r3, r3, #3
}
 800713e:	4618      	mov	r0, r3
 8007140:	3714      	adds	r7, #20
 8007142:	46bd      	mov	sp, r7
 8007144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007148:	4770      	bx	lr

0800714a <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 800714a:	b480      	push	{r7}
 800714c:	b085      	sub	sp, #20
 800714e:	af00      	add	r7, sp, #0
 8007150:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800715c:	689b      	ldr	r3, [r3, #8]
 800715e:	b29b      	uxth	r3, r3
}
 8007160:	4618      	mov	r0, r3
 8007162:	3714      	adds	r7, #20
 8007164:	46bd      	mov	sp, r7
 8007166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716a:	4770      	bx	lr

0800716c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b088      	sub	sp, #32
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
 8007174:	4608      	mov	r0, r1
 8007176:	4611      	mov	r1, r2
 8007178:	461a      	mov	r2, r3
 800717a:	4603      	mov	r3, r0
 800717c:	70fb      	strb	r3, [r7, #3]
 800717e:	460b      	mov	r3, r1
 8007180:	70bb      	strb	r3, [r7, #2]
 8007182:	4613      	mov	r3, r2
 8007184:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8007186:	2300      	movs	r3, #0
 8007188:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800718e:	78fb      	ldrb	r3, [r7, #3]
 8007190:	015a      	lsls	r2, r3, #5
 8007192:	693b      	ldr	r3, [r7, #16]
 8007194:	4413      	add	r3, r2
 8007196:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800719a:	461a      	mov	r2, r3
 800719c:	f04f 33ff 	mov.w	r3, #4294967295
 80071a0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80071a2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80071a6:	2b03      	cmp	r3, #3
 80071a8:	d87c      	bhi.n	80072a4 <USB_HC_Init+0x138>
 80071aa:	a201      	add	r2, pc, #4	@ (adr r2, 80071b0 <USB_HC_Init+0x44>)
 80071ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071b0:	080071c1 	.word	0x080071c1
 80071b4:	08007267 	.word	0x08007267
 80071b8:	080071c1 	.word	0x080071c1
 80071bc:	08007229 	.word	0x08007229
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80071c0:	78fb      	ldrb	r3, [r7, #3]
 80071c2:	015a      	lsls	r2, r3, #5
 80071c4:	693b      	ldr	r3, [r7, #16]
 80071c6:	4413      	add	r3, r2
 80071c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80071cc:	461a      	mov	r2, r3
 80071ce:	f240 439d 	movw	r3, #1181	@ 0x49d
 80071d2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80071d4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	da10      	bge.n	80071fe <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80071dc:	78fb      	ldrb	r3, [r7, #3]
 80071de:	015a      	lsls	r2, r3, #5
 80071e0:	693b      	ldr	r3, [r7, #16]
 80071e2:	4413      	add	r3, r2
 80071e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80071e8:	68db      	ldr	r3, [r3, #12]
 80071ea:	78fa      	ldrb	r2, [r7, #3]
 80071ec:	0151      	lsls	r1, r2, #5
 80071ee:	693a      	ldr	r2, [r7, #16]
 80071f0:	440a      	add	r2, r1
 80071f2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80071f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80071fa:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 80071fc:	e055      	b.n	80072aa <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	4a6f      	ldr	r2, [pc, #444]	@ (80073c0 <USB_HC_Init+0x254>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d151      	bne.n	80072aa <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8007206:	78fb      	ldrb	r3, [r7, #3]
 8007208:	015a      	lsls	r2, r3, #5
 800720a:	693b      	ldr	r3, [r7, #16]
 800720c:	4413      	add	r3, r2
 800720e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007212:	68db      	ldr	r3, [r3, #12]
 8007214:	78fa      	ldrb	r2, [r7, #3]
 8007216:	0151      	lsls	r1, r2, #5
 8007218:	693a      	ldr	r2, [r7, #16]
 800721a:	440a      	add	r2, r1
 800721c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007220:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8007224:	60d3      	str	r3, [r2, #12]
      break;
 8007226:	e040      	b.n	80072aa <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007228:	78fb      	ldrb	r3, [r7, #3]
 800722a:	015a      	lsls	r2, r3, #5
 800722c:	693b      	ldr	r3, [r7, #16]
 800722e:	4413      	add	r3, r2
 8007230:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007234:	461a      	mov	r2, r3
 8007236:	f240 639d 	movw	r3, #1693	@ 0x69d
 800723a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800723c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007240:	2b00      	cmp	r3, #0
 8007242:	da34      	bge.n	80072ae <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007244:	78fb      	ldrb	r3, [r7, #3]
 8007246:	015a      	lsls	r2, r3, #5
 8007248:	693b      	ldr	r3, [r7, #16]
 800724a:	4413      	add	r3, r2
 800724c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007250:	68db      	ldr	r3, [r3, #12]
 8007252:	78fa      	ldrb	r2, [r7, #3]
 8007254:	0151      	lsls	r1, r2, #5
 8007256:	693a      	ldr	r2, [r7, #16]
 8007258:	440a      	add	r2, r1
 800725a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800725e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007262:	60d3      	str	r3, [r2, #12]
      }

      break;
 8007264:	e023      	b.n	80072ae <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007266:	78fb      	ldrb	r3, [r7, #3]
 8007268:	015a      	lsls	r2, r3, #5
 800726a:	693b      	ldr	r3, [r7, #16]
 800726c:	4413      	add	r3, r2
 800726e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007272:	461a      	mov	r2, r3
 8007274:	f240 2325 	movw	r3, #549	@ 0x225
 8007278:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800727a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800727e:	2b00      	cmp	r3, #0
 8007280:	da17      	bge.n	80072b2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8007282:	78fb      	ldrb	r3, [r7, #3]
 8007284:	015a      	lsls	r2, r3, #5
 8007286:	693b      	ldr	r3, [r7, #16]
 8007288:	4413      	add	r3, r2
 800728a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800728e:	68db      	ldr	r3, [r3, #12]
 8007290:	78fa      	ldrb	r2, [r7, #3]
 8007292:	0151      	lsls	r1, r2, #5
 8007294:	693a      	ldr	r2, [r7, #16]
 8007296:	440a      	add	r2, r1
 8007298:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800729c:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 80072a0:	60d3      	str	r3, [r2, #12]
      }
      break;
 80072a2:	e006      	b.n	80072b2 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 80072a4:	2301      	movs	r3, #1
 80072a6:	77fb      	strb	r3, [r7, #31]
      break;
 80072a8:	e004      	b.n	80072b4 <USB_HC_Init+0x148>
      break;
 80072aa:	bf00      	nop
 80072ac:	e002      	b.n	80072b4 <USB_HC_Init+0x148>
      break;
 80072ae:	bf00      	nop
 80072b0:	e000      	b.n	80072b4 <USB_HC_Init+0x148>
      break;
 80072b2:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80072b4:	78fb      	ldrb	r3, [r7, #3]
 80072b6:	015a      	lsls	r2, r3, #5
 80072b8:	693b      	ldr	r3, [r7, #16]
 80072ba:	4413      	add	r3, r2
 80072bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80072c0:	461a      	mov	r2, r3
 80072c2:	2300      	movs	r3, #0
 80072c4:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80072c6:	78fb      	ldrb	r3, [r7, #3]
 80072c8:	015a      	lsls	r2, r3, #5
 80072ca:	693b      	ldr	r3, [r7, #16]
 80072cc:	4413      	add	r3, r2
 80072ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80072d2:	68db      	ldr	r3, [r3, #12]
 80072d4:	78fa      	ldrb	r2, [r7, #3]
 80072d6:	0151      	lsls	r1, r2, #5
 80072d8:	693a      	ldr	r2, [r7, #16]
 80072da:	440a      	add	r2, r1
 80072dc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80072e0:	f043 0302 	orr.w	r3, r3, #2
 80072e4:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80072e6:	693b      	ldr	r3, [r7, #16]
 80072e8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80072ec:	699a      	ldr	r2, [r3, #24]
 80072ee:	78fb      	ldrb	r3, [r7, #3]
 80072f0:	f003 030f 	and.w	r3, r3, #15
 80072f4:	2101      	movs	r1, #1
 80072f6:	fa01 f303 	lsl.w	r3, r1, r3
 80072fa:	6939      	ldr	r1, [r7, #16]
 80072fc:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8007300:	4313      	orrs	r3, r2
 8007302:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	699b      	ldr	r3, [r3, #24]
 8007308:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8007310:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007314:	2b00      	cmp	r3, #0
 8007316:	da03      	bge.n	8007320 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8007318:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800731c:	61bb      	str	r3, [r7, #24]
 800731e:	e001      	b.n	8007324 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8007320:	2300      	movs	r3, #0
 8007322:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f7ff fef9 	bl	800711c <USB_GetHostSpeed>
 800732a:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800732c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007330:	2b02      	cmp	r3, #2
 8007332:	d106      	bne.n	8007342 <USB_HC_Init+0x1d6>
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	2b02      	cmp	r3, #2
 8007338:	d003      	beq.n	8007342 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800733a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800733e:	617b      	str	r3, [r7, #20]
 8007340:	e001      	b.n	8007346 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8007342:	2300      	movs	r3, #0
 8007344:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007346:	787b      	ldrb	r3, [r7, #1]
 8007348:	059b      	lsls	r3, r3, #22
 800734a:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800734e:	78bb      	ldrb	r3, [r7, #2]
 8007350:	02db      	lsls	r3, r3, #11
 8007352:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007356:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007358:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800735c:	049b      	lsls	r3, r3, #18
 800735e:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007362:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8007364:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8007366:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800736a:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800736c:	69bb      	ldr	r3, [r7, #24]
 800736e:	431a      	orrs	r2, r3
 8007370:	697b      	ldr	r3, [r7, #20]
 8007372:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007374:	78fa      	ldrb	r2, [r7, #3]
 8007376:	0151      	lsls	r1, r2, #5
 8007378:	693a      	ldr	r2, [r7, #16]
 800737a:	440a      	add	r2, r1
 800737c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8007380:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007384:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8007386:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800738a:	2b03      	cmp	r3, #3
 800738c:	d003      	beq.n	8007396 <USB_HC_Init+0x22a>
 800738e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007392:	2b01      	cmp	r3, #1
 8007394:	d10f      	bne.n	80073b6 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8007396:	78fb      	ldrb	r3, [r7, #3]
 8007398:	015a      	lsls	r2, r3, #5
 800739a:	693b      	ldr	r3, [r7, #16]
 800739c:	4413      	add	r3, r2
 800739e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	78fa      	ldrb	r2, [r7, #3]
 80073a6:	0151      	lsls	r1, r2, #5
 80073a8:	693a      	ldr	r2, [r7, #16]
 80073aa:	440a      	add	r2, r1
 80073ac:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80073b0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80073b4:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80073b6:	7ffb      	ldrb	r3, [r7, #31]
}
 80073b8:	4618      	mov	r0, r3
 80073ba:	3720      	adds	r7, #32
 80073bc:	46bd      	mov	sp, r7
 80073be:	bd80      	pop	{r7, pc}
 80073c0:	40040000 	.word	0x40040000

080073c4 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b08c      	sub	sp, #48	@ 0x30
 80073c8:	af02      	add	r7, sp, #8
 80073ca:	60f8      	str	r0, [r7, #12]
 80073cc:	60b9      	str	r1, [r7, #8]
 80073ce:	4613      	mov	r3, r2
 80073d0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	785b      	ldrb	r3, [r3, #1]
 80073da:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 80073dc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80073e0:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	4a5d      	ldr	r2, [pc, #372]	@ (800755c <USB_HC_StartXfer+0x198>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d12f      	bne.n	800744a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 80073ea:	79fb      	ldrb	r3, [r7, #7]
 80073ec:	2b01      	cmp	r3, #1
 80073ee:	d11c      	bne.n	800742a <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	7c9b      	ldrb	r3, [r3, #18]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d003      	beq.n	8007400 <USB_HC_StartXfer+0x3c>
 80073f8:	68bb      	ldr	r3, [r7, #8]
 80073fa:	7c9b      	ldrb	r3, [r3, #18]
 80073fc:	2b02      	cmp	r3, #2
 80073fe:	d124      	bne.n	800744a <USB_HC_StartXfer+0x86>
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	799b      	ldrb	r3, [r3, #6]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d120      	bne.n	800744a <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8007408:	69fb      	ldr	r3, [r7, #28]
 800740a:	015a      	lsls	r2, r3, #5
 800740c:	6a3b      	ldr	r3, [r7, #32]
 800740e:	4413      	add	r3, r2
 8007410:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007414:	68db      	ldr	r3, [r3, #12]
 8007416:	69fa      	ldr	r2, [r7, #28]
 8007418:	0151      	lsls	r1, r2, #5
 800741a:	6a3a      	ldr	r2, [r7, #32]
 800741c:	440a      	add	r2, r1
 800741e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007422:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007426:	60d3      	str	r3, [r2, #12]
 8007428:	e00f      	b.n	800744a <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 800742a:	68bb      	ldr	r3, [r7, #8]
 800742c:	791b      	ldrb	r3, [r3, #4]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d10b      	bne.n	800744a <USB_HC_StartXfer+0x86>
 8007432:	68bb      	ldr	r3, [r7, #8]
 8007434:	795b      	ldrb	r3, [r3, #5]
 8007436:	2b01      	cmp	r3, #1
 8007438:	d107      	bne.n	800744a <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	785b      	ldrb	r3, [r3, #1]
 800743e:	4619      	mov	r1, r3
 8007440:	68f8      	ldr	r0, [r7, #12]
 8007442:	f000 fb6b 	bl	8007b1c <USB_DoPing>
        return HAL_OK;
 8007446:	2300      	movs	r3, #0
 8007448:	e232      	b.n	80078b0 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	799b      	ldrb	r3, [r3, #6]
 800744e:	2b01      	cmp	r3, #1
 8007450:	d158      	bne.n	8007504 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8007452:	2301      	movs	r3, #1
 8007454:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	78db      	ldrb	r3, [r3, #3]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d007      	beq.n	800746e <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800745e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007460:	68ba      	ldr	r2, [r7, #8]
 8007462:	8a92      	ldrh	r2, [r2, #20]
 8007464:	fb03 f202 	mul.w	r2, r3, r2
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	61da      	str	r2, [r3, #28]
 800746c:	e07c      	b.n	8007568 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 800746e:	68bb      	ldr	r3, [r7, #8]
 8007470:	7c9b      	ldrb	r3, [r3, #18]
 8007472:	2b01      	cmp	r3, #1
 8007474:	d130      	bne.n	80074d8 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8007476:	68bb      	ldr	r3, [r7, #8]
 8007478:	6a1b      	ldr	r3, [r3, #32]
 800747a:	2bbc      	cmp	r3, #188	@ 0xbc
 800747c:	d918      	bls.n	80074b0 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	8a9b      	ldrh	r3, [r3, #20]
 8007482:	461a      	mov	r2, r3
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	69da      	ldr	r2, [r3, #28]
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	68db      	ldr	r3, [r3, #12]
 8007494:	2b01      	cmp	r3, #1
 8007496:	d003      	beq.n	80074a0 <USB_HC_StartXfer+0xdc>
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	68db      	ldr	r3, [r3, #12]
 800749c:	2b02      	cmp	r3, #2
 800749e:	d103      	bne.n	80074a8 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	2202      	movs	r2, #2
 80074a4:	60da      	str	r2, [r3, #12]
 80074a6:	e05f      	b.n	8007568 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	2201      	movs	r2, #1
 80074ac:	60da      	str	r2, [r3, #12]
 80074ae:	e05b      	b.n	8007568 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	6a1a      	ldr	r2, [r3, #32]
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	68db      	ldr	r3, [r3, #12]
 80074bc:	2b01      	cmp	r3, #1
 80074be:	d007      	beq.n	80074d0 <USB_HC_StartXfer+0x10c>
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	68db      	ldr	r3, [r3, #12]
 80074c4:	2b02      	cmp	r3, #2
 80074c6:	d003      	beq.n	80074d0 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	2204      	movs	r2, #4
 80074cc:	60da      	str	r2, [r3, #12]
 80074ce:	e04b      	b.n	8007568 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	2203      	movs	r2, #3
 80074d4:	60da      	str	r2, [r3, #12]
 80074d6:	e047      	b.n	8007568 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 80074d8:	79fb      	ldrb	r3, [r7, #7]
 80074da:	2b01      	cmp	r3, #1
 80074dc:	d10d      	bne.n	80074fa <USB_HC_StartXfer+0x136>
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	6a1b      	ldr	r3, [r3, #32]
 80074e2:	68ba      	ldr	r2, [r7, #8]
 80074e4:	8a92      	ldrh	r2, [r2, #20]
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d907      	bls.n	80074fa <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80074ea:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80074ec:	68ba      	ldr	r2, [r7, #8]
 80074ee:	8a92      	ldrh	r2, [r2, #20]
 80074f0:	fb03 f202 	mul.w	r2, r3, r2
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	61da      	str	r2, [r3, #28]
 80074f8:	e036      	b.n	8007568 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80074fa:	68bb      	ldr	r3, [r7, #8]
 80074fc:	6a1a      	ldr	r2, [r3, #32]
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	61da      	str	r2, [r3, #28]
 8007502:	e031      	b.n	8007568 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	6a1b      	ldr	r3, [r3, #32]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d018      	beq.n	800753e <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	6a1b      	ldr	r3, [r3, #32]
 8007510:	68ba      	ldr	r2, [r7, #8]
 8007512:	8a92      	ldrh	r2, [r2, #20]
 8007514:	4413      	add	r3, r2
 8007516:	3b01      	subs	r3, #1
 8007518:	68ba      	ldr	r2, [r7, #8]
 800751a:	8a92      	ldrh	r2, [r2, #20]
 800751c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007520:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8007522:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8007524:	8b7b      	ldrh	r3, [r7, #26]
 8007526:	429a      	cmp	r2, r3
 8007528:	d90b      	bls.n	8007542 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 800752a:	8b7b      	ldrh	r3, [r7, #26]
 800752c:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800752e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007530:	68ba      	ldr	r2, [r7, #8]
 8007532:	8a92      	ldrh	r2, [r2, #20]
 8007534:	fb03 f202 	mul.w	r2, r3, r2
 8007538:	68bb      	ldr	r3, [r7, #8]
 800753a:	61da      	str	r2, [r3, #28]
 800753c:	e001      	b.n	8007542 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 800753e:	2301      	movs	r3, #1
 8007540:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	78db      	ldrb	r3, [r3, #3]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d00a      	beq.n	8007560 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800754a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800754c:	68ba      	ldr	r2, [r7, #8]
 800754e:	8a92      	ldrh	r2, [r2, #20]
 8007550:	fb03 f202 	mul.w	r2, r3, r2
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	61da      	str	r2, [r3, #28]
 8007558:	e006      	b.n	8007568 <USB_HC_StartXfer+0x1a4>
 800755a:	bf00      	nop
 800755c:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	6a1a      	ldr	r2, [r3, #32]
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007568:	68bb      	ldr	r3, [r7, #8]
 800756a:	69db      	ldr	r3, [r3, #28]
 800756c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007570:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007572:	04d9      	lsls	r1, r3, #19
 8007574:	4ba3      	ldr	r3, [pc, #652]	@ (8007804 <USB_HC_StartXfer+0x440>)
 8007576:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007578:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	7d9b      	ldrb	r3, [r3, #22]
 800757e:	075b      	lsls	r3, r3, #29
 8007580:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007584:	69f9      	ldr	r1, [r7, #28]
 8007586:	0148      	lsls	r0, r1, #5
 8007588:	6a39      	ldr	r1, [r7, #32]
 800758a:	4401      	add	r1, r0
 800758c:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007590:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007592:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8007594:	79fb      	ldrb	r3, [r7, #7]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d009      	beq.n	80075ae <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	6999      	ldr	r1, [r3, #24]
 800759e:	69fb      	ldr	r3, [r7, #28]
 80075a0:	015a      	lsls	r2, r3, #5
 80075a2:	6a3b      	ldr	r3, [r7, #32]
 80075a4:	4413      	add	r3, r2
 80075a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80075aa:	460a      	mov	r2, r1
 80075ac:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80075ae:	6a3b      	ldr	r3, [r7, #32]
 80075b0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80075b4:	689b      	ldr	r3, [r3, #8]
 80075b6:	f003 0301 	and.w	r3, r3, #1
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	bf0c      	ite	eq
 80075be:	2301      	moveq	r3, #1
 80075c0:	2300      	movne	r3, #0
 80075c2:	b2db      	uxtb	r3, r3
 80075c4:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80075c6:	69fb      	ldr	r3, [r7, #28]
 80075c8:	015a      	lsls	r2, r3, #5
 80075ca:	6a3b      	ldr	r3, [r7, #32]
 80075cc:	4413      	add	r3, r2
 80075ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	69fa      	ldr	r2, [r7, #28]
 80075d6:	0151      	lsls	r1, r2, #5
 80075d8:	6a3a      	ldr	r2, [r7, #32]
 80075da:	440a      	add	r2, r1
 80075dc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80075e0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80075e4:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80075e6:	69fb      	ldr	r3, [r7, #28]
 80075e8:	015a      	lsls	r2, r3, #5
 80075ea:	6a3b      	ldr	r3, [r7, #32]
 80075ec:	4413      	add	r3, r2
 80075ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80075f2:	681a      	ldr	r2, [r3, #0]
 80075f4:	7e7b      	ldrb	r3, [r7, #25]
 80075f6:	075b      	lsls	r3, r3, #29
 80075f8:	69f9      	ldr	r1, [r7, #28]
 80075fa:	0148      	lsls	r0, r1, #5
 80075fc:	6a39      	ldr	r1, [r7, #32]
 80075fe:	4401      	add	r1, r0
 8007600:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8007604:	4313      	orrs	r3, r2
 8007606:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	799b      	ldrb	r3, [r3, #6]
 800760c:	2b01      	cmp	r3, #1
 800760e:	f040 80c3 	bne.w	8007798 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007612:	68bb      	ldr	r3, [r7, #8]
 8007614:	7c5b      	ldrb	r3, [r3, #17]
 8007616:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8007618:	68ba      	ldr	r2, [r7, #8]
 800761a:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800761c:	4313      	orrs	r3, r2
 800761e:	69fa      	ldr	r2, [r7, #28]
 8007620:	0151      	lsls	r1, r2, #5
 8007622:	6a3a      	ldr	r2, [r7, #32]
 8007624:	440a      	add	r2, r1
 8007626:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800762a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800762e:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8007630:	69fb      	ldr	r3, [r7, #28]
 8007632:	015a      	lsls	r2, r3, #5
 8007634:	6a3b      	ldr	r3, [r7, #32]
 8007636:	4413      	add	r3, r2
 8007638:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800763c:	68db      	ldr	r3, [r3, #12]
 800763e:	69fa      	ldr	r2, [r7, #28]
 8007640:	0151      	lsls	r1, r2, #5
 8007642:	6a3a      	ldr	r2, [r7, #32]
 8007644:	440a      	add	r2, r1
 8007646:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800764a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800764e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	79db      	ldrb	r3, [r3, #7]
 8007654:	2b01      	cmp	r3, #1
 8007656:	d123      	bne.n	80076a0 <USB_HC_StartXfer+0x2dc>
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	78db      	ldrb	r3, [r3, #3]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d11f      	bne.n	80076a0 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8007660:	69fb      	ldr	r3, [r7, #28]
 8007662:	015a      	lsls	r2, r3, #5
 8007664:	6a3b      	ldr	r3, [r7, #32]
 8007666:	4413      	add	r3, r2
 8007668:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800766c:	685b      	ldr	r3, [r3, #4]
 800766e:	69fa      	ldr	r2, [r7, #28]
 8007670:	0151      	lsls	r1, r2, #5
 8007672:	6a3a      	ldr	r2, [r7, #32]
 8007674:	440a      	add	r2, r1
 8007676:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800767a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800767e:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8007680:	69fb      	ldr	r3, [r7, #28]
 8007682:	015a      	lsls	r2, r3, #5
 8007684:	6a3b      	ldr	r3, [r7, #32]
 8007686:	4413      	add	r3, r2
 8007688:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800768c:	68db      	ldr	r3, [r3, #12]
 800768e:	69fa      	ldr	r2, [r7, #28]
 8007690:	0151      	lsls	r1, r2, #5
 8007692:	6a3a      	ldr	r2, [r7, #32]
 8007694:	440a      	add	r2, r1
 8007696:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800769a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800769e:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80076a0:	68bb      	ldr	r3, [r7, #8]
 80076a2:	7c9b      	ldrb	r3, [r3, #18]
 80076a4:	2b01      	cmp	r3, #1
 80076a6:	d003      	beq.n	80076b0 <USB_HC_StartXfer+0x2ec>
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	7c9b      	ldrb	r3, [r3, #18]
 80076ac:	2b03      	cmp	r3, #3
 80076ae:	d117      	bne.n	80076e0 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80076b4:	2b01      	cmp	r3, #1
 80076b6:	d113      	bne.n	80076e0 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	78db      	ldrb	r3, [r3, #3]
 80076bc:	2b01      	cmp	r3, #1
 80076be:	d10f      	bne.n	80076e0 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80076c0:	69fb      	ldr	r3, [r7, #28]
 80076c2:	015a      	lsls	r2, r3, #5
 80076c4:	6a3b      	ldr	r3, [r7, #32]
 80076c6:	4413      	add	r3, r2
 80076c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80076cc:	685b      	ldr	r3, [r3, #4]
 80076ce:	69fa      	ldr	r2, [r7, #28]
 80076d0:	0151      	lsls	r1, r2, #5
 80076d2:	6a3a      	ldr	r2, [r7, #32]
 80076d4:	440a      	add	r2, r1
 80076d6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80076da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80076de:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	7c9b      	ldrb	r3, [r3, #18]
 80076e4:	2b01      	cmp	r3, #1
 80076e6:	d162      	bne.n	80077ae <USB_HC_StartXfer+0x3ea>
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	78db      	ldrb	r3, [r3, #3]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d15e      	bne.n	80077ae <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	68db      	ldr	r3, [r3, #12]
 80076f4:	3b01      	subs	r3, #1
 80076f6:	2b03      	cmp	r3, #3
 80076f8:	d858      	bhi.n	80077ac <USB_HC_StartXfer+0x3e8>
 80076fa:	a201      	add	r2, pc, #4	@ (adr r2, 8007700 <USB_HC_StartXfer+0x33c>)
 80076fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007700:	08007711 	.word	0x08007711
 8007704:	08007733 	.word	0x08007733
 8007708:	08007755 	.word	0x08007755
 800770c:	08007777 	.word	0x08007777
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8007710:	69fb      	ldr	r3, [r7, #28]
 8007712:	015a      	lsls	r2, r3, #5
 8007714:	6a3b      	ldr	r3, [r7, #32]
 8007716:	4413      	add	r3, r2
 8007718:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800771c:	685b      	ldr	r3, [r3, #4]
 800771e:	69fa      	ldr	r2, [r7, #28]
 8007720:	0151      	lsls	r1, r2, #5
 8007722:	6a3a      	ldr	r2, [r7, #32]
 8007724:	440a      	add	r2, r1
 8007726:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800772a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800772e:	6053      	str	r3, [r2, #4]
          break;
 8007730:	e03d      	b.n	80077ae <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8007732:	69fb      	ldr	r3, [r7, #28]
 8007734:	015a      	lsls	r2, r3, #5
 8007736:	6a3b      	ldr	r3, [r7, #32]
 8007738:	4413      	add	r3, r2
 800773a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800773e:	685b      	ldr	r3, [r3, #4]
 8007740:	69fa      	ldr	r2, [r7, #28]
 8007742:	0151      	lsls	r1, r2, #5
 8007744:	6a3a      	ldr	r2, [r7, #32]
 8007746:	440a      	add	r2, r1
 8007748:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800774c:	f043 030e 	orr.w	r3, r3, #14
 8007750:	6053      	str	r3, [r2, #4]
          break;
 8007752:	e02c      	b.n	80077ae <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8007754:	69fb      	ldr	r3, [r7, #28]
 8007756:	015a      	lsls	r2, r3, #5
 8007758:	6a3b      	ldr	r3, [r7, #32]
 800775a:	4413      	add	r3, r2
 800775c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007760:	685b      	ldr	r3, [r3, #4]
 8007762:	69fa      	ldr	r2, [r7, #28]
 8007764:	0151      	lsls	r1, r2, #5
 8007766:	6a3a      	ldr	r2, [r7, #32]
 8007768:	440a      	add	r2, r1
 800776a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800776e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007772:	6053      	str	r3, [r2, #4]
          break;
 8007774:	e01b      	b.n	80077ae <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8007776:	69fb      	ldr	r3, [r7, #28]
 8007778:	015a      	lsls	r2, r3, #5
 800777a:	6a3b      	ldr	r3, [r7, #32]
 800777c:	4413      	add	r3, r2
 800777e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007782:	685b      	ldr	r3, [r3, #4]
 8007784:	69fa      	ldr	r2, [r7, #28]
 8007786:	0151      	lsls	r1, r2, #5
 8007788:	6a3a      	ldr	r2, [r7, #32]
 800778a:	440a      	add	r2, r1
 800778c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007790:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007794:	6053      	str	r3, [r2, #4]
          break;
 8007796:	e00a      	b.n	80077ae <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8007798:	69fb      	ldr	r3, [r7, #28]
 800779a:	015a      	lsls	r2, r3, #5
 800779c:	6a3b      	ldr	r3, [r7, #32]
 800779e:	4413      	add	r3, r2
 80077a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80077a4:	461a      	mov	r2, r3
 80077a6:	2300      	movs	r3, #0
 80077a8:	6053      	str	r3, [r2, #4]
 80077aa:	e000      	b.n	80077ae <USB_HC_StartXfer+0x3ea>
          break;
 80077ac:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80077ae:	69fb      	ldr	r3, [r7, #28]
 80077b0:	015a      	lsls	r2, r3, #5
 80077b2:	6a3b      	ldr	r3, [r7, #32]
 80077b4:	4413      	add	r3, r2
 80077b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80077be:	693b      	ldr	r3, [r7, #16]
 80077c0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80077c4:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	78db      	ldrb	r3, [r3, #3]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d004      	beq.n	80077d8 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80077ce:	693b      	ldr	r3, [r7, #16]
 80077d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80077d4:	613b      	str	r3, [r7, #16]
 80077d6:	e003      	b.n	80077e0 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80077d8:	693b      	ldr	r3, [r7, #16]
 80077da:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80077de:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80077e0:	693b      	ldr	r3, [r7, #16]
 80077e2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80077e6:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80077e8:	69fb      	ldr	r3, [r7, #28]
 80077ea:	015a      	lsls	r2, r3, #5
 80077ec:	6a3b      	ldr	r3, [r7, #32]
 80077ee:	4413      	add	r3, r2
 80077f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80077f4:	461a      	mov	r2, r3
 80077f6:	693b      	ldr	r3, [r7, #16]
 80077f8:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80077fa:	79fb      	ldrb	r3, [r7, #7]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d003      	beq.n	8007808 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8007800:	2300      	movs	r3, #0
 8007802:	e055      	b.n	80078b0 <USB_HC_StartXfer+0x4ec>
 8007804:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	78db      	ldrb	r3, [r3, #3]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d14e      	bne.n	80078ae <USB_HC_StartXfer+0x4ea>
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	6a1b      	ldr	r3, [r3, #32]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d04a      	beq.n	80078ae <USB_HC_StartXfer+0x4ea>
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	79db      	ldrb	r3, [r3, #7]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d146      	bne.n	80078ae <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	7c9b      	ldrb	r3, [r3, #18]
 8007824:	2b03      	cmp	r3, #3
 8007826:	d831      	bhi.n	800788c <USB_HC_StartXfer+0x4c8>
 8007828:	a201      	add	r2, pc, #4	@ (adr r2, 8007830 <USB_HC_StartXfer+0x46c>)
 800782a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800782e:	bf00      	nop
 8007830:	08007841 	.word	0x08007841
 8007834:	08007865 	.word	0x08007865
 8007838:	08007841 	.word	0x08007841
 800783c:	08007865 	.word	0x08007865
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	6a1b      	ldr	r3, [r3, #32]
 8007844:	3303      	adds	r3, #3
 8007846:	089b      	lsrs	r3, r3, #2
 8007848:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800784a:	8afa      	ldrh	r2, [r7, #22]
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007850:	b29b      	uxth	r3, r3
 8007852:	429a      	cmp	r2, r3
 8007854:	d91c      	bls.n	8007890 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	699b      	ldr	r3, [r3, #24]
 800785a:	f043 0220 	orr.w	r2, r3, #32
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	619a      	str	r2, [r3, #24]
        }
        break;
 8007862:	e015      	b.n	8007890 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	6a1b      	ldr	r3, [r3, #32]
 8007868:	3303      	adds	r3, #3
 800786a:	089b      	lsrs	r3, r3, #2
 800786c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800786e:	8afa      	ldrh	r2, [r7, #22]
 8007870:	6a3b      	ldr	r3, [r7, #32]
 8007872:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007876:	691b      	ldr	r3, [r3, #16]
 8007878:	b29b      	uxth	r3, r3
 800787a:	429a      	cmp	r2, r3
 800787c:	d90a      	bls.n	8007894 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	699b      	ldr	r3, [r3, #24]
 8007882:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	619a      	str	r2, [r3, #24]
        }
        break;
 800788a:	e003      	b.n	8007894 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 800788c:	bf00      	nop
 800788e:	e002      	b.n	8007896 <USB_HC_StartXfer+0x4d2>
        break;
 8007890:	bf00      	nop
 8007892:	e000      	b.n	8007896 <USB_HC_StartXfer+0x4d2>
        break;
 8007894:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8007896:	68bb      	ldr	r3, [r7, #8]
 8007898:	6999      	ldr	r1, [r3, #24]
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	785a      	ldrb	r2, [r3, #1]
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	6a1b      	ldr	r3, [r3, #32]
 80078a2:	b29b      	uxth	r3, r3
 80078a4:	2000      	movs	r0, #0
 80078a6:	9000      	str	r0, [sp, #0]
 80078a8:	68f8      	ldr	r0, [r7, #12]
 80078aa:	f7ff f9c9 	bl	8006c40 <USB_WritePacket>
  }

  return HAL_OK;
 80078ae:	2300      	movs	r3, #0
}
 80078b0:	4618      	mov	r0, r3
 80078b2:	3728      	adds	r7, #40	@ 0x28
 80078b4:	46bd      	mov	sp, r7
 80078b6:	bd80      	pop	{r7, pc}

080078b8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80078b8:	b480      	push	{r7}
 80078ba:	b085      	sub	sp, #20
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80078ca:	695b      	ldr	r3, [r3, #20]
 80078cc:	b29b      	uxth	r3, r3
}
 80078ce:	4618      	mov	r0, r3
 80078d0:	3714      	adds	r7, #20
 80078d2:	46bd      	mov	sp, r7
 80078d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d8:	4770      	bx	lr

080078da <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80078da:	b480      	push	{r7}
 80078dc:	b089      	sub	sp, #36	@ 0x24
 80078de:	af00      	add	r7, sp, #0
 80078e0:	6078      	str	r0, [r7, #4]
 80078e2:	460b      	mov	r3, r1
 80078e4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80078ea:	78fb      	ldrb	r3, [r7, #3]
 80078ec:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80078ee:	2300      	movs	r3, #0
 80078f0:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80078f2:	69bb      	ldr	r3, [r7, #24]
 80078f4:	015a      	lsls	r2, r3, #5
 80078f6:	69fb      	ldr	r3, [r7, #28]
 80078f8:	4413      	add	r3, r2
 80078fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	0c9b      	lsrs	r3, r3, #18
 8007902:	f003 0303 	and.w	r3, r3, #3
 8007906:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8007908:	69bb      	ldr	r3, [r7, #24]
 800790a:	015a      	lsls	r2, r3, #5
 800790c:	69fb      	ldr	r3, [r7, #28]
 800790e:	4413      	add	r3, r2
 8007910:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	0fdb      	lsrs	r3, r3, #31
 8007918:	f003 0301 	and.w	r3, r3, #1
 800791c:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800791e:	69bb      	ldr	r3, [r7, #24]
 8007920:	015a      	lsls	r2, r3, #5
 8007922:	69fb      	ldr	r3, [r7, #28]
 8007924:	4413      	add	r3, r2
 8007926:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800792a:	685b      	ldr	r3, [r3, #4]
 800792c:	0fdb      	lsrs	r3, r3, #31
 800792e:	f003 0301 	and.w	r3, r3, #1
 8007932:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	689b      	ldr	r3, [r3, #8]
 8007938:	f003 0320 	and.w	r3, r3, #32
 800793c:	2b20      	cmp	r3, #32
 800793e:	d10d      	bne.n	800795c <USB_HC_Halt+0x82>
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d10a      	bne.n	800795c <USB_HC_Halt+0x82>
 8007946:	693b      	ldr	r3, [r7, #16]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d005      	beq.n	8007958 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 800794c:	697b      	ldr	r3, [r7, #20]
 800794e:	2b01      	cmp	r3, #1
 8007950:	d002      	beq.n	8007958 <USB_HC_Halt+0x7e>
 8007952:	697b      	ldr	r3, [r7, #20]
 8007954:	2b03      	cmp	r3, #3
 8007956:	d101      	bne.n	800795c <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8007958:	2300      	movs	r3, #0
 800795a:	e0d8      	b.n	8007b0e <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800795c:	697b      	ldr	r3, [r7, #20]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d002      	beq.n	8007968 <USB_HC_Halt+0x8e>
 8007962:	697b      	ldr	r3, [r7, #20]
 8007964:	2b02      	cmp	r3, #2
 8007966:	d173      	bne.n	8007a50 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007968:	69bb      	ldr	r3, [r7, #24]
 800796a:	015a      	lsls	r2, r3, #5
 800796c:	69fb      	ldr	r3, [r7, #28]
 800796e:	4413      	add	r3, r2
 8007970:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	69ba      	ldr	r2, [r7, #24]
 8007978:	0151      	lsls	r1, r2, #5
 800797a:	69fa      	ldr	r2, [r7, #28]
 800797c:	440a      	add	r2, r1
 800797e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007982:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007986:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	689b      	ldr	r3, [r3, #8]
 800798c:	f003 0320 	and.w	r3, r3, #32
 8007990:	2b00      	cmp	r3, #0
 8007992:	d14a      	bne.n	8007a2a <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007998:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800799c:	2b00      	cmp	r3, #0
 800799e:	d133      	bne.n	8007a08 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80079a0:	69bb      	ldr	r3, [r7, #24]
 80079a2:	015a      	lsls	r2, r3, #5
 80079a4:	69fb      	ldr	r3, [r7, #28]
 80079a6:	4413      	add	r3, r2
 80079a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	69ba      	ldr	r2, [r7, #24]
 80079b0:	0151      	lsls	r1, r2, #5
 80079b2:	69fa      	ldr	r2, [r7, #28]
 80079b4:	440a      	add	r2, r1
 80079b6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80079ba:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80079be:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80079c0:	69bb      	ldr	r3, [r7, #24]
 80079c2:	015a      	lsls	r2, r3, #5
 80079c4:	69fb      	ldr	r3, [r7, #28]
 80079c6:	4413      	add	r3, r2
 80079c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	69ba      	ldr	r2, [r7, #24]
 80079d0:	0151      	lsls	r1, r2, #5
 80079d2:	69fa      	ldr	r2, [r7, #28]
 80079d4:	440a      	add	r2, r1
 80079d6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80079da:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80079de:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	3301      	adds	r3, #1
 80079e4:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80079ec:	d82e      	bhi.n	8007a4c <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80079ee:	69bb      	ldr	r3, [r7, #24]
 80079f0:	015a      	lsls	r2, r3, #5
 80079f2:	69fb      	ldr	r3, [r7, #28]
 80079f4:	4413      	add	r3, r2
 80079f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007a00:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007a04:	d0ec      	beq.n	80079e0 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007a06:	e081      	b.n	8007b0c <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007a08:	69bb      	ldr	r3, [r7, #24]
 8007a0a:	015a      	lsls	r2, r3, #5
 8007a0c:	69fb      	ldr	r3, [r7, #28]
 8007a0e:	4413      	add	r3, r2
 8007a10:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	69ba      	ldr	r2, [r7, #24]
 8007a18:	0151      	lsls	r1, r2, #5
 8007a1a:	69fa      	ldr	r2, [r7, #28]
 8007a1c:	440a      	add	r2, r1
 8007a1e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007a22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007a26:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007a28:	e070      	b.n	8007b0c <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007a2a:	69bb      	ldr	r3, [r7, #24]
 8007a2c:	015a      	lsls	r2, r3, #5
 8007a2e:	69fb      	ldr	r3, [r7, #28]
 8007a30:	4413      	add	r3, r2
 8007a32:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	69ba      	ldr	r2, [r7, #24]
 8007a3a:	0151      	lsls	r1, r2, #5
 8007a3c:	69fa      	ldr	r2, [r7, #28]
 8007a3e:	440a      	add	r2, r1
 8007a40:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007a44:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007a48:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007a4a:	e05f      	b.n	8007b0c <USB_HC_Halt+0x232>
            break;
 8007a4c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007a4e:	e05d      	b.n	8007b0c <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007a50:	69bb      	ldr	r3, [r7, #24]
 8007a52:	015a      	lsls	r2, r3, #5
 8007a54:	69fb      	ldr	r3, [r7, #28]
 8007a56:	4413      	add	r3, r2
 8007a58:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	69ba      	ldr	r2, [r7, #24]
 8007a60:	0151      	lsls	r1, r2, #5
 8007a62:	69fa      	ldr	r2, [r7, #28]
 8007a64:	440a      	add	r2, r1
 8007a66:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007a6a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007a6e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007a70:	69fb      	ldr	r3, [r7, #28]
 8007a72:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007a76:	691b      	ldr	r3, [r3, #16]
 8007a78:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d133      	bne.n	8007ae8 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007a80:	69bb      	ldr	r3, [r7, #24]
 8007a82:	015a      	lsls	r2, r3, #5
 8007a84:	69fb      	ldr	r3, [r7, #28]
 8007a86:	4413      	add	r3, r2
 8007a88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	69ba      	ldr	r2, [r7, #24]
 8007a90:	0151      	lsls	r1, r2, #5
 8007a92:	69fa      	ldr	r2, [r7, #28]
 8007a94:	440a      	add	r2, r1
 8007a96:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007a9a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007a9e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007aa0:	69bb      	ldr	r3, [r7, #24]
 8007aa2:	015a      	lsls	r2, r3, #5
 8007aa4:	69fb      	ldr	r3, [r7, #28]
 8007aa6:	4413      	add	r3, r2
 8007aa8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	69ba      	ldr	r2, [r7, #24]
 8007ab0:	0151      	lsls	r1, r2, #5
 8007ab2:	69fa      	ldr	r2, [r7, #28]
 8007ab4:	440a      	add	r2, r1
 8007ab6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007aba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007abe:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8007ac0:	68bb      	ldr	r3, [r7, #8]
 8007ac2:	3301      	adds	r3, #1
 8007ac4:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8007ac6:	68bb      	ldr	r3, [r7, #8]
 8007ac8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007acc:	d81d      	bhi.n	8007b0a <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007ace:	69bb      	ldr	r3, [r7, #24]
 8007ad0:	015a      	lsls	r2, r3, #5
 8007ad2:	69fb      	ldr	r3, [r7, #28]
 8007ad4:	4413      	add	r3, r2
 8007ad6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007ae0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007ae4:	d0ec      	beq.n	8007ac0 <USB_HC_Halt+0x1e6>
 8007ae6:	e011      	b.n	8007b0c <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007ae8:	69bb      	ldr	r3, [r7, #24]
 8007aea:	015a      	lsls	r2, r3, #5
 8007aec:	69fb      	ldr	r3, [r7, #28]
 8007aee:	4413      	add	r3, r2
 8007af0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	69ba      	ldr	r2, [r7, #24]
 8007af8:	0151      	lsls	r1, r2, #5
 8007afa:	69fa      	ldr	r2, [r7, #28]
 8007afc:	440a      	add	r2, r1
 8007afe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007b02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007b06:	6013      	str	r3, [r2, #0]
 8007b08:	e000      	b.n	8007b0c <USB_HC_Halt+0x232>
          break;
 8007b0a:	bf00      	nop
    }
  }

  return HAL_OK;
 8007b0c:	2300      	movs	r3, #0
}
 8007b0e:	4618      	mov	r0, r3
 8007b10:	3724      	adds	r7, #36	@ 0x24
 8007b12:	46bd      	mov	sp, r7
 8007b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b18:	4770      	bx	lr
	...

08007b1c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8007b1c:	b480      	push	{r7}
 8007b1e:	b087      	sub	sp, #28
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
 8007b24:	460b      	mov	r3, r1
 8007b26:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8007b2c:	78fb      	ldrb	r3, [r7, #3]
 8007b2e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8007b30:	2301      	movs	r3, #1
 8007b32:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	04da      	lsls	r2, r3, #19
 8007b38:	4b15      	ldr	r3, [pc, #84]	@ (8007b90 <USB_DoPing+0x74>)
 8007b3a:	4013      	ands	r3, r2
 8007b3c:	693a      	ldr	r2, [r7, #16]
 8007b3e:	0151      	lsls	r1, r2, #5
 8007b40:	697a      	ldr	r2, [r7, #20]
 8007b42:	440a      	add	r2, r1
 8007b44:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007b48:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007b4c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8007b4e:	693b      	ldr	r3, [r7, #16]
 8007b50:	015a      	lsls	r2, r3, #5
 8007b52:	697b      	ldr	r3, [r7, #20]
 8007b54:	4413      	add	r3, r2
 8007b56:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007b5e:	68bb      	ldr	r3, [r7, #8]
 8007b60:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007b64:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007b66:	68bb      	ldr	r3, [r7, #8]
 8007b68:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007b6c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8007b6e:	693b      	ldr	r3, [r7, #16]
 8007b70:	015a      	lsls	r2, r3, #5
 8007b72:	697b      	ldr	r3, [r7, #20]
 8007b74:	4413      	add	r3, r2
 8007b76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b7a:	461a      	mov	r2, r3
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8007b80:	2300      	movs	r3, #0
}
 8007b82:	4618      	mov	r0, r3
 8007b84:	371c      	adds	r7, #28
 8007b86:	46bd      	mov	sp, r7
 8007b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8c:	4770      	bx	lr
 8007b8e:	bf00      	nop
 8007b90:	1ff80000 	.word	0x1ff80000

08007b94 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b088      	sub	sp, #32
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007ba8:	6878      	ldr	r0, [r7, #4]
 8007baa:	f7fe ff8c 	bl	8006ac6 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007bae:	2110      	movs	r1, #16
 8007bb0:	6878      	ldr	r0, [r7, #4]
 8007bb2:	f7fe ffe5 	bl	8006b80 <USB_FlushTxFifo>
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d001      	beq.n	8007bc0 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8007bbc:	2301      	movs	r3, #1
 8007bbe:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007bc0:	6878      	ldr	r0, [r7, #4]
 8007bc2:	f7ff f80f 	bl	8006be4 <USB_FlushRxFifo>
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d001      	beq.n	8007bd0 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8007bcc:	2301      	movs	r3, #1
 8007bce:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	61bb      	str	r3, [r7, #24]
 8007bd4:	e01f      	b.n	8007c16 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8007bd6:	69bb      	ldr	r3, [r7, #24]
 8007bd8:	015a      	lsls	r2, r3, #5
 8007bda:	697b      	ldr	r3, [r7, #20]
 8007bdc:	4413      	add	r3, r2
 8007bde:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8007be6:	693b      	ldr	r3, [r7, #16]
 8007be8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007bec:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007bee:	693b      	ldr	r3, [r7, #16]
 8007bf0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007bf4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007bf6:	693b      	ldr	r3, [r7, #16]
 8007bf8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007bfc:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007bfe:	69bb      	ldr	r3, [r7, #24]
 8007c00:	015a      	lsls	r2, r3, #5
 8007c02:	697b      	ldr	r3, [r7, #20]
 8007c04:	4413      	add	r3, r2
 8007c06:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c0a:	461a      	mov	r2, r3
 8007c0c:	693b      	ldr	r3, [r7, #16]
 8007c0e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007c10:	69bb      	ldr	r3, [r7, #24]
 8007c12:	3301      	adds	r3, #1
 8007c14:	61bb      	str	r3, [r7, #24]
 8007c16:	69bb      	ldr	r3, [r7, #24]
 8007c18:	2b0f      	cmp	r3, #15
 8007c1a:	d9dc      	bls.n	8007bd6 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	61bb      	str	r3, [r7, #24]
 8007c20:	e034      	b.n	8007c8c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8007c22:	69bb      	ldr	r3, [r7, #24]
 8007c24:	015a      	lsls	r2, r3, #5
 8007c26:	697b      	ldr	r3, [r7, #20]
 8007c28:	4413      	add	r3, r2
 8007c2a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8007c32:	693b      	ldr	r3, [r7, #16]
 8007c34:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007c38:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8007c3a:	693b      	ldr	r3, [r7, #16]
 8007c3c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007c40:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007c42:	693b      	ldr	r3, [r7, #16]
 8007c44:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007c48:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007c4a:	69bb      	ldr	r3, [r7, #24]
 8007c4c:	015a      	lsls	r2, r3, #5
 8007c4e:	697b      	ldr	r3, [r7, #20]
 8007c50:	4413      	add	r3, r2
 8007c52:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c56:	461a      	mov	r2, r3
 8007c58:	693b      	ldr	r3, [r7, #16]
 8007c5a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	3301      	adds	r3, #1
 8007c60:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007c68:	d80c      	bhi.n	8007c84 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007c6a:	69bb      	ldr	r3, [r7, #24]
 8007c6c:	015a      	lsls	r2, r3, #5
 8007c6e:	697b      	ldr	r3, [r7, #20]
 8007c70:	4413      	add	r3, r2
 8007c72:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007c7c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007c80:	d0ec      	beq.n	8007c5c <USB_StopHost+0xc8>
 8007c82:	e000      	b.n	8007c86 <USB_StopHost+0xf2>
        break;
 8007c84:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8007c86:	69bb      	ldr	r3, [r7, #24]
 8007c88:	3301      	adds	r3, #1
 8007c8a:	61bb      	str	r3, [r7, #24]
 8007c8c:	69bb      	ldr	r3, [r7, #24]
 8007c8e:	2b0f      	cmp	r3, #15
 8007c90:	d9c7      	bls.n	8007c22 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8007c92:	697b      	ldr	r3, [r7, #20]
 8007c94:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007c98:	461a      	mov	r2, r3
 8007c9a:	f04f 33ff 	mov.w	r3, #4294967295
 8007c9e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f04f 32ff 	mov.w	r2, #4294967295
 8007ca6:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8007ca8:	6878      	ldr	r0, [r7, #4]
 8007caa:	f7fe fefb 	bl	8006aa4 <USB_EnableGlobalInt>

  return ret;
 8007cae:	7ffb      	ldrb	r3, [r7, #31]
}
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	3720      	adds	r7, #32
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	bd80      	pop	{r7, pc}

08007cb8 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8007cb8:	b590      	push	{r4, r7, lr}
 8007cba:	b089      	sub	sp, #36	@ 0x24
 8007cbc:	af04      	add	r7, sp, #16
 8007cbe:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8007cc0:	2301      	movs	r3, #1
 8007cc2:	2202      	movs	r2, #2
 8007cc4:	2102      	movs	r1, #2
 8007cc6:	6878      	ldr	r0, [r7, #4]
 8007cc8:	f000 fc85 	bl	80085d6 <USBH_FindInterface>
 8007ccc:	4603      	mov	r3, r0
 8007cce:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007cd0:	7bfb      	ldrb	r3, [r7, #15]
 8007cd2:	2bff      	cmp	r3, #255	@ 0xff
 8007cd4:	d002      	beq.n	8007cdc <USBH_CDC_InterfaceInit+0x24>
 8007cd6:	7bfb      	ldrb	r3, [r7, #15]
 8007cd8:	2b01      	cmp	r3, #1
 8007cda:	d901      	bls.n	8007ce0 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007cdc:	2302      	movs	r3, #2
 8007cde:	e13d      	b.n	8007f5c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8007ce0:	7bfb      	ldrb	r3, [r7, #15]
 8007ce2:	4619      	mov	r1, r3
 8007ce4:	6878      	ldr	r0, [r7, #4]
 8007ce6:	f000 fc5a 	bl	800859e <USBH_SelectInterface>
 8007cea:	4603      	mov	r3, r0
 8007cec:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8007cee:	7bbb      	ldrb	r3, [r7, #14]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d001      	beq.n	8007cf8 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8007cf4:	2302      	movs	r3, #2
 8007cf6:	e131      	b.n	8007f5c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8007cfe:	2050      	movs	r0, #80	@ 0x50
 8007d00:	f002 fb64 	bl	800a3cc <malloc>
 8007d04:	4603      	mov	r3, r0
 8007d06:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007d0e:	69db      	ldr	r3, [r3, #28]
 8007d10:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8007d12:	68bb      	ldr	r3, [r7, #8]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d101      	bne.n	8007d1c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8007d18:	2302      	movs	r3, #2
 8007d1a:	e11f      	b.n	8007f5c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8007d1c:	2250      	movs	r2, #80	@ 0x50
 8007d1e:	2100      	movs	r1, #0
 8007d20:	68b8      	ldr	r0, [r7, #8]
 8007d22:	f002 fd28 	bl	800a776 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007d26:	7bfb      	ldrb	r3, [r7, #15]
 8007d28:	687a      	ldr	r2, [r7, #4]
 8007d2a:	211a      	movs	r1, #26
 8007d2c:	fb01 f303 	mul.w	r3, r1, r3
 8007d30:	4413      	add	r3, r2
 8007d32:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007d36:	781b      	ldrb	r3, [r3, #0]
 8007d38:	b25b      	sxtb	r3, r3
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	da15      	bge.n	8007d6a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007d3e:	7bfb      	ldrb	r3, [r7, #15]
 8007d40:	687a      	ldr	r2, [r7, #4]
 8007d42:	211a      	movs	r1, #26
 8007d44:	fb01 f303 	mul.w	r3, r1, r3
 8007d48:	4413      	add	r3, r2
 8007d4a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007d4e:	781a      	ldrb	r2, [r3, #0]
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007d54:	7bfb      	ldrb	r3, [r7, #15]
 8007d56:	687a      	ldr	r2, [r7, #4]
 8007d58:	211a      	movs	r1, #26
 8007d5a:	fb01 f303 	mul.w	r3, r1, r3
 8007d5e:	4413      	add	r3, r2
 8007d60:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8007d64:	881a      	ldrh	r2, [r3, #0]
 8007d66:	68bb      	ldr	r3, [r7, #8]
 8007d68:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8007d6a:	68bb      	ldr	r3, [r7, #8]
 8007d6c:	785b      	ldrb	r3, [r3, #1]
 8007d6e:	4619      	mov	r1, r3
 8007d70:	6878      	ldr	r0, [r7, #4]
 8007d72:	f001 ffbe 	bl	8009cf2 <USBH_AllocPipe>
 8007d76:	4603      	mov	r3, r0
 8007d78:	461a      	mov	r2, r3
 8007d7a:	68bb      	ldr	r3, [r7, #8]
 8007d7c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8007d7e:	68bb      	ldr	r3, [r7, #8]
 8007d80:	7819      	ldrb	r1, [r3, #0]
 8007d82:	68bb      	ldr	r3, [r7, #8]
 8007d84:	7858      	ldrb	r0, [r3, #1]
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007d92:	68ba      	ldr	r2, [r7, #8]
 8007d94:	8952      	ldrh	r2, [r2, #10]
 8007d96:	9202      	str	r2, [sp, #8]
 8007d98:	2203      	movs	r2, #3
 8007d9a:	9201      	str	r2, [sp, #4]
 8007d9c:	9300      	str	r3, [sp, #0]
 8007d9e:	4623      	mov	r3, r4
 8007da0:	4602      	mov	r2, r0
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f001 ff76 	bl	8009c94 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8007da8:	68bb      	ldr	r3, [r7, #8]
 8007daa:	781b      	ldrb	r3, [r3, #0]
 8007dac:	2200      	movs	r2, #0
 8007dae:	4619      	mov	r1, r3
 8007db0:	6878      	ldr	r0, [r7, #4]
 8007db2:	f002 fa85 	bl	800a2c0 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8007db6:	2300      	movs	r3, #0
 8007db8:	2200      	movs	r2, #0
 8007dba:	210a      	movs	r1, #10
 8007dbc:	6878      	ldr	r0, [r7, #4]
 8007dbe:	f000 fc0a 	bl	80085d6 <USBH_FindInterface>
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007dc6:	7bfb      	ldrb	r3, [r7, #15]
 8007dc8:	2bff      	cmp	r3, #255	@ 0xff
 8007dca:	d002      	beq.n	8007dd2 <USBH_CDC_InterfaceInit+0x11a>
 8007dcc:	7bfb      	ldrb	r3, [r7, #15]
 8007dce:	2b01      	cmp	r3, #1
 8007dd0:	d901      	bls.n	8007dd6 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007dd2:	2302      	movs	r3, #2
 8007dd4:	e0c2      	b.n	8007f5c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007dd6:	7bfb      	ldrb	r3, [r7, #15]
 8007dd8:	687a      	ldr	r2, [r7, #4]
 8007dda:	211a      	movs	r1, #26
 8007ddc:	fb01 f303 	mul.w	r3, r1, r3
 8007de0:	4413      	add	r3, r2
 8007de2:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007de6:	781b      	ldrb	r3, [r3, #0]
 8007de8:	b25b      	sxtb	r3, r3
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	da16      	bge.n	8007e1c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007dee:	7bfb      	ldrb	r3, [r7, #15]
 8007df0:	687a      	ldr	r2, [r7, #4]
 8007df2:	211a      	movs	r1, #26
 8007df4:	fb01 f303 	mul.w	r3, r1, r3
 8007df8:	4413      	add	r3, r2
 8007dfa:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007dfe:	781a      	ldrb	r2, [r3, #0]
 8007e00:	68bb      	ldr	r3, [r7, #8]
 8007e02:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007e04:	7bfb      	ldrb	r3, [r7, #15]
 8007e06:	687a      	ldr	r2, [r7, #4]
 8007e08:	211a      	movs	r1, #26
 8007e0a:	fb01 f303 	mul.w	r3, r1, r3
 8007e0e:	4413      	add	r3, r2
 8007e10:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8007e14:	881a      	ldrh	r2, [r3, #0]
 8007e16:	68bb      	ldr	r3, [r7, #8]
 8007e18:	835a      	strh	r2, [r3, #26]
 8007e1a:	e015      	b.n	8007e48 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007e1c:	7bfb      	ldrb	r3, [r7, #15]
 8007e1e:	687a      	ldr	r2, [r7, #4]
 8007e20:	211a      	movs	r1, #26
 8007e22:	fb01 f303 	mul.w	r3, r1, r3
 8007e26:	4413      	add	r3, r2
 8007e28:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007e2c:	781a      	ldrb	r2, [r3, #0]
 8007e2e:	68bb      	ldr	r3, [r7, #8]
 8007e30:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007e32:	7bfb      	ldrb	r3, [r7, #15]
 8007e34:	687a      	ldr	r2, [r7, #4]
 8007e36:	211a      	movs	r1, #26
 8007e38:	fb01 f303 	mul.w	r3, r1, r3
 8007e3c:	4413      	add	r3, r2
 8007e3e:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8007e42:	881a      	ldrh	r2, [r3, #0]
 8007e44:	68bb      	ldr	r3, [r7, #8]
 8007e46:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8007e48:	7bfb      	ldrb	r3, [r7, #15]
 8007e4a:	687a      	ldr	r2, [r7, #4]
 8007e4c:	211a      	movs	r1, #26
 8007e4e:	fb01 f303 	mul.w	r3, r1, r3
 8007e52:	4413      	add	r3, r2
 8007e54:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8007e58:	781b      	ldrb	r3, [r3, #0]
 8007e5a:	b25b      	sxtb	r3, r3
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	da16      	bge.n	8007e8e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007e60:	7bfb      	ldrb	r3, [r7, #15]
 8007e62:	687a      	ldr	r2, [r7, #4]
 8007e64:	211a      	movs	r1, #26
 8007e66:	fb01 f303 	mul.w	r3, r1, r3
 8007e6a:	4413      	add	r3, r2
 8007e6c:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8007e70:	781a      	ldrb	r2, [r3, #0]
 8007e72:	68bb      	ldr	r3, [r7, #8]
 8007e74:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007e76:	7bfb      	ldrb	r3, [r7, #15]
 8007e78:	687a      	ldr	r2, [r7, #4]
 8007e7a:	211a      	movs	r1, #26
 8007e7c:	fb01 f303 	mul.w	r3, r1, r3
 8007e80:	4413      	add	r3, r2
 8007e82:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8007e86:	881a      	ldrh	r2, [r3, #0]
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	835a      	strh	r2, [r3, #26]
 8007e8c:	e015      	b.n	8007eba <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007e8e:	7bfb      	ldrb	r3, [r7, #15]
 8007e90:	687a      	ldr	r2, [r7, #4]
 8007e92:	211a      	movs	r1, #26
 8007e94:	fb01 f303 	mul.w	r3, r1, r3
 8007e98:	4413      	add	r3, r2
 8007e9a:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8007e9e:	781a      	ldrb	r2, [r3, #0]
 8007ea0:	68bb      	ldr	r3, [r7, #8]
 8007ea2:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007ea4:	7bfb      	ldrb	r3, [r7, #15]
 8007ea6:	687a      	ldr	r2, [r7, #4]
 8007ea8:	211a      	movs	r1, #26
 8007eaa:	fb01 f303 	mul.w	r3, r1, r3
 8007eae:	4413      	add	r3, r2
 8007eb0:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8007eb4:	881a      	ldrh	r2, [r3, #0]
 8007eb6:	68bb      	ldr	r3, [r7, #8]
 8007eb8:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8007eba:	68bb      	ldr	r3, [r7, #8]
 8007ebc:	7b9b      	ldrb	r3, [r3, #14]
 8007ebe:	4619      	mov	r1, r3
 8007ec0:	6878      	ldr	r0, [r7, #4]
 8007ec2:	f001 ff16 	bl	8009cf2 <USBH_AllocPipe>
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	461a      	mov	r2, r3
 8007eca:	68bb      	ldr	r3, [r7, #8]
 8007ecc:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	7bdb      	ldrb	r3, [r3, #15]
 8007ed2:	4619      	mov	r1, r3
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	f001 ff0c 	bl	8009cf2 <USBH_AllocPipe>
 8007eda:	4603      	mov	r3, r0
 8007edc:	461a      	mov	r2, r3
 8007ede:	68bb      	ldr	r3, [r7, #8]
 8007ee0:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8007ee2:	68bb      	ldr	r3, [r7, #8]
 8007ee4:	7b59      	ldrb	r1, [r3, #13]
 8007ee6:	68bb      	ldr	r3, [r7, #8]
 8007ee8:	7b98      	ldrb	r0, [r3, #14]
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007ef6:	68ba      	ldr	r2, [r7, #8]
 8007ef8:	8b12      	ldrh	r2, [r2, #24]
 8007efa:	9202      	str	r2, [sp, #8]
 8007efc:	2202      	movs	r2, #2
 8007efe:	9201      	str	r2, [sp, #4]
 8007f00:	9300      	str	r3, [sp, #0]
 8007f02:	4623      	mov	r3, r4
 8007f04:	4602      	mov	r2, r0
 8007f06:	6878      	ldr	r0, [r7, #4]
 8007f08:	f001 fec4 	bl	8009c94 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8007f0c:	68bb      	ldr	r3, [r7, #8]
 8007f0e:	7b19      	ldrb	r1, [r3, #12]
 8007f10:	68bb      	ldr	r3, [r7, #8]
 8007f12:	7bd8      	ldrb	r0, [r3, #15]
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007f20:	68ba      	ldr	r2, [r7, #8]
 8007f22:	8b52      	ldrh	r2, [r2, #26]
 8007f24:	9202      	str	r2, [sp, #8]
 8007f26:	2202      	movs	r2, #2
 8007f28:	9201      	str	r2, [sp, #4]
 8007f2a:	9300      	str	r3, [sp, #0]
 8007f2c:	4623      	mov	r3, r4
 8007f2e:	4602      	mov	r2, r0
 8007f30:	6878      	ldr	r0, [r7, #4]
 8007f32:	f001 feaf 	bl	8009c94 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8007f36:	68bb      	ldr	r3, [r7, #8]
 8007f38:	2200      	movs	r2, #0
 8007f3a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8007f3e:	68bb      	ldr	r3, [r7, #8]
 8007f40:	7b5b      	ldrb	r3, [r3, #13]
 8007f42:	2200      	movs	r2, #0
 8007f44:	4619      	mov	r1, r3
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	f002 f9ba 	bl	800a2c0 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8007f4c:	68bb      	ldr	r3, [r7, #8]
 8007f4e:	7b1b      	ldrb	r3, [r3, #12]
 8007f50:	2200      	movs	r2, #0
 8007f52:	4619      	mov	r1, r3
 8007f54:	6878      	ldr	r0, [r7, #4]
 8007f56:	f002 f9b3 	bl	800a2c0 <USBH_LL_SetToggle>

  return USBH_OK;
 8007f5a:	2300      	movs	r3, #0
}
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	3714      	adds	r7, #20
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bd90      	pop	{r4, r7, pc}

08007f64 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b084      	sub	sp, #16
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007f72:	69db      	ldr	r3, [r3, #28]
 8007f74:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	781b      	ldrb	r3, [r3, #0]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d00e      	beq.n	8007f9c <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	781b      	ldrb	r3, [r3, #0]
 8007f82:	4619      	mov	r1, r3
 8007f84:	6878      	ldr	r0, [r7, #4]
 8007f86:	f001 fea4 	bl	8009cd2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	781b      	ldrb	r3, [r3, #0]
 8007f8e:	4619      	mov	r1, r3
 8007f90:	6878      	ldr	r0, [r7, #4]
 8007f92:	f001 fecf 	bl	8009d34 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	2200      	movs	r2, #0
 8007f9a:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	7b1b      	ldrb	r3, [r3, #12]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d00e      	beq.n	8007fc2 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	7b1b      	ldrb	r3, [r3, #12]
 8007fa8:	4619      	mov	r1, r3
 8007faa:	6878      	ldr	r0, [r7, #4]
 8007fac:	f001 fe91 	bl	8009cd2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	7b1b      	ldrb	r3, [r3, #12]
 8007fb4:	4619      	mov	r1, r3
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f001 febc 	bl	8009d34 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	7b5b      	ldrb	r3, [r3, #13]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d00e      	beq.n	8007fe8 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	7b5b      	ldrb	r3, [r3, #13]
 8007fce:	4619      	mov	r1, r3
 8007fd0:	6878      	ldr	r0, [r7, #4]
 8007fd2:	f001 fe7e 	bl	8009cd2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	7b5b      	ldrb	r3, [r3, #13]
 8007fda:	4619      	mov	r1, r3
 8007fdc:	6878      	ldr	r0, [r7, #4]
 8007fde:	f001 fea9 	bl	8009d34 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007fee:	69db      	ldr	r3, [r3, #28]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d00b      	beq.n	800800c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007ffa:	69db      	ldr	r3, [r3, #28]
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	f002 f9ed 	bl	800a3dc <free>
    phost->pActiveClass->pData = 0U;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008008:	2200      	movs	r2, #0
 800800a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800800c:	2300      	movs	r3, #0
}
 800800e:	4618      	mov	r0, r3
 8008010:	3710      	adds	r7, #16
 8008012:	46bd      	mov	sp, r7
 8008014:	bd80      	pop	{r7, pc}

08008016 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8008016:	b580      	push	{r7, lr}
 8008018:	b084      	sub	sp, #16
 800801a:	af00      	add	r7, sp, #0
 800801c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008024:	69db      	ldr	r3, [r3, #28]
 8008026:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	3340      	adds	r3, #64	@ 0x40
 800802c:	4619      	mov	r1, r3
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f000 f8b1 	bl	8008196 <GetLineCoding>
 8008034:	4603      	mov	r3, r0
 8008036:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8008038:	7afb      	ldrb	r3, [r7, #11]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d105      	bne.n	800804a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008044:	2102      	movs	r1, #2
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800804a:	7afb      	ldrb	r3, [r7, #11]
}
 800804c:	4618      	mov	r0, r3
 800804e:	3710      	adds	r7, #16
 8008050:	46bd      	mov	sp, r7
 8008052:	bd80      	pop	{r7, pc}

08008054 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b084      	sub	sp, #16
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800805c:	2301      	movs	r3, #1
 800805e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8008060:	2300      	movs	r3, #0
 8008062:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800806a:	69db      	ldr	r3, [r3, #28]
 800806c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800806e:	68bb      	ldr	r3, [r7, #8]
 8008070:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8008074:	2b04      	cmp	r3, #4
 8008076:	d877      	bhi.n	8008168 <USBH_CDC_Process+0x114>
 8008078:	a201      	add	r2, pc, #4	@ (adr r2, 8008080 <USBH_CDC_Process+0x2c>)
 800807a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800807e:	bf00      	nop
 8008080:	08008095 	.word	0x08008095
 8008084:	0800809b 	.word	0x0800809b
 8008088:	080080cb 	.word	0x080080cb
 800808c:	0800813f 	.word	0x0800813f
 8008090:	0800814d 	.word	0x0800814d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8008094:	2300      	movs	r3, #0
 8008096:	73fb      	strb	r3, [r7, #15]
      break;
 8008098:	e06d      	b.n	8008176 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800809a:	68bb      	ldr	r3, [r7, #8]
 800809c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800809e:	4619      	mov	r1, r3
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	f000 f897 	bl	80081d4 <SetLineCoding>
 80080a6:	4603      	mov	r3, r0
 80080a8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80080aa:	7bbb      	ldrb	r3, [r7, #14]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d104      	bne.n	80080ba <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80080b0:	68bb      	ldr	r3, [r7, #8]
 80080b2:	2202      	movs	r2, #2
 80080b4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80080b8:	e058      	b.n	800816c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80080ba:	7bbb      	ldrb	r3, [r7, #14]
 80080bc:	2b01      	cmp	r3, #1
 80080be:	d055      	beq.n	800816c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80080c0:	68bb      	ldr	r3, [r7, #8]
 80080c2:	2204      	movs	r2, #4
 80080c4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 80080c8:	e050      	b.n	800816c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80080ca:	68bb      	ldr	r3, [r7, #8]
 80080cc:	3340      	adds	r3, #64	@ 0x40
 80080ce:	4619      	mov	r1, r3
 80080d0:	6878      	ldr	r0, [r7, #4]
 80080d2:	f000 f860 	bl	8008196 <GetLineCoding>
 80080d6:	4603      	mov	r3, r0
 80080d8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80080da:	7bbb      	ldrb	r3, [r7, #14]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d126      	bne.n	800812e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80080e0:	68bb      	ldr	r3, [r7, #8]
 80080e2:	2200      	movs	r2, #0
 80080e4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80080e8:	68bb      	ldr	r3, [r7, #8]
 80080ea:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 80080ee:	68bb      	ldr	r3, [r7, #8]
 80080f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80080f2:	791b      	ldrb	r3, [r3, #4]
 80080f4:	429a      	cmp	r2, r3
 80080f6:	d13b      	bne.n	8008170 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80080f8:	68bb      	ldr	r3, [r7, #8]
 80080fa:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 80080fe:	68bb      	ldr	r3, [r7, #8]
 8008100:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008102:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008104:	429a      	cmp	r2, r3
 8008106:	d133      	bne.n	8008170 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008108:	68bb      	ldr	r3, [r7, #8]
 800810a:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 800810e:	68bb      	ldr	r3, [r7, #8]
 8008110:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008112:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008114:	429a      	cmp	r2, r3
 8008116:	d12b      	bne.n	8008170 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8008118:	68bb      	ldr	r3, [r7, #8]
 800811a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800811c:	68bb      	ldr	r3, [r7, #8]
 800811e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008120:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008122:	429a      	cmp	r2, r3
 8008124:	d124      	bne.n	8008170 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	f000 f958 	bl	80083dc <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800812c:	e020      	b.n	8008170 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800812e:	7bbb      	ldrb	r3, [r7, #14]
 8008130:	2b01      	cmp	r3, #1
 8008132:	d01d      	beq.n	8008170 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008134:	68bb      	ldr	r3, [r7, #8]
 8008136:	2204      	movs	r2, #4
 8008138:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800813c:	e018      	b.n	8008170 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	f000 f867 	bl	8008212 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8008144:	6878      	ldr	r0, [r7, #4]
 8008146:	f000 f8da 	bl	80082fe <CDC_ProcessReception>
      break;
 800814a:	e014      	b.n	8008176 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800814c:	2100      	movs	r1, #0
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	f001 f81a 	bl	8009188 <USBH_ClrFeature>
 8008154:	4603      	mov	r3, r0
 8008156:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008158:	7bbb      	ldrb	r3, [r7, #14]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d10a      	bne.n	8008174 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800815e:	68bb      	ldr	r3, [r7, #8]
 8008160:	2200      	movs	r2, #0
 8008162:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8008166:	e005      	b.n	8008174 <USBH_CDC_Process+0x120>

    default:
      break;
 8008168:	bf00      	nop
 800816a:	e004      	b.n	8008176 <USBH_CDC_Process+0x122>
      break;
 800816c:	bf00      	nop
 800816e:	e002      	b.n	8008176 <USBH_CDC_Process+0x122>
      break;
 8008170:	bf00      	nop
 8008172:	e000      	b.n	8008176 <USBH_CDC_Process+0x122>
      break;
 8008174:	bf00      	nop

  }

  return status;
 8008176:	7bfb      	ldrb	r3, [r7, #15]
}
 8008178:	4618      	mov	r0, r3
 800817a:	3710      	adds	r7, #16
 800817c:	46bd      	mov	sp, r7
 800817e:	bd80      	pop	{r7, pc}

08008180 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8008180:	b480      	push	{r7}
 8008182:	b083      	sub	sp, #12
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8008188:	2300      	movs	r3, #0
}
 800818a:	4618      	mov	r0, r3
 800818c:	370c      	adds	r7, #12
 800818e:	46bd      	mov	sp, r7
 8008190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008194:	4770      	bx	lr

08008196 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8008196:	b580      	push	{r7, lr}
 8008198:	b082      	sub	sp, #8
 800819a:	af00      	add	r7, sp, #0
 800819c:	6078      	str	r0, [r7, #4]
 800819e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	22a1      	movs	r2, #161	@ 0xa1
 80081a4:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2221      	movs	r2, #33	@ 0x21
 80081aa:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2200      	movs	r2, #0
 80081b0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2200      	movs	r2, #0
 80081b6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2207      	movs	r2, #7
 80081bc:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	2207      	movs	r2, #7
 80081c2:	4619      	mov	r1, r3
 80081c4:	6878      	ldr	r0, [r7, #4]
 80081c6:	f001 fb14 	bl	80097f2 <USBH_CtlReq>
 80081ca:	4603      	mov	r3, r0
}
 80081cc:	4618      	mov	r0, r3
 80081ce:	3708      	adds	r7, #8
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bd80      	pop	{r7, pc}

080081d4 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b082      	sub	sp, #8
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
 80081dc:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2221      	movs	r2, #33	@ 0x21
 80081e2:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2220      	movs	r2, #32
 80081e8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2200      	movs	r2, #0
 80081ee:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2200      	movs	r2, #0
 80081f4:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2207      	movs	r2, #7
 80081fa:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	2207      	movs	r2, #7
 8008200:	4619      	mov	r1, r3
 8008202:	6878      	ldr	r0, [r7, #4]
 8008204:	f001 faf5 	bl	80097f2 <USBH_CtlReq>
 8008208:	4603      	mov	r3, r0
}
 800820a:	4618      	mov	r0, r3
 800820c:	3708      	adds	r7, #8
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}

08008212 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8008212:	b580      	push	{r7, lr}
 8008214:	b086      	sub	sp, #24
 8008216:	af02      	add	r7, sp, #8
 8008218:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008220:	69db      	ldr	r3, [r3, #28]
 8008222:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008224:	2300      	movs	r3, #0
 8008226:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800822e:	2b01      	cmp	r3, #1
 8008230:	d002      	beq.n	8008238 <CDC_ProcessTransmission+0x26>
 8008232:	2b02      	cmp	r3, #2
 8008234:	d023      	beq.n	800827e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8008236:	e05e      	b.n	80082f6 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800823c:	68fa      	ldr	r2, [r7, #12]
 800823e:	8b12      	ldrh	r2, [r2, #24]
 8008240:	4293      	cmp	r3, r2
 8008242:	d90b      	bls.n	800825c <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	69d9      	ldr	r1, [r3, #28]
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	8b1a      	ldrh	r2, [r3, #24]
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	7b5b      	ldrb	r3, [r3, #13]
 8008250:	2001      	movs	r0, #1
 8008252:	9000      	str	r0, [sp, #0]
 8008254:	6878      	ldr	r0, [r7, #4]
 8008256:	f001 fcda 	bl	8009c0e <USBH_BulkSendData>
 800825a:	e00b      	b.n	8008274 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8008264:	b29a      	uxth	r2, r3
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	7b5b      	ldrb	r3, [r3, #13]
 800826a:	2001      	movs	r0, #1
 800826c:	9000      	str	r0, [sp, #0]
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	f001 fccd 	bl	8009c0e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	2202      	movs	r2, #2
 8008278:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800827c:	e03b      	b.n	80082f6 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	7b5b      	ldrb	r3, [r3, #13]
 8008282:	4619      	mov	r1, r3
 8008284:	6878      	ldr	r0, [r7, #4]
 8008286:	f001 fff1 	bl	800a26c <USBH_LL_GetURBState>
 800828a:	4603      	mov	r3, r0
 800828c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800828e:	7afb      	ldrb	r3, [r7, #11]
 8008290:	2b01      	cmp	r3, #1
 8008292:	d128      	bne.n	80082e6 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008298:	68fa      	ldr	r2, [r7, #12]
 800829a:	8b12      	ldrh	r2, [r2, #24]
 800829c:	4293      	cmp	r3, r2
 800829e:	d90e      	bls.n	80082be <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082a4:	68fa      	ldr	r2, [r7, #12]
 80082a6:	8b12      	ldrh	r2, [r2, #24]
 80082a8:	1a9a      	subs	r2, r3, r2
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	69db      	ldr	r3, [r3, #28]
 80082b2:	68fa      	ldr	r2, [r7, #12]
 80082b4:	8b12      	ldrh	r2, [r2, #24]
 80082b6:	441a      	add	r2, r3
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	61da      	str	r2, [r3, #28]
 80082bc:	e002      	b.n	80082c4 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	2200      	movs	r2, #0
 80082c2:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d004      	beq.n	80082d6 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	2201      	movs	r2, #1
 80082d0:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80082d4:	e00e      	b.n	80082f4 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	2200      	movs	r2, #0
 80082da:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 80082de:	6878      	ldr	r0, [r7, #4]
 80082e0:	f000 f868 	bl	80083b4 <USBH_CDC_TransmitCallback>
      break;
 80082e4:	e006      	b.n	80082f4 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 80082e6:	7afb      	ldrb	r3, [r7, #11]
 80082e8:	2b02      	cmp	r3, #2
 80082ea:	d103      	bne.n	80082f4 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	2201      	movs	r2, #1
 80082f0:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80082f4:	bf00      	nop
  }
}
 80082f6:	bf00      	nop
 80082f8:	3710      	adds	r7, #16
 80082fa:	46bd      	mov	sp, r7
 80082fc:	bd80      	pop	{r7, pc}

080082fe <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80082fe:	b580      	push	{r7, lr}
 8008300:	b086      	sub	sp, #24
 8008302:	af00      	add	r7, sp, #0
 8008304:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800830c:	69db      	ldr	r3, [r3, #28]
 800830e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008310:	2300      	movs	r3, #0
 8008312:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8008314:	697b      	ldr	r3, [r7, #20]
 8008316:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800831a:	2b03      	cmp	r3, #3
 800831c:	d002      	beq.n	8008324 <CDC_ProcessReception+0x26>
 800831e:	2b04      	cmp	r3, #4
 8008320:	d00e      	beq.n	8008340 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8008322:	e043      	b.n	80083ac <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8008324:	697b      	ldr	r3, [r7, #20]
 8008326:	6a19      	ldr	r1, [r3, #32]
 8008328:	697b      	ldr	r3, [r7, #20]
 800832a:	8b5a      	ldrh	r2, [r3, #26]
 800832c:	697b      	ldr	r3, [r7, #20]
 800832e:	7b1b      	ldrb	r3, [r3, #12]
 8008330:	6878      	ldr	r0, [r7, #4]
 8008332:	f001 fc91 	bl	8009c58 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8008336:	697b      	ldr	r3, [r7, #20]
 8008338:	2204      	movs	r2, #4
 800833a:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800833e:	e035      	b.n	80083ac <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8008340:	697b      	ldr	r3, [r7, #20]
 8008342:	7b1b      	ldrb	r3, [r3, #12]
 8008344:	4619      	mov	r1, r3
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	f001 ff90 	bl	800a26c <USBH_LL_GetURBState>
 800834c:	4603      	mov	r3, r0
 800834e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8008350:	7cfb      	ldrb	r3, [r7, #19]
 8008352:	2b01      	cmp	r3, #1
 8008354:	d129      	bne.n	80083aa <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8008356:	697b      	ldr	r3, [r7, #20]
 8008358:	7b1b      	ldrb	r3, [r3, #12]
 800835a:	4619      	mov	r1, r3
 800835c:	6878      	ldr	r0, [r7, #4]
 800835e:	f001 fef3 	bl	800a148 <USBH_LL_GetLastXferSize>
 8008362:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 8008364:	697b      	ldr	r3, [r7, #20]
 8008366:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008368:	68fa      	ldr	r2, [r7, #12]
 800836a:	429a      	cmp	r2, r3
 800836c:	d016      	beq.n	800839c <CDC_ProcessReception+0x9e>
 800836e:	697b      	ldr	r3, [r7, #20]
 8008370:	8b5b      	ldrh	r3, [r3, #26]
 8008372:	461a      	mov	r2, r3
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	4293      	cmp	r3, r2
 8008378:	d110      	bne.n	800839c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800837a:	697b      	ldr	r3, [r7, #20]
 800837c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	1ad2      	subs	r2, r2, r3
 8008382:	697b      	ldr	r3, [r7, #20]
 8008384:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 8008386:	697b      	ldr	r3, [r7, #20]
 8008388:	6a1a      	ldr	r2, [r3, #32]
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	441a      	add	r2, r3
 800838e:	697b      	ldr	r3, [r7, #20]
 8008390:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8008392:	697b      	ldr	r3, [r7, #20]
 8008394:	2203      	movs	r2, #3
 8008396:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800839a:	e006      	b.n	80083aa <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800839c:	697b      	ldr	r3, [r7, #20]
 800839e:	2200      	movs	r2, #0
 80083a0:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80083a4:	6878      	ldr	r0, [r7, #4]
 80083a6:	f000 f80f 	bl	80083c8 <USBH_CDC_ReceiveCallback>
      break;
 80083aa:	bf00      	nop
  }
}
 80083ac:	bf00      	nop
 80083ae:	3718      	adds	r7, #24
 80083b0:	46bd      	mov	sp, r7
 80083b2:	bd80      	pop	{r7, pc}

080083b4 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80083b4:	b480      	push	{r7}
 80083b6:	b083      	sub	sp, #12
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80083bc:	bf00      	nop
 80083be:	370c      	adds	r7, #12
 80083c0:	46bd      	mov	sp, r7
 80083c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c6:	4770      	bx	lr

080083c8 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80083c8:	b480      	push	{r7}
 80083ca:	b083      	sub	sp, #12
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80083d0:	bf00      	nop
 80083d2:	370c      	adds	r7, #12
 80083d4:	46bd      	mov	sp, r7
 80083d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083da:	4770      	bx	lr

080083dc <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80083dc:	b480      	push	{r7}
 80083de:	b083      	sub	sp, #12
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80083e4:	bf00      	nop
 80083e6:	370c      	adds	r7, #12
 80083e8:	46bd      	mov	sp, r7
 80083ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ee:	4770      	bx	lr

080083f0 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b084      	sub	sp, #16
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	60f8      	str	r0, [r7, #12]
 80083f8:	60b9      	str	r1, [r7, #8]
 80083fa:	4613      	mov	r3, r2
 80083fc:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d101      	bne.n	8008408 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8008404:	2302      	movs	r3, #2
 8008406:	e029      	b.n	800845c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	79fa      	ldrb	r2, [r7, #7]
 800840c:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	2200      	movs	r2, #0
 8008414:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	2200      	movs	r2, #0
 800841c:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8008420:	68f8      	ldr	r0, [r7, #12]
 8008422:	f000 f81f 	bl	8008464 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	2200      	movs	r2, #0
 800842a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	2200      	movs	r2, #0
 8008432:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	2200      	movs	r2, #0
 800843a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	2200      	movs	r2, #0
 8008442:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8008446:	68bb      	ldr	r3, [r7, #8]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d003      	beq.n	8008454 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	68ba      	ldr	r2, [r7, #8]
 8008450:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8008454:	68f8      	ldr	r0, [r7, #12]
 8008456:	f001 fdc3 	bl	8009fe0 <USBH_LL_Init>

  return USBH_OK;
 800845a:	2300      	movs	r3, #0
}
 800845c:	4618      	mov	r0, r3
 800845e:	3710      	adds	r7, #16
 8008460:	46bd      	mov	sp, r7
 8008462:	bd80      	pop	{r7, pc}

08008464 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b084      	sub	sp, #16
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800846c:	2300      	movs	r3, #0
 800846e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008470:	2300      	movs	r3, #0
 8008472:	60fb      	str	r3, [r7, #12]
 8008474:	e009      	b.n	800848a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8008476:	687a      	ldr	r2, [r7, #4]
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	33e0      	adds	r3, #224	@ 0xe0
 800847c:	009b      	lsls	r3, r3, #2
 800847e:	4413      	add	r3, r2
 8008480:	2200      	movs	r2, #0
 8008482:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	3301      	adds	r3, #1
 8008488:	60fb      	str	r3, [r7, #12]
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	2b0f      	cmp	r3, #15
 800848e:	d9f2      	bls.n	8008476 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008490:	2300      	movs	r3, #0
 8008492:	60fb      	str	r3, [r7, #12]
 8008494:	e009      	b.n	80084aa <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8008496:	687a      	ldr	r2, [r7, #4]
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	4413      	add	r3, r2
 800849c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80084a0:	2200      	movs	r2, #0
 80084a2:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	3301      	adds	r3, #1
 80084a8:	60fb      	str	r3, [r7, #12]
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80084b0:	d3f1      	bcc.n	8008496 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2200      	movs	r2, #0
 80084b6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2200      	movs	r2, #0
 80084bc:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	2201      	movs	r2, #1
 80084c2:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2200      	movs	r2, #0
 80084c8:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2201      	movs	r2, #1
 80084d0:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	2240      	movs	r2, #64	@ 0x40
 80084d6:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2200      	movs	r2, #0
 80084dc:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	2200      	movs	r2, #0
 80084e2:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2201      	movs	r2, #1
 80084ea:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	2200      	movs	r2, #0
 80084f2:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2200      	movs	r2, #0
 80084fa:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	331c      	adds	r3, #28
 8008502:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008506:	2100      	movs	r1, #0
 8008508:	4618      	mov	r0, r3
 800850a:	f002 f934 	bl	800a776 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008514:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008518:	2100      	movs	r1, #0
 800851a:	4618      	mov	r0, r3
 800851c:	f002 f92b 	bl	800a776 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8008526:	2212      	movs	r2, #18
 8008528:	2100      	movs	r1, #0
 800852a:	4618      	mov	r0, r3
 800852c:	f002 f923 	bl	800a776 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8008536:	223e      	movs	r2, #62	@ 0x3e
 8008538:	2100      	movs	r1, #0
 800853a:	4618      	mov	r0, r3
 800853c:	f002 f91b 	bl	800a776 <memset>

  return USBH_OK;
 8008540:	2300      	movs	r3, #0
}
 8008542:	4618      	mov	r0, r3
 8008544:	3710      	adds	r7, #16
 8008546:	46bd      	mov	sp, r7
 8008548:	bd80      	pop	{r7, pc}

0800854a <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800854a:	b480      	push	{r7}
 800854c:	b085      	sub	sp, #20
 800854e:	af00      	add	r7, sp, #0
 8008550:	6078      	str	r0, [r7, #4]
 8008552:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8008554:	2300      	movs	r3, #0
 8008556:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d016      	beq.n	800858c <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8008564:	2b00      	cmp	r3, #0
 8008566:	d10e      	bne.n	8008586 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800856e:	1c59      	adds	r1, r3, #1
 8008570:	687a      	ldr	r2, [r7, #4]
 8008572:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8008576:	687a      	ldr	r2, [r7, #4]
 8008578:	33de      	adds	r3, #222	@ 0xde
 800857a:	6839      	ldr	r1, [r7, #0]
 800857c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8008580:	2300      	movs	r3, #0
 8008582:	73fb      	strb	r3, [r7, #15]
 8008584:	e004      	b.n	8008590 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8008586:	2302      	movs	r3, #2
 8008588:	73fb      	strb	r3, [r7, #15]
 800858a:	e001      	b.n	8008590 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800858c:	2302      	movs	r3, #2
 800858e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008590:	7bfb      	ldrb	r3, [r7, #15]
}
 8008592:	4618      	mov	r0, r3
 8008594:	3714      	adds	r7, #20
 8008596:	46bd      	mov	sp, r7
 8008598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859c:	4770      	bx	lr

0800859e <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800859e:	b480      	push	{r7}
 80085a0:	b085      	sub	sp, #20
 80085a2:	af00      	add	r7, sp, #0
 80085a4:	6078      	str	r0, [r7, #4]
 80085a6:	460b      	mov	r3, r1
 80085a8:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80085aa:	2300      	movs	r3, #0
 80085ac:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 80085b4:	78fa      	ldrb	r2, [r7, #3]
 80085b6:	429a      	cmp	r2, r3
 80085b8:	d204      	bcs.n	80085c4 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	78fa      	ldrb	r2, [r7, #3]
 80085be:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 80085c2:	e001      	b.n	80085c8 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80085c4:	2302      	movs	r3, #2
 80085c6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80085c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80085ca:	4618      	mov	r0, r3
 80085cc:	3714      	adds	r7, #20
 80085ce:	46bd      	mov	sp, r7
 80085d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d4:	4770      	bx	lr

080085d6 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80085d6:	b480      	push	{r7}
 80085d8:	b087      	sub	sp, #28
 80085da:	af00      	add	r7, sp, #0
 80085dc:	6078      	str	r0, [r7, #4]
 80085de:	4608      	mov	r0, r1
 80085e0:	4611      	mov	r1, r2
 80085e2:	461a      	mov	r2, r3
 80085e4:	4603      	mov	r3, r0
 80085e6:	70fb      	strb	r3, [r7, #3]
 80085e8:	460b      	mov	r3, r1
 80085ea:	70bb      	strb	r3, [r7, #2]
 80085ec:	4613      	mov	r3, r2
 80085ee:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80085f0:	2300      	movs	r3, #0
 80085f2:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 80085f4:	2300      	movs	r3, #0
 80085f6:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80085fe:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008600:	e025      	b.n	800864e <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8008602:	7dfb      	ldrb	r3, [r7, #23]
 8008604:	221a      	movs	r2, #26
 8008606:	fb02 f303 	mul.w	r3, r2, r3
 800860a:	3308      	adds	r3, #8
 800860c:	68fa      	ldr	r2, [r7, #12]
 800860e:	4413      	add	r3, r2
 8008610:	3302      	adds	r3, #2
 8008612:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008614:	693b      	ldr	r3, [r7, #16]
 8008616:	795b      	ldrb	r3, [r3, #5]
 8008618:	78fa      	ldrb	r2, [r7, #3]
 800861a:	429a      	cmp	r2, r3
 800861c:	d002      	beq.n	8008624 <USBH_FindInterface+0x4e>
 800861e:	78fb      	ldrb	r3, [r7, #3]
 8008620:	2bff      	cmp	r3, #255	@ 0xff
 8008622:	d111      	bne.n	8008648 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008624:	693b      	ldr	r3, [r7, #16]
 8008626:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008628:	78ba      	ldrb	r2, [r7, #2]
 800862a:	429a      	cmp	r2, r3
 800862c:	d002      	beq.n	8008634 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800862e:	78bb      	ldrb	r3, [r7, #2]
 8008630:	2bff      	cmp	r3, #255	@ 0xff
 8008632:	d109      	bne.n	8008648 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008634:	693b      	ldr	r3, [r7, #16]
 8008636:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008638:	787a      	ldrb	r2, [r7, #1]
 800863a:	429a      	cmp	r2, r3
 800863c:	d002      	beq.n	8008644 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800863e:	787b      	ldrb	r3, [r7, #1]
 8008640:	2bff      	cmp	r3, #255	@ 0xff
 8008642:	d101      	bne.n	8008648 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8008644:	7dfb      	ldrb	r3, [r7, #23]
 8008646:	e006      	b.n	8008656 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8008648:	7dfb      	ldrb	r3, [r7, #23]
 800864a:	3301      	adds	r3, #1
 800864c:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800864e:	7dfb      	ldrb	r3, [r7, #23]
 8008650:	2b01      	cmp	r3, #1
 8008652:	d9d6      	bls.n	8008602 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8008654:	23ff      	movs	r3, #255	@ 0xff
}
 8008656:	4618      	mov	r0, r3
 8008658:	371c      	adds	r7, #28
 800865a:	46bd      	mov	sp, r7
 800865c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008660:	4770      	bx	lr

08008662 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8008662:	b580      	push	{r7, lr}
 8008664:	b082      	sub	sp, #8
 8008666:	af00      	add	r7, sp, #0
 8008668:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	f001 fcf4 	bl	800a058 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8008670:	2101      	movs	r1, #1
 8008672:	6878      	ldr	r0, [r7, #4]
 8008674:	f001 fe0d 	bl	800a292 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8008678:	2300      	movs	r3, #0
}
 800867a:	4618      	mov	r0, r3
 800867c:	3708      	adds	r7, #8
 800867e:	46bd      	mov	sp, r7
 8008680:	bd80      	pop	{r7, pc}
	...

08008684 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b088      	sub	sp, #32
 8008688:	af04      	add	r7, sp, #16
 800868a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800868c:	2302      	movs	r3, #2
 800868e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8008690:	2300      	movs	r3, #0
 8008692:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 800869a:	b2db      	uxtb	r3, r3
 800869c:	2b01      	cmp	r3, #1
 800869e:	d102      	bne.n	80086a6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2203      	movs	r2, #3
 80086a4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	781b      	ldrb	r3, [r3, #0]
 80086aa:	b2db      	uxtb	r3, r3
 80086ac:	2b0b      	cmp	r3, #11
 80086ae:	f200 81bb 	bhi.w	8008a28 <USBH_Process+0x3a4>
 80086b2:	a201      	add	r2, pc, #4	@ (adr r2, 80086b8 <USBH_Process+0x34>)
 80086b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086b8:	080086e9 	.word	0x080086e9
 80086bc:	0800871b 	.word	0x0800871b
 80086c0:	08008783 	.word	0x08008783
 80086c4:	080089c3 	.word	0x080089c3
 80086c8:	08008a29 	.word	0x08008a29
 80086cc:	08008823 	.word	0x08008823
 80086d0:	08008969 	.word	0x08008969
 80086d4:	08008859 	.word	0x08008859
 80086d8:	08008879 	.word	0x08008879
 80086dc:	08008897 	.word	0x08008897
 80086e0:	080088db 	.word	0x080088db
 80086e4:	080089ab 	.word	0x080089ab
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 80086ee:	b2db      	uxtb	r3, r3
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	f000 819b 	beq.w	8008a2c <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	2201      	movs	r2, #1
 80086fa:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80086fc:	20c8      	movs	r0, #200	@ 0xc8
 80086fe:	f001 fe12 	bl	800a326 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8008702:	6878      	ldr	r0, [r7, #4]
 8008704:	f001 fd05 	bl	800a112 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2200      	movs	r2, #0
 800870c:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2200      	movs	r2, #0
 8008714:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008718:	e188      	b.n	8008a2c <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8008720:	2b01      	cmp	r3, #1
 8008722:	d107      	bne.n	8008734 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2200      	movs	r2, #0
 8008728:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2202      	movs	r2, #2
 8008730:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008732:	e18a      	b.n	8008a4a <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800873a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800873e:	d914      	bls.n	800876a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8008746:	3301      	adds	r3, #1
 8008748:	b2da      	uxtb	r2, r3
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8008756:	2b03      	cmp	r3, #3
 8008758:	d903      	bls.n	8008762 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	220d      	movs	r2, #13
 800875e:	701a      	strb	r2, [r3, #0]
      break;
 8008760:	e173      	b.n	8008a4a <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2200      	movs	r2, #0
 8008766:	701a      	strb	r2, [r3, #0]
      break;
 8008768:	e16f      	b.n	8008a4a <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8008770:	f103 020a 	add.w	r2, r3, #10
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 800877a:	200a      	movs	r0, #10
 800877c:	f001 fdd3 	bl	800a326 <USBH_Delay>
      break;
 8008780:	e163      	b.n	8008a4a <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008788:	2b00      	cmp	r3, #0
 800878a:	d005      	beq.n	8008798 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008792:	2104      	movs	r1, #4
 8008794:	6878      	ldr	r0, [r7, #4]
 8008796:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8008798:	2064      	movs	r0, #100	@ 0x64
 800879a:	f001 fdc4 	bl	800a326 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800879e:	6878      	ldr	r0, [r7, #4]
 80087a0:	f001 fc90 	bl	800a0c4 <USBH_LL_GetSpeed>
 80087a4:	4603      	mov	r3, r0
 80087a6:	461a      	mov	r2, r3
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	2205      	movs	r2, #5
 80087b2:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80087b4:	2100      	movs	r1, #0
 80087b6:	6878      	ldr	r0, [r7, #4]
 80087b8:	f001 fa9b 	bl	8009cf2 <USBH_AllocPipe>
 80087bc:	4603      	mov	r3, r0
 80087be:	461a      	mov	r2, r3
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80087c4:	2180      	movs	r1, #128	@ 0x80
 80087c6:	6878      	ldr	r0, [r7, #4]
 80087c8:	f001 fa93 	bl	8009cf2 <USBH_AllocPipe>
 80087cc:	4603      	mov	r3, r0
 80087ce:	461a      	mov	r2, r3
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	7919      	ldrb	r1, [r3, #4]
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80087e4:	687a      	ldr	r2, [r7, #4]
 80087e6:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80087e8:	9202      	str	r2, [sp, #8]
 80087ea:	2200      	movs	r2, #0
 80087ec:	9201      	str	r2, [sp, #4]
 80087ee:	9300      	str	r3, [sp, #0]
 80087f0:	4603      	mov	r3, r0
 80087f2:	2280      	movs	r2, #128	@ 0x80
 80087f4:	6878      	ldr	r0, [r7, #4]
 80087f6:	f001 fa4d 	bl	8009c94 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	7959      	ldrb	r1, [r3, #5]
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800880a:	687a      	ldr	r2, [r7, #4]
 800880c:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800880e:	9202      	str	r2, [sp, #8]
 8008810:	2200      	movs	r2, #0
 8008812:	9201      	str	r2, [sp, #4]
 8008814:	9300      	str	r3, [sp, #0]
 8008816:	4603      	mov	r3, r0
 8008818:	2200      	movs	r2, #0
 800881a:	6878      	ldr	r0, [r7, #4]
 800881c:	f001 fa3a 	bl	8009c94 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008820:	e113      	b.n	8008a4a <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8008822:	6878      	ldr	r0, [r7, #4]
 8008824:	f000 f916 	bl	8008a54 <USBH_HandleEnum>
 8008828:	4603      	mov	r3, r0
 800882a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800882c:	7bbb      	ldrb	r3, [r7, #14]
 800882e:	b2db      	uxtb	r3, r3
 8008830:	2b00      	cmp	r3, #0
 8008832:	f040 80fd 	bne.w	8008a30 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	2200      	movs	r2, #0
 800883a:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8008844:	2b01      	cmp	r3, #1
 8008846:	d103      	bne.n	8008850 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2208      	movs	r2, #8
 800884c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800884e:	e0ef      	b.n	8008a30 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2207      	movs	r2, #7
 8008854:	701a      	strb	r2, [r3, #0]
      break;
 8008856:	e0eb      	b.n	8008a30 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800885e:	2b00      	cmp	r3, #0
 8008860:	f000 80e8 	beq.w	8008a34 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800886a:	2101      	movs	r1, #1
 800886c:	6878      	ldr	r0, [r7, #4]
 800886e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2208      	movs	r2, #8
 8008874:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8008876:	e0dd      	b.n	8008a34 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 800887e:	4619      	mov	r1, r3
 8008880:	6878      	ldr	r0, [r7, #4]
 8008882:	f000 fc3a 	bl	80090fa <USBH_SetCfg>
 8008886:	4603      	mov	r3, r0
 8008888:	2b00      	cmp	r3, #0
 800888a:	f040 80d5 	bne.w	8008a38 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	2209      	movs	r2, #9
 8008892:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008894:	e0d0      	b.n	8008a38 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 800889c:	f003 0320 	and.w	r3, r3, #32
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d016      	beq.n	80088d2 <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80088a4:	2101      	movs	r1, #1
 80088a6:	6878      	ldr	r0, [r7, #4]
 80088a8:	f000 fc4a 	bl	8009140 <USBH_SetFeature>
 80088ac:	4603      	mov	r3, r0
 80088ae:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80088b0:	7bbb      	ldrb	r3, [r7, #14]
 80088b2:	b2db      	uxtb	r3, r3
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d103      	bne.n	80088c0 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	220a      	movs	r2, #10
 80088bc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80088be:	e0bd      	b.n	8008a3c <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 80088c0:	7bbb      	ldrb	r3, [r7, #14]
 80088c2:	b2db      	uxtb	r3, r3
 80088c4:	2b03      	cmp	r3, #3
 80088c6:	f040 80b9 	bne.w	8008a3c <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	220a      	movs	r2, #10
 80088ce:	701a      	strb	r2, [r3, #0]
      break;
 80088d0:	e0b4      	b.n	8008a3c <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	220a      	movs	r2, #10
 80088d6:	701a      	strb	r2, [r3, #0]
      break;
 80088d8:	e0b0      	b.n	8008a3c <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	f000 80ad 	beq.w	8008a40 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	2200      	movs	r2, #0
 80088ea:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80088ee:	2300      	movs	r3, #0
 80088f0:	73fb      	strb	r3, [r7, #15]
 80088f2:	e016      	b.n	8008922 <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80088f4:	7bfa      	ldrb	r2, [r7, #15]
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	32de      	adds	r2, #222	@ 0xde
 80088fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088fe:	791a      	ldrb	r2, [r3, #4]
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8008906:	429a      	cmp	r2, r3
 8008908:	d108      	bne.n	800891c <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 800890a:	7bfa      	ldrb	r2, [r7, #15]
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	32de      	adds	r2, #222	@ 0xde
 8008910:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 800891a:	e005      	b.n	8008928 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800891c:	7bfb      	ldrb	r3, [r7, #15]
 800891e:	3301      	adds	r3, #1
 8008920:	73fb      	strb	r3, [r7, #15]
 8008922:	7bfb      	ldrb	r3, [r7, #15]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d0e5      	beq.n	80088f4 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800892e:	2b00      	cmp	r3, #0
 8008930:	d016      	beq.n	8008960 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008938:	689b      	ldr	r3, [r3, #8]
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	4798      	blx	r3
 800893e:	4603      	mov	r3, r0
 8008940:	2b00      	cmp	r3, #0
 8008942:	d109      	bne.n	8008958 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2206      	movs	r2, #6
 8008948:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008950:	2103      	movs	r1, #3
 8008952:	6878      	ldr	r0, [r7, #4]
 8008954:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008956:	e073      	b.n	8008a40 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	220d      	movs	r2, #13
 800895c:	701a      	strb	r2, [r3, #0]
      break;
 800895e:	e06f      	b.n	8008a40 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	220d      	movs	r2, #13
 8008964:	701a      	strb	r2, [r3, #0]
      break;
 8008966:	e06b      	b.n	8008a40 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800896e:	2b00      	cmp	r3, #0
 8008970:	d017      	beq.n	80089a2 <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008978:	691b      	ldr	r3, [r3, #16]
 800897a:	6878      	ldr	r0, [r7, #4]
 800897c:	4798      	blx	r3
 800897e:	4603      	mov	r3, r0
 8008980:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008982:	7bbb      	ldrb	r3, [r7, #14]
 8008984:	b2db      	uxtb	r3, r3
 8008986:	2b00      	cmp	r3, #0
 8008988:	d103      	bne.n	8008992 <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	220b      	movs	r2, #11
 800898e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008990:	e058      	b.n	8008a44 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 8008992:	7bbb      	ldrb	r3, [r7, #14]
 8008994:	b2db      	uxtb	r3, r3
 8008996:	2b02      	cmp	r3, #2
 8008998:	d154      	bne.n	8008a44 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	220d      	movs	r2, #13
 800899e:	701a      	strb	r2, [r3, #0]
      break;
 80089a0:	e050      	b.n	8008a44 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	220d      	movs	r2, #13
 80089a6:	701a      	strb	r2, [r3, #0]
      break;
 80089a8:	e04c      	b.n	8008a44 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d049      	beq.n	8008a48 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80089ba:	695b      	ldr	r3, [r3, #20]
 80089bc:	6878      	ldr	r0, [r7, #4]
 80089be:	4798      	blx	r3
      }
      break;
 80089c0:	e042      	b.n	8008a48 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	2200      	movs	r2, #0
 80089c6:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	f7ff fd4a 	bl	8008464 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d009      	beq.n	80089ee <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80089e0:	68db      	ldr	r3, [r3, #12]
 80089e2:	6878      	ldr	r0, [r7, #4]
 80089e4:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	2200      	movs	r2, #0
 80089ea:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d005      	beq.n	8008a04 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80089fe:	2105      	movs	r1, #5
 8008a00:	6878      	ldr	r0, [r7, #4]
 8008a02:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8008a0a:	b2db      	uxtb	r3, r3
 8008a0c:	2b01      	cmp	r3, #1
 8008a0e:	d107      	bne.n	8008a20 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2200      	movs	r2, #0
 8008a14:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8008a18:	6878      	ldr	r0, [r7, #4]
 8008a1a:	f7ff fe22 	bl	8008662 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008a1e:	e014      	b.n	8008a4a <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 8008a20:	6878      	ldr	r0, [r7, #4]
 8008a22:	f001 fb19 	bl	800a058 <USBH_LL_Start>
      break;
 8008a26:	e010      	b.n	8008a4a <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 8008a28:	bf00      	nop
 8008a2a:	e00e      	b.n	8008a4a <USBH_Process+0x3c6>
      break;
 8008a2c:	bf00      	nop
 8008a2e:	e00c      	b.n	8008a4a <USBH_Process+0x3c6>
      break;
 8008a30:	bf00      	nop
 8008a32:	e00a      	b.n	8008a4a <USBH_Process+0x3c6>
    break;
 8008a34:	bf00      	nop
 8008a36:	e008      	b.n	8008a4a <USBH_Process+0x3c6>
      break;
 8008a38:	bf00      	nop
 8008a3a:	e006      	b.n	8008a4a <USBH_Process+0x3c6>
      break;
 8008a3c:	bf00      	nop
 8008a3e:	e004      	b.n	8008a4a <USBH_Process+0x3c6>
      break;
 8008a40:	bf00      	nop
 8008a42:	e002      	b.n	8008a4a <USBH_Process+0x3c6>
      break;
 8008a44:	bf00      	nop
 8008a46:	e000      	b.n	8008a4a <USBH_Process+0x3c6>
      break;
 8008a48:	bf00      	nop
  }
  return USBH_OK;
 8008a4a:	2300      	movs	r3, #0
}
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	3710      	adds	r7, #16
 8008a50:	46bd      	mov	sp, r7
 8008a52:	bd80      	pop	{r7, pc}

08008a54 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b088      	sub	sp, #32
 8008a58:	af04      	add	r7, sp, #16
 8008a5a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8008a5c:	2301      	movs	r3, #1
 8008a5e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8008a60:	2301      	movs	r3, #1
 8008a62:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	785b      	ldrb	r3, [r3, #1]
 8008a68:	2b07      	cmp	r3, #7
 8008a6a:	f200 81bd 	bhi.w	8008de8 <USBH_HandleEnum+0x394>
 8008a6e:	a201      	add	r2, pc, #4	@ (adr r2, 8008a74 <USBH_HandleEnum+0x20>)
 8008a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a74:	08008a95 	.word	0x08008a95
 8008a78:	08008b4f 	.word	0x08008b4f
 8008a7c:	08008bb9 	.word	0x08008bb9
 8008a80:	08008c43 	.word	0x08008c43
 8008a84:	08008cad 	.word	0x08008cad
 8008a88:	08008d1d 	.word	0x08008d1d
 8008a8c:	08008d63 	.word	0x08008d63
 8008a90:	08008da9 	.word	0x08008da9
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8008a94:	2108      	movs	r1, #8
 8008a96:	6878      	ldr	r0, [r7, #4]
 8008a98:	f000 fa4c 	bl	8008f34 <USBH_Get_DevDesc>
 8008a9c:	4603      	mov	r3, r0
 8008a9e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008aa0:	7bbb      	ldrb	r3, [r7, #14]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d12e      	bne.n	8008b04 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2201      	movs	r2, #1
 8008ab4:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	7919      	ldrb	r1, [r3, #4]
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008ac6:	687a      	ldr	r2, [r7, #4]
 8008ac8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008aca:	9202      	str	r2, [sp, #8]
 8008acc:	2200      	movs	r2, #0
 8008ace:	9201      	str	r2, [sp, #4]
 8008ad0:	9300      	str	r3, [sp, #0]
 8008ad2:	4603      	mov	r3, r0
 8008ad4:	2280      	movs	r2, #128	@ 0x80
 8008ad6:	6878      	ldr	r0, [r7, #4]
 8008ad8:	f001 f8dc 	bl	8009c94 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	7959      	ldrb	r1, [r3, #5]
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008aec:	687a      	ldr	r2, [r7, #4]
 8008aee:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008af0:	9202      	str	r2, [sp, #8]
 8008af2:	2200      	movs	r2, #0
 8008af4:	9201      	str	r2, [sp, #4]
 8008af6:	9300      	str	r3, [sp, #0]
 8008af8:	4603      	mov	r3, r0
 8008afa:	2200      	movs	r2, #0
 8008afc:	6878      	ldr	r0, [r7, #4]
 8008afe:	f001 f8c9 	bl	8009c94 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008b02:	e173      	b.n	8008dec <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008b04:	7bbb      	ldrb	r3, [r7, #14]
 8008b06:	2b03      	cmp	r3, #3
 8008b08:	f040 8170 	bne.w	8008dec <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008b12:	3301      	adds	r3, #1
 8008b14:	b2da      	uxtb	r2, r3
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008b22:	2b03      	cmp	r3, #3
 8008b24:	d903      	bls.n	8008b2e <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	220d      	movs	r2, #13
 8008b2a:	701a      	strb	r2, [r3, #0]
      break;
 8008b2c:	e15e      	b.n	8008dec <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	795b      	ldrb	r3, [r3, #5]
 8008b32:	4619      	mov	r1, r3
 8008b34:	6878      	ldr	r0, [r7, #4]
 8008b36:	f001 f8fd 	bl	8009d34 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	791b      	ldrb	r3, [r3, #4]
 8008b3e:	4619      	mov	r1, r3
 8008b40:	6878      	ldr	r0, [r7, #4]
 8008b42:	f001 f8f7 	bl	8009d34 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	2200      	movs	r2, #0
 8008b4a:	701a      	strb	r2, [r3, #0]
      break;
 8008b4c:	e14e      	b.n	8008dec <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8008b4e:	2112      	movs	r1, #18
 8008b50:	6878      	ldr	r0, [r7, #4]
 8008b52:	f000 f9ef 	bl	8008f34 <USBH_Get_DevDesc>
 8008b56:	4603      	mov	r3, r0
 8008b58:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008b5a:	7bbb      	ldrb	r3, [r7, #14]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d103      	bne.n	8008b68 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2202      	movs	r2, #2
 8008b64:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008b66:	e143      	b.n	8008df0 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008b68:	7bbb      	ldrb	r3, [r7, #14]
 8008b6a:	2b03      	cmp	r3, #3
 8008b6c:	f040 8140 	bne.w	8008df0 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008b76:	3301      	adds	r3, #1
 8008b78:	b2da      	uxtb	r2, r3
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008b86:	2b03      	cmp	r3, #3
 8008b88:	d903      	bls.n	8008b92 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	220d      	movs	r2, #13
 8008b8e:	701a      	strb	r2, [r3, #0]
      break;
 8008b90:	e12e      	b.n	8008df0 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	795b      	ldrb	r3, [r3, #5]
 8008b96:	4619      	mov	r1, r3
 8008b98:	6878      	ldr	r0, [r7, #4]
 8008b9a:	f001 f8cb 	bl	8009d34 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	791b      	ldrb	r3, [r3, #4]
 8008ba2:	4619      	mov	r1, r3
 8008ba4:	6878      	ldr	r0, [r7, #4]
 8008ba6:	f001 f8c5 	bl	8009d34 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	2200      	movs	r2, #0
 8008bae:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	701a      	strb	r2, [r3, #0]
      break;
 8008bb6:	e11b      	b.n	8008df0 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8008bb8:	2101      	movs	r1, #1
 8008bba:	6878      	ldr	r0, [r7, #4]
 8008bbc:	f000 fa79 	bl	80090b2 <USBH_SetAddress>
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008bc4:	7bbb      	ldrb	r3, [r7, #14]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d130      	bne.n	8008c2c <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8008bca:	2002      	movs	r0, #2
 8008bcc:	f001 fbab 	bl	800a326 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2201      	movs	r2, #1
 8008bd4:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2203      	movs	r2, #3
 8008bdc:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	7919      	ldrb	r1, [r3, #4]
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008bee:	687a      	ldr	r2, [r7, #4]
 8008bf0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008bf2:	9202      	str	r2, [sp, #8]
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	9201      	str	r2, [sp, #4]
 8008bf8:	9300      	str	r3, [sp, #0]
 8008bfa:	4603      	mov	r3, r0
 8008bfc:	2280      	movs	r2, #128	@ 0x80
 8008bfe:	6878      	ldr	r0, [r7, #4]
 8008c00:	f001 f848 	bl	8009c94 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	7959      	ldrb	r1, [r3, #5]
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008c14:	687a      	ldr	r2, [r7, #4]
 8008c16:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008c18:	9202      	str	r2, [sp, #8]
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	9201      	str	r2, [sp, #4]
 8008c1e:	9300      	str	r3, [sp, #0]
 8008c20:	4603      	mov	r3, r0
 8008c22:	2200      	movs	r2, #0
 8008c24:	6878      	ldr	r0, [r7, #4]
 8008c26:	f001 f835 	bl	8009c94 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008c2a:	e0e3      	b.n	8008df4 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008c2c:	7bbb      	ldrb	r3, [r7, #14]
 8008c2e:	2b03      	cmp	r3, #3
 8008c30:	f040 80e0 	bne.w	8008df4 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	220d      	movs	r2, #13
 8008c38:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	705a      	strb	r2, [r3, #1]
      break;
 8008c40:	e0d8      	b.n	8008df4 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8008c42:	2109      	movs	r1, #9
 8008c44:	6878      	ldr	r0, [r7, #4]
 8008c46:	f000 f9a1 	bl	8008f8c <USBH_Get_CfgDesc>
 8008c4a:	4603      	mov	r3, r0
 8008c4c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008c4e:	7bbb      	ldrb	r3, [r7, #14]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d103      	bne.n	8008c5c <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2204      	movs	r2, #4
 8008c58:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008c5a:	e0cd      	b.n	8008df8 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008c5c:	7bbb      	ldrb	r3, [r7, #14]
 8008c5e:	2b03      	cmp	r3, #3
 8008c60:	f040 80ca 	bne.w	8008df8 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008c6a:	3301      	adds	r3, #1
 8008c6c:	b2da      	uxtb	r2, r3
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008c7a:	2b03      	cmp	r3, #3
 8008c7c:	d903      	bls.n	8008c86 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	220d      	movs	r2, #13
 8008c82:	701a      	strb	r2, [r3, #0]
      break;
 8008c84:	e0b8      	b.n	8008df8 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	795b      	ldrb	r3, [r3, #5]
 8008c8a:	4619      	mov	r1, r3
 8008c8c:	6878      	ldr	r0, [r7, #4]
 8008c8e:	f001 f851 	bl	8009d34 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	791b      	ldrb	r3, [r3, #4]
 8008c96:	4619      	mov	r1, r3
 8008c98:	6878      	ldr	r0, [r7, #4]
 8008c9a:	f001 f84b 	bl	8009d34 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	701a      	strb	r2, [r3, #0]
      break;
 8008caa:	e0a5      	b.n	8008df8 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 8008cb2:	4619      	mov	r1, r3
 8008cb4:	6878      	ldr	r0, [r7, #4]
 8008cb6:	f000 f969 	bl	8008f8c <USBH_Get_CfgDesc>
 8008cba:	4603      	mov	r3, r0
 8008cbc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008cbe:	7bbb      	ldrb	r3, [r7, #14]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d103      	bne.n	8008ccc <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2205      	movs	r2, #5
 8008cc8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008cca:	e097      	b.n	8008dfc <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008ccc:	7bbb      	ldrb	r3, [r7, #14]
 8008cce:	2b03      	cmp	r3, #3
 8008cd0:	f040 8094 	bne.w	8008dfc <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008cda:	3301      	adds	r3, #1
 8008cdc:	b2da      	uxtb	r2, r3
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008cea:	2b03      	cmp	r3, #3
 8008cec:	d903      	bls.n	8008cf6 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	220d      	movs	r2, #13
 8008cf2:	701a      	strb	r2, [r3, #0]
      break;
 8008cf4:	e082      	b.n	8008dfc <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	795b      	ldrb	r3, [r3, #5]
 8008cfa:	4619      	mov	r1, r3
 8008cfc:	6878      	ldr	r0, [r7, #4]
 8008cfe:	f001 f819 	bl	8009d34 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	791b      	ldrb	r3, [r3, #4]
 8008d06:	4619      	mov	r1, r3
 8008d08:	6878      	ldr	r0, [r7, #4]
 8008d0a:	f001 f813 	bl	8009d34 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	2200      	movs	r2, #0
 8008d12:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2200      	movs	r2, #0
 8008d18:	701a      	strb	r2, [r3, #0]
      break;
 8008d1a:	e06f      	b.n	8008dfc <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d019      	beq.n	8008d5a <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008d32:	23ff      	movs	r3, #255	@ 0xff
 8008d34:	6878      	ldr	r0, [r7, #4]
 8008d36:	f000 f953 	bl	8008fe0 <USBH_Get_StringDesc>
 8008d3a:	4603      	mov	r3, r0
 8008d3c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008d3e:	7bbb      	ldrb	r3, [r7, #14]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d103      	bne.n	8008d4c <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2206      	movs	r2, #6
 8008d48:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008d4a:	e059      	b.n	8008e00 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008d4c:	7bbb      	ldrb	r3, [r7, #14]
 8008d4e:	2b03      	cmp	r3, #3
 8008d50:	d156      	bne.n	8008e00 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	2206      	movs	r2, #6
 8008d56:	705a      	strb	r2, [r3, #1]
      break;
 8008d58:	e052      	b.n	8008e00 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	2206      	movs	r2, #6
 8008d5e:	705a      	strb	r2, [r3, #1]
      break;
 8008d60:	e04e      	b.n	8008e00 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d019      	beq.n	8008da0 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008d78:	23ff      	movs	r3, #255	@ 0xff
 8008d7a:	6878      	ldr	r0, [r7, #4]
 8008d7c:	f000 f930 	bl	8008fe0 <USBH_Get_StringDesc>
 8008d80:	4603      	mov	r3, r0
 8008d82:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008d84:	7bbb      	ldrb	r3, [r7, #14]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d103      	bne.n	8008d92 <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	2207      	movs	r2, #7
 8008d8e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008d90:	e038      	b.n	8008e04 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008d92:	7bbb      	ldrb	r3, [r7, #14]
 8008d94:	2b03      	cmp	r3, #3
 8008d96:	d135      	bne.n	8008e04 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2207      	movs	r2, #7
 8008d9c:	705a      	strb	r2, [r3, #1]
      break;
 8008d9e:	e031      	b.n	8008e04 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2207      	movs	r2, #7
 8008da4:	705a      	strb	r2, [r3, #1]
      break;
 8008da6:	e02d      	b.n	8008e04 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d017      	beq.n	8008de2 <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008dbe:	23ff      	movs	r3, #255	@ 0xff
 8008dc0:	6878      	ldr	r0, [r7, #4]
 8008dc2:	f000 f90d 	bl	8008fe0 <USBH_Get_StringDesc>
 8008dc6:	4603      	mov	r3, r0
 8008dc8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008dca:	7bbb      	ldrb	r3, [r7, #14]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d102      	bne.n	8008dd6 <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8008dd4:	e018      	b.n	8008e08 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008dd6:	7bbb      	ldrb	r3, [r7, #14]
 8008dd8:	2b03      	cmp	r3, #3
 8008dda:	d115      	bne.n	8008e08 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 8008ddc:	2300      	movs	r3, #0
 8008dde:	73fb      	strb	r3, [r7, #15]
      break;
 8008de0:	e012      	b.n	8008e08 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 8008de2:	2300      	movs	r3, #0
 8008de4:	73fb      	strb	r3, [r7, #15]
      break;
 8008de6:	e00f      	b.n	8008e08 <USBH_HandleEnum+0x3b4>

    default:
      break;
 8008de8:	bf00      	nop
 8008dea:	e00e      	b.n	8008e0a <USBH_HandleEnum+0x3b6>
      break;
 8008dec:	bf00      	nop
 8008dee:	e00c      	b.n	8008e0a <USBH_HandleEnum+0x3b6>
      break;
 8008df0:	bf00      	nop
 8008df2:	e00a      	b.n	8008e0a <USBH_HandleEnum+0x3b6>
      break;
 8008df4:	bf00      	nop
 8008df6:	e008      	b.n	8008e0a <USBH_HandleEnum+0x3b6>
      break;
 8008df8:	bf00      	nop
 8008dfa:	e006      	b.n	8008e0a <USBH_HandleEnum+0x3b6>
      break;
 8008dfc:	bf00      	nop
 8008dfe:	e004      	b.n	8008e0a <USBH_HandleEnum+0x3b6>
      break;
 8008e00:	bf00      	nop
 8008e02:	e002      	b.n	8008e0a <USBH_HandleEnum+0x3b6>
      break;
 8008e04:	bf00      	nop
 8008e06:	e000      	b.n	8008e0a <USBH_HandleEnum+0x3b6>
      break;
 8008e08:	bf00      	nop
  }
  return Status;
 8008e0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	3710      	adds	r7, #16
 8008e10:	46bd      	mov	sp, r7
 8008e12:	bd80      	pop	{r7, pc}

08008e14 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8008e14:	b480      	push	{r7}
 8008e16:	b083      	sub	sp, #12
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
 8008e1c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	683a      	ldr	r2, [r7, #0]
 8008e22:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 8008e26:	bf00      	nop
 8008e28:	370c      	adds	r7, #12
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e30:	4770      	bx	lr

08008e32 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8008e32:	b580      	push	{r7, lr}
 8008e34:	b082      	sub	sp, #8
 8008e36:	af00      	add	r7, sp, #0
 8008e38:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008e40:	1c5a      	adds	r2, r3, #1
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8008e48:	6878      	ldr	r0, [r7, #4]
 8008e4a:	f000 f804 	bl	8008e56 <USBH_HandleSof>
}
 8008e4e:	bf00      	nop
 8008e50:	3708      	adds	r7, #8
 8008e52:	46bd      	mov	sp, r7
 8008e54:	bd80      	pop	{r7, pc}

08008e56 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8008e56:	b580      	push	{r7, lr}
 8008e58:	b082      	sub	sp, #8
 8008e5a:	af00      	add	r7, sp, #0
 8008e5c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	781b      	ldrb	r3, [r3, #0]
 8008e62:	b2db      	uxtb	r3, r3
 8008e64:	2b0b      	cmp	r3, #11
 8008e66:	d10a      	bne.n	8008e7e <USBH_HandleSof+0x28>
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d005      	beq.n	8008e7e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008e78:	699b      	ldr	r3, [r3, #24]
 8008e7a:	6878      	ldr	r0, [r7, #4]
 8008e7c:	4798      	blx	r3
  }
}
 8008e7e:	bf00      	nop
 8008e80:	3708      	adds	r7, #8
 8008e82:	46bd      	mov	sp, r7
 8008e84:	bd80      	pop	{r7, pc}

08008e86 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8008e86:	b480      	push	{r7}
 8008e88:	b083      	sub	sp, #12
 8008e8a:	af00      	add	r7, sp, #0
 8008e8c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	2201      	movs	r2, #1
 8008e92:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8008e96:	bf00      	nop
}
 8008e98:	370c      	adds	r7, #12
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea0:	4770      	bx	lr

08008ea2 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8008ea2:	b480      	push	{r7}
 8008ea4:	b083      	sub	sp, #12
 8008ea6:	af00      	add	r7, sp, #0
 8008ea8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	2200      	movs	r2, #0
 8008eae:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8008eb2:	bf00      	nop
}
 8008eb4:	370c      	adds	r7, #12
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ebc:	4770      	bx	lr

08008ebe <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8008ebe:	b480      	push	{r7}
 8008ec0:	b083      	sub	sp, #12
 8008ec2:	af00      	add	r7, sp, #0
 8008ec4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	2201      	movs	r2, #1
 8008eca:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	2200      	movs	r2, #0
 8008eda:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008ede:	2300      	movs	r3, #0
}
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	370c      	adds	r7, #12
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eea:	4770      	bx	lr

08008eec <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b082      	sub	sp, #8
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2201      	movs	r2, #1
 8008ef8:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	2200      	movs	r2, #0
 8008f00:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2200      	movs	r2, #0
 8008f08:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8008f0c:	6878      	ldr	r0, [r7, #4]
 8008f0e:	f001 f8be 	bl	800a08e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	791b      	ldrb	r3, [r3, #4]
 8008f16:	4619      	mov	r1, r3
 8008f18:	6878      	ldr	r0, [r7, #4]
 8008f1a:	f000 ff0b 	bl	8009d34 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	795b      	ldrb	r3, [r3, #5]
 8008f22:	4619      	mov	r1, r3
 8008f24:	6878      	ldr	r0, [r7, #4]
 8008f26:	f000 ff05 	bl	8009d34 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008f2a:	2300      	movs	r3, #0
}
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	3708      	adds	r7, #8
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bd80      	pop	{r7, pc}

08008f34 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b086      	sub	sp, #24
 8008f38:	af02      	add	r7, sp, #8
 8008f3a:	6078      	str	r0, [r7, #4]
 8008f3c:	460b      	mov	r3, r1
 8008f3e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8008f40:	887b      	ldrh	r3, [r7, #2]
 8008f42:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f46:	d901      	bls.n	8008f4c <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8008f48:	2303      	movs	r3, #3
 8008f4a:	e01b      	b.n	8008f84 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8008f52:	887b      	ldrh	r3, [r7, #2]
 8008f54:	9300      	str	r3, [sp, #0]
 8008f56:	4613      	mov	r3, r2
 8008f58:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008f5c:	2100      	movs	r1, #0
 8008f5e:	6878      	ldr	r0, [r7, #4]
 8008f60:	f000 f872 	bl	8009048 <USBH_GetDescriptor>
 8008f64:	4603      	mov	r3, r0
 8008f66:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8008f68:	7bfb      	ldrb	r3, [r7, #15]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d109      	bne.n	8008f82 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008f74:	887a      	ldrh	r2, [r7, #2]
 8008f76:	4619      	mov	r1, r3
 8008f78:	6878      	ldr	r0, [r7, #4]
 8008f7a:	f000 f929 	bl	80091d0 <USBH_ParseDevDesc>
 8008f7e:	4603      	mov	r3, r0
 8008f80:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008f82:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f84:	4618      	mov	r0, r3
 8008f86:	3710      	adds	r7, #16
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	bd80      	pop	{r7, pc}

08008f8c <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b086      	sub	sp, #24
 8008f90:	af02      	add	r7, sp, #8
 8008f92:	6078      	str	r0, [r7, #4]
 8008f94:	460b      	mov	r3, r1
 8008f96:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	331c      	adds	r3, #28
 8008f9c:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8008f9e:	887b      	ldrh	r3, [r7, #2]
 8008fa0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008fa4:	d901      	bls.n	8008faa <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8008fa6:	2303      	movs	r3, #3
 8008fa8:	e016      	b.n	8008fd8 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8008faa:	887b      	ldrh	r3, [r7, #2]
 8008fac:	9300      	str	r3, [sp, #0]
 8008fae:	68bb      	ldr	r3, [r7, #8]
 8008fb0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008fb4:	2100      	movs	r1, #0
 8008fb6:	6878      	ldr	r0, [r7, #4]
 8008fb8:	f000 f846 	bl	8009048 <USBH_GetDescriptor>
 8008fbc:	4603      	mov	r3, r0
 8008fbe:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8008fc0:	7bfb      	ldrb	r3, [r7, #15]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d107      	bne.n	8008fd6 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8008fc6:	887b      	ldrh	r3, [r7, #2]
 8008fc8:	461a      	mov	r2, r3
 8008fca:	68b9      	ldr	r1, [r7, #8]
 8008fcc:	6878      	ldr	r0, [r7, #4]
 8008fce:	f000 f9af 	bl	8009330 <USBH_ParseCfgDesc>
 8008fd2:	4603      	mov	r3, r0
 8008fd4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008fd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fd8:	4618      	mov	r0, r3
 8008fda:	3710      	adds	r7, #16
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	bd80      	pop	{r7, pc}

08008fe0 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b088      	sub	sp, #32
 8008fe4:	af02      	add	r7, sp, #8
 8008fe6:	60f8      	str	r0, [r7, #12]
 8008fe8:	607a      	str	r2, [r7, #4]
 8008fea:	461a      	mov	r2, r3
 8008fec:	460b      	mov	r3, r1
 8008fee:	72fb      	strb	r3, [r7, #11]
 8008ff0:	4613      	mov	r3, r2
 8008ff2:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8008ff4:	893b      	ldrh	r3, [r7, #8]
 8008ff6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ffa:	d802      	bhi.n	8009002 <USBH_Get_StringDesc+0x22>
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d101      	bne.n	8009006 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8009002:	2303      	movs	r3, #3
 8009004:	e01c      	b.n	8009040 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8009006:	7afb      	ldrb	r3, [r7, #11]
 8009008:	b29b      	uxth	r3, r3
 800900a:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800900e:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8009016:	893b      	ldrh	r3, [r7, #8]
 8009018:	9300      	str	r3, [sp, #0]
 800901a:	460b      	mov	r3, r1
 800901c:	2100      	movs	r1, #0
 800901e:	68f8      	ldr	r0, [r7, #12]
 8009020:	f000 f812 	bl	8009048 <USBH_GetDescriptor>
 8009024:	4603      	mov	r3, r0
 8009026:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8009028:	7dfb      	ldrb	r3, [r7, #23]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d107      	bne.n	800903e <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009034:	893a      	ldrh	r2, [r7, #8]
 8009036:	6879      	ldr	r1, [r7, #4]
 8009038:	4618      	mov	r0, r3
 800903a:	f000 fb8d 	bl	8009758 <USBH_ParseStringDesc>
  }

  return status;
 800903e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009040:	4618      	mov	r0, r3
 8009042:	3718      	adds	r7, #24
 8009044:	46bd      	mov	sp, r7
 8009046:	bd80      	pop	{r7, pc}

08009048 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b084      	sub	sp, #16
 800904c:	af00      	add	r7, sp, #0
 800904e:	60f8      	str	r0, [r7, #12]
 8009050:	607b      	str	r3, [r7, #4]
 8009052:	460b      	mov	r3, r1
 8009054:	72fb      	strb	r3, [r7, #11]
 8009056:	4613      	mov	r3, r2
 8009058:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	789b      	ldrb	r3, [r3, #2]
 800905e:	2b01      	cmp	r3, #1
 8009060:	d11c      	bne.n	800909c <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8009062:	7afb      	ldrb	r3, [r7, #11]
 8009064:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009068:	b2da      	uxtb	r2, r3
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	2206      	movs	r2, #6
 8009072:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	893a      	ldrh	r2, [r7, #8]
 8009078:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800907a:	893b      	ldrh	r3, [r7, #8]
 800907c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8009080:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009084:	d104      	bne.n	8009090 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	f240 4209 	movw	r2, #1033	@ 0x409
 800908c:	829a      	strh	r2, [r3, #20]
 800908e:	e002      	b.n	8009096 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	2200      	movs	r2, #0
 8009094:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	8b3a      	ldrh	r2, [r7, #24]
 800909a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800909c:	8b3b      	ldrh	r3, [r7, #24]
 800909e:	461a      	mov	r2, r3
 80090a0:	6879      	ldr	r1, [r7, #4]
 80090a2:	68f8      	ldr	r0, [r7, #12]
 80090a4:	f000 fba5 	bl	80097f2 <USBH_CtlReq>
 80090a8:	4603      	mov	r3, r0
}
 80090aa:	4618      	mov	r0, r3
 80090ac:	3710      	adds	r7, #16
 80090ae:	46bd      	mov	sp, r7
 80090b0:	bd80      	pop	{r7, pc}

080090b2 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80090b2:	b580      	push	{r7, lr}
 80090b4:	b082      	sub	sp, #8
 80090b6:	af00      	add	r7, sp, #0
 80090b8:	6078      	str	r0, [r7, #4]
 80090ba:	460b      	mov	r3, r1
 80090bc:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	789b      	ldrb	r3, [r3, #2]
 80090c2:	2b01      	cmp	r3, #1
 80090c4:	d10f      	bne.n	80090e6 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	2200      	movs	r2, #0
 80090ca:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2205      	movs	r2, #5
 80090d0:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80090d2:	78fb      	ldrb	r3, [r7, #3]
 80090d4:	b29a      	uxth	r2, r3
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	2200      	movs	r2, #0
 80090de:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	2200      	movs	r2, #0
 80090e4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80090e6:	2200      	movs	r2, #0
 80090e8:	2100      	movs	r1, #0
 80090ea:	6878      	ldr	r0, [r7, #4]
 80090ec:	f000 fb81 	bl	80097f2 <USBH_CtlReq>
 80090f0:	4603      	mov	r3, r0
}
 80090f2:	4618      	mov	r0, r3
 80090f4:	3708      	adds	r7, #8
 80090f6:	46bd      	mov	sp, r7
 80090f8:	bd80      	pop	{r7, pc}

080090fa <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80090fa:	b580      	push	{r7, lr}
 80090fc:	b082      	sub	sp, #8
 80090fe:	af00      	add	r7, sp, #0
 8009100:	6078      	str	r0, [r7, #4]
 8009102:	460b      	mov	r3, r1
 8009104:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	789b      	ldrb	r3, [r3, #2]
 800910a:	2b01      	cmp	r3, #1
 800910c:	d10e      	bne.n	800912c <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	2200      	movs	r2, #0
 8009112:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2209      	movs	r2, #9
 8009118:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	887a      	ldrh	r2, [r7, #2]
 800911e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2200      	movs	r2, #0
 8009124:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	2200      	movs	r2, #0
 800912a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800912c:	2200      	movs	r2, #0
 800912e:	2100      	movs	r1, #0
 8009130:	6878      	ldr	r0, [r7, #4]
 8009132:	f000 fb5e 	bl	80097f2 <USBH_CtlReq>
 8009136:	4603      	mov	r3, r0
}
 8009138:	4618      	mov	r0, r3
 800913a:	3708      	adds	r7, #8
 800913c:	46bd      	mov	sp, r7
 800913e:	bd80      	pop	{r7, pc}

08009140 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b082      	sub	sp, #8
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
 8009148:	460b      	mov	r3, r1
 800914a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	789b      	ldrb	r3, [r3, #2]
 8009150:	2b01      	cmp	r3, #1
 8009152:	d10f      	bne.n	8009174 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2200      	movs	r2, #0
 8009158:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	2203      	movs	r2, #3
 800915e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8009160:	78fb      	ldrb	r3, [r7, #3]
 8009162:	b29a      	uxth	r2, r3
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2200      	movs	r2, #0
 800916c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	2200      	movs	r2, #0
 8009172:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009174:	2200      	movs	r2, #0
 8009176:	2100      	movs	r1, #0
 8009178:	6878      	ldr	r0, [r7, #4]
 800917a:	f000 fb3a 	bl	80097f2 <USBH_CtlReq>
 800917e:	4603      	mov	r3, r0
}
 8009180:	4618      	mov	r0, r3
 8009182:	3708      	adds	r7, #8
 8009184:	46bd      	mov	sp, r7
 8009186:	bd80      	pop	{r7, pc}

08009188 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8009188:	b580      	push	{r7, lr}
 800918a:	b082      	sub	sp, #8
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
 8009190:	460b      	mov	r3, r1
 8009192:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	789b      	ldrb	r3, [r3, #2]
 8009198:	2b01      	cmp	r3, #1
 800919a:	d10f      	bne.n	80091bc <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	2202      	movs	r2, #2
 80091a0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	2201      	movs	r2, #1
 80091a6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	2200      	movs	r2, #0
 80091ac:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80091ae:	78fb      	ldrb	r3, [r7, #3]
 80091b0:	b29a      	uxth	r2, r3
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	2200      	movs	r2, #0
 80091ba:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80091bc:	2200      	movs	r2, #0
 80091be:	2100      	movs	r1, #0
 80091c0:	6878      	ldr	r0, [r7, #4]
 80091c2:	f000 fb16 	bl	80097f2 <USBH_CtlReq>
 80091c6:	4603      	mov	r3, r0
}
 80091c8:	4618      	mov	r0, r3
 80091ca:	3708      	adds	r7, #8
 80091cc:	46bd      	mov	sp, r7
 80091ce:	bd80      	pop	{r7, pc}

080091d0 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80091d0:	b480      	push	{r7}
 80091d2:	b087      	sub	sp, #28
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	60f8      	str	r0, [r7, #12]
 80091d8:	60b9      	str	r1, [r7, #8]
 80091da:	4613      	mov	r3, r2
 80091dc:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	f203 3326 	addw	r3, r3, #806	@ 0x326
 80091e4:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 80091e6:	2300      	movs	r3, #0
 80091e8:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 80091ea:	68bb      	ldr	r3, [r7, #8]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d101      	bne.n	80091f4 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 80091f0:	2302      	movs	r3, #2
 80091f2:	e094      	b.n	800931e <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 80091f4:	68bb      	ldr	r3, [r7, #8]
 80091f6:	781a      	ldrb	r2, [r3, #0]
 80091f8:	693b      	ldr	r3, [r7, #16]
 80091fa:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 80091fc:	68bb      	ldr	r3, [r7, #8]
 80091fe:	785a      	ldrb	r2, [r3, #1]
 8009200:	693b      	ldr	r3, [r7, #16]
 8009202:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8009204:	68bb      	ldr	r3, [r7, #8]
 8009206:	3302      	adds	r3, #2
 8009208:	781b      	ldrb	r3, [r3, #0]
 800920a:	461a      	mov	r2, r3
 800920c:	68bb      	ldr	r3, [r7, #8]
 800920e:	3303      	adds	r3, #3
 8009210:	781b      	ldrb	r3, [r3, #0]
 8009212:	021b      	lsls	r3, r3, #8
 8009214:	b29b      	uxth	r3, r3
 8009216:	4313      	orrs	r3, r2
 8009218:	b29a      	uxth	r2, r3
 800921a:	693b      	ldr	r3, [r7, #16]
 800921c:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800921e:	68bb      	ldr	r3, [r7, #8]
 8009220:	791a      	ldrb	r2, [r3, #4]
 8009222:	693b      	ldr	r3, [r7, #16]
 8009224:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8009226:	68bb      	ldr	r3, [r7, #8]
 8009228:	795a      	ldrb	r2, [r3, #5]
 800922a:	693b      	ldr	r3, [r7, #16]
 800922c:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800922e:	68bb      	ldr	r3, [r7, #8]
 8009230:	799a      	ldrb	r2, [r3, #6]
 8009232:	693b      	ldr	r3, [r7, #16]
 8009234:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8009236:	68bb      	ldr	r3, [r7, #8]
 8009238:	79da      	ldrb	r2, [r3, #7]
 800923a:	693b      	ldr	r3, [r7, #16]
 800923c:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009244:	2b00      	cmp	r3, #0
 8009246:	d004      	beq.n	8009252 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800924e:	2b01      	cmp	r3, #1
 8009250:	d11b      	bne.n	800928a <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8009252:	693b      	ldr	r3, [r7, #16]
 8009254:	79db      	ldrb	r3, [r3, #7]
 8009256:	2b20      	cmp	r3, #32
 8009258:	dc0f      	bgt.n	800927a <USBH_ParseDevDesc+0xaa>
 800925a:	2b08      	cmp	r3, #8
 800925c:	db0f      	blt.n	800927e <USBH_ParseDevDesc+0xae>
 800925e:	3b08      	subs	r3, #8
 8009260:	4a32      	ldr	r2, [pc, #200]	@ (800932c <USBH_ParseDevDesc+0x15c>)
 8009262:	fa22 f303 	lsr.w	r3, r2, r3
 8009266:	f003 0301 	and.w	r3, r3, #1
 800926a:	2b00      	cmp	r3, #0
 800926c:	bf14      	ite	ne
 800926e:	2301      	movne	r3, #1
 8009270:	2300      	moveq	r3, #0
 8009272:	b2db      	uxtb	r3, r3
 8009274:	2b00      	cmp	r3, #0
 8009276:	d106      	bne.n	8009286 <USBH_ParseDevDesc+0xb6>
 8009278:	e001      	b.n	800927e <USBH_ParseDevDesc+0xae>
 800927a:	2b40      	cmp	r3, #64	@ 0x40
 800927c:	d003      	beq.n	8009286 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800927e:	693b      	ldr	r3, [r7, #16]
 8009280:	2208      	movs	r2, #8
 8009282:	71da      	strb	r2, [r3, #7]
        break;
 8009284:	e000      	b.n	8009288 <USBH_ParseDevDesc+0xb8>
        break;
 8009286:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8009288:	e00e      	b.n	80092a8 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009290:	2b02      	cmp	r3, #2
 8009292:	d107      	bne.n	80092a4 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8009294:	693b      	ldr	r3, [r7, #16]
 8009296:	79db      	ldrb	r3, [r3, #7]
 8009298:	2b08      	cmp	r3, #8
 800929a:	d005      	beq.n	80092a8 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800929c:	693b      	ldr	r3, [r7, #16]
 800929e:	2208      	movs	r2, #8
 80092a0:	71da      	strb	r2, [r3, #7]
 80092a2:	e001      	b.n	80092a8 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 80092a4:	2303      	movs	r3, #3
 80092a6:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 80092a8:	88fb      	ldrh	r3, [r7, #6]
 80092aa:	2b08      	cmp	r3, #8
 80092ac:	d936      	bls.n	800931c <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 80092ae:	68bb      	ldr	r3, [r7, #8]
 80092b0:	3308      	adds	r3, #8
 80092b2:	781b      	ldrb	r3, [r3, #0]
 80092b4:	461a      	mov	r2, r3
 80092b6:	68bb      	ldr	r3, [r7, #8]
 80092b8:	3309      	adds	r3, #9
 80092ba:	781b      	ldrb	r3, [r3, #0]
 80092bc:	021b      	lsls	r3, r3, #8
 80092be:	b29b      	uxth	r3, r3
 80092c0:	4313      	orrs	r3, r2
 80092c2:	b29a      	uxth	r2, r3
 80092c4:	693b      	ldr	r3, [r7, #16]
 80092c6:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 80092c8:	68bb      	ldr	r3, [r7, #8]
 80092ca:	330a      	adds	r3, #10
 80092cc:	781b      	ldrb	r3, [r3, #0]
 80092ce:	461a      	mov	r2, r3
 80092d0:	68bb      	ldr	r3, [r7, #8]
 80092d2:	330b      	adds	r3, #11
 80092d4:	781b      	ldrb	r3, [r3, #0]
 80092d6:	021b      	lsls	r3, r3, #8
 80092d8:	b29b      	uxth	r3, r3
 80092da:	4313      	orrs	r3, r2
 80092dc:	b29a      	uxth	r2, r3
 80092de:	693b      	ldr	r3, [r7, #16]
 80092e0:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 80092e2:	68bb      	ldr	r3, [r7, #8]
 80092e4:	330c      	adds	r3, #12
 80092e6:	781b      	ldrb	r3, [r3, #0]
 80092e8:	461a      	mov	r2, r3
 80092ea:	68bb      	ldr	r3, [r7, #8]
 80092ec:	330d      	adds	r3, #13
 80092ee:	781b      	ldrb	r3, [r3, #0]
 80092f0:	021b      	lsls	r3, r3, #8
 80092f2:	b29b      	uxth	r3, r3
 80092f4:	4313      	orrs	r3, r2
 80092f6:	b29a      	uxth	r2, r3
 80092f8:	693b      	ldr	r3, [r7, #16]
 80092fa:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 80092fc:	68bb      	ldr	r3, [r7, #8]
 80092fe:	7b9a      	ldrb	r2, [r3, #14]
 8009300:	693b      	ldr	r3, [r7, #16]
 8009302:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8009304:	68bb      	ldr	r3, [r7, #8]
 8009306:	7bda      	ldrb	r2, [r3, #15]
 8009308:	693b      	ldr	r3, [r7, #16]
 800930a:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800930c:	68bb      	ldr	r3, [r7, #8]
 800930e:	7c1a      	ldrb	r2, [r3, #16]
 8009310:	693b      	ldr	r3, [r7, #16]
 8009312:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8009314:	68bb      	ldr	r3, [r7, #8]
 8009316:	7c5a      	ldrb	r2, [r3, #17]
 8009318:	693b      	ldr	r3, [r7, #16]
 800931a:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800931c:	7dfb      	ldrb	r3, [r7, #23]
}
 800931e:	4618      	mov	r0, r3
 8009320:	371c      	adds	r7, #28
 8009322:	46bd      	mov	sp, r7
 8009324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009328:	4770      	bx	lr
 800932a:	bf00      	nop
 800932c:	01000101 	.word	0x01000101

08009330 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b08c      	sub	sp, #48	@ 0x30
 8009334:	af00      	add	r7, sp, #0
 8009336:	60f8      	str	r0, [r7, #12]
 8009338:	60b9      	str	r1, [r7, #8]
 800933a:	4613      	mov	r3, r2
 800933c:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8009344:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8009346:	2300      	movs	r3, #0
 8009348:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800934c:	2300      	movs	r3, #0
 800934e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 8009352:	2300      	movs	r3, #0
 8009354:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8009358:	68bb      	ldr	r3, [r7, #8]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d101      	bne.n	8009362 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800935e:	2302      	movs	r3, #2
 8009360:	e0da      	b.n	8009518 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8009362:	68bb      	ldr	r3, [r7, #8]
 8009364:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8009366:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009368:	781b      	ldrb	r3, [r3, #0]
 800936a:	2b09      	cmp	r3, #9
 800936c:	d002      	beq.n	8009374 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800936e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009370:	2209      	movs	r2, #9
 8009372:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8009374:	68bb      	ldr	r3, [r7, #8]
 8009376:	781a      	ldrb	r2, [r3, #0]
 8009378:	6a3b      	ldr	r3, [r7, #32]
 800937a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800937c:	68bb      	ldr	r3, [r7, #8]
 800937e:	785a      	ldrb	r2, [r3, #1]
 8009380:	6a3b      	ldr	r3, [r7, #32]
 8009382:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8009384:	68bb      	ldr	r3, [r7, #8]
 8009386:	3302      	adds	r3, #2
 8009388:	781b      	ldrb	r3, [r3, #0]
 800938a:	461a      	mov	r2, r3
 800938c:	68bb      	ldr	r3, [r7, #8]
 800938e:	3303      	adds	r3, #3
 8009390:	781b      	ldrb	r3, [r3, #0]
 8009392:	021b      	lsls	r3, r3, #8
 8009394:	b29b      	uxth	r3, r3
 8009396:	4313      	orrs	r3, r2
 8009398:	b29b      	uxth	r3, r3
 800939a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800939e:	bf28      	it	cs
 80093a0:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 80093a4:	b29a      	uxth	r2, r3
 80093a6:	6a3b      	ldr	r3, [r7, #32]
 80093a8:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 80093aa:	68bb      	ldr	r3, [r7, #8]
 80093ac:	791a      	ldrb	r2, [r3, #4]
 80093ae:	6a3b      	ldr	r3, [r7, #32]
 80093b0:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 80093b2:	68bb      	ldr	r3, [r7, #8]
 80093b4:	795a      	ldrb	r2, [r3, #5]
 80093b6:	6a3b      	ldr	r3, [r7, #32]
 80093b8:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 80093ba:	68bb      	ldr	r3, [r7, #8]
 80093bc:	799a      	ldrb	r2, [r3, #6]
 80093be:	6a3b      	ldr	r3, [r7, #32]
 80093c0:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 80093c2:	68bb      	ldr	r3, [r7, #8]
 80093c4:	79da      	ldrb	r2, [r3, #7]
 80093c6:	6a3b      	ldr	r3, [r7, #32]
 80093c8:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 80093ca:	68bb      	ldr	r3, [r7, #8]
 80093cc:	7a1a      	ldrb	r2, [r3, #8]
 80093ce:	6a3b      	ldr	r3, [r7, #32]
 80093d0:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80093d2:	88fb      	ldrh	r3, [r7, #6]
 80093d4:	2b09      	cmp	r3, #9
 80093d6:	f240 809d 	bls.w	8009514 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 80093da:	2309      	movs	r3, #9
 80093dc:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 80093de:	2300      	movs	r3, #0
 80093e0:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80093e2:	e081      	b.n	80094e8 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80093e4:	f107 0316 	add.w	r3, r7, #22
 80093e8:	4619      	mov	r1, r3
 80093ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80093ec:	f000 f9e7 	bl	80097be <USBH_GetNextDesc>
 80093f0:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 80093f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093f4:	785b      	ldrb	r3, [r3, #1]
 80093f6:	2b04      	cmp	r3, #4
 80093f8:	d176      	bne.n	80094e8 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 80093fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093fc:	781b      	ldrb	r3, [r3, #0]
 80093fe:	2b09      	cmp	r3, #9
 8009400:	d002      	beq.n	8009408 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8009402:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009404:	2209      	movs	r2, #9
 8009406:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8009408:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800940c:	221a      	movs	r2, #26
 800940e:	fb02 f303 	mul.w	r3, r2, r3
 8009412:	3308      	adds	r3, #8
 8009414:	6a3a      	ldr	r2, [r7, #32]
 8009416:	4413      	add	r3, r2
 8009418:	3302      	adds	r3, #2
 800941a:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800941c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800941e:	69f8      	ldr	r0, [r7, #28]
 8009420:	f000 f87e 	bl	8009520 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8009424:	2300      	movs	r3, #0
 8009426:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800942a:	2300      	movs	r3, #0
 800942c:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800942e:	e043      	b.n	80094b8 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009430:	f107 0316 	add.w	r3, r7, #22
 8009434:	4619      	mov	r1, r3
 8009436:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009438:	f000 f9c1 	bl	80097be <USBH_GetNextDesc>
 800943c:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800943e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009440:	785b      	ldrb	r3, [r3, #1]
 8009442:	2b05      	cmp	r3, #5
 8009444:	d138      	bne.n	80094b8 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8009446:	69fb      	ldr	r3, [r7, #28]
 8009448:	795b      	ldrb	r3, [r3, #5]
 800944a:	2b01      	cmp	r3, #1
 800944c:	d113      	bne.n	8009476 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800944e:	69fb      	ldr	r3, [r7, #28]
 8009450:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8009452:	2b02      	cmp	r3, #2
 8009454:	d003      	beq.n	800945e <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8009456:	69fb      	ldr	r3, [r7, #28]
 8009458:	799b      	ldrb	r3, [r3, #6]
 800945a:	2b03      	cmp	r3, #3
 800945c:	d10b      	bne.n	8009476 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800945e:	69fb      	ldr	r3, [r7, #28]
 8009460:	79db      	ldrb	r3, [r3, #7]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d10b      	bne.n	800947e <USBH_ParseCfgDesc+0x14e>
 8009466:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009468:	781b      	ldrb	r3, [r3, #0]
 800946a:	2b09      	cmp	r3, #9
 800946c:	d007      	beq.n	800947e <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800946e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009470:	2209      	movs	r2, #9
 8009472:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009474:	e003      	b.n	800947e <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8009476:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009478:	2207      	movs	r2, #7
 800947a:	701a      	strb	r2, [r3, #0]
 800947c:	e000      	b.n	8009480 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800947e:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8009480:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009484:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009488:	3201      	adds	r2, #1
 800948a:	00d2      	lsls	r2, r2, #3
 800948c:	211a      	movs	r1, #26
 800948e:	fb01 f303 	mul.w	r3, r1, r3
 8009492:	4413      	add	r3, r2
 8009494:	3308      	adds	r3, #8
 8009496:	6a3a      	ldr	r2, [r7, #32]
 8009498:	4413      	add	r3, r2
 800949a:	3304      	adds	r3, #4
 800949c:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800949e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80094a0:	69b9      	ldr	r1, [r7, #24]
 80094a2:	68f8      	ldr	r0, [r7, #12]
 80094a4:	f000 f870 	bl	8009588 <USBH_ParseEPDesc>
 80094a8:	4603      	mov	r3, r0
 80094aa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 80094ae:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80094b2:	3301      	adds	r3, #1
 80094b4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80094b8:	69fb      	ldr	r3, [r7, #28]
 80094ba:	791b      	ldrb	r3, [r3, #4]
 80094bc:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80094c0:	429a      	cmp	r2, r3
 80094c2:	d204      	bcs.n	80094ce <USBH_ParseCfgDesc+0x19e>
 80094c4:	6a3b      	ldr	r3, [r7, #32]
 80094c6:	885a      	ldrh	r2, [r3, #2]
 80094c8:	8afb      	ldrh	r3, [r7, #22]
 80094ca:	429a      	cmp	r2, r3
 80094cc:	d8b0      	bhi.n	8009430 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 80094ce:	69fb      	ldr	r3, [r7, #28]
 80094d0:	791b      	ldrb	r3, [r3, #4]
 80094d2:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80094d6:	429a      	cmp	r2, r3
 80094d8:	d201      	bcs.n	80094de <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 80094da:	2303      	movs	r3, #3
 80094dc:	e01c      	b.n	8009518 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 80094de:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80094e2:	3301      	adds	r3, #1
 80094e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80094e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80094ec:	2b01      	cmp	r3, #1
 80094ee:	d805      	bhi.n	80094fc <USBH_ParseCfgDesc+0x1cc>
 80094f0:	6a3b      	ldr	r3, [r7, #32]
 80094f2:	885a      	ldrh	r2, [r3, #2]
 80094f4:	8afb      	ldrh	r3, [r7, #22]
 80094f6:	429a      	cmp	r2, r3
 80094f8:	f63f af74 	bhi.w	80093e4 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 80094fc:	6a3b      	ldr	r3, [r7, #32]
 80094fe:	791b      	ldrb	r3, [r3, #4]
 8009500:	2b02      	cmp	r3, #2
 8009502:	bf28      	it	cs
 8009504:	2302      	movcs	r3, #2
 8009506:	b2db      	uxtb	r3, r3
 8009508:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800950c:	429a      	cmp	r2, r3
 800950e:	d201      	bcs.n	8009514 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 8009510:	2303      	movs	r3, #3
 8009512:	e001      	b.n	8009518 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 8009514:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8009518:	4618      	mov	r0, r3
 800951a:	3730      	adds	r7, #48	@ 0x30
 800951c:	46bd      	mov	sp, r7
 800951e:	bd80      	pop	{r7, pc}

08009520 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8009520:	b480      	push	{r7}
 8009522:	b083      	sub	sp, #12
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
 8009528:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800952a:	683b      	ldr	r3, [r7, #0]
 800952c:	781a      	ldrb	r2, [r3, #0]
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8009532:	683b      	ldr	r3, [r7, #0]
 8009534:	785a      	ldrb	r2, [r3, #1]
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800953a:	683b      	ldr	r3, [r7, #0]
 800953c:	789a      	ldrb	r2, [r3, #2]
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8009542:	683b      	ldr	r3, [r7, #0]
 8009544:	78da      	ldrb	r2, [r3, #3]
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800954a:	683b      	ldr	r3, [r7, #0]
 800954c:	3304      	adds	r3, #4
 800954e:	781b      	ldrb	r3, [r3, #0]
 8009550:	2b02      	cmp	r3, #2
 8009552:	bf28      	it	cs
 8009554:	2302      	movcs	r3, #2
 8009556:	b2da      	uxtb	r2, r3
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800955c:	683b      	ldr	r3, [r7, #0]
 800955e:	795a      	ldrb	r2, [r3, #5]
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8009564:	683b      	ldr	r3, [r7, #0]
 8009566:	799a      	ldrb	r2, [r3, #6]
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800956c:	683b      	ldr	r3, [r7, #0]
 800956e:	79da      	ldrb	r2, [r3, #7]
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	7a1a      	ldrb	r2, [r3, #8]
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	721a      	strb	r2, [r3, #8]
}
 800957c:	bf00      	nop
 800957e:	370c      	adds	r7, #12
 8009580:	46bd      	mov	sp, r7
 8009582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009586:	4770      	bx	lr

08009588 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8009588:	b480      	push	{r7}
 800958a:	b087      	sub	sp, #28
 800958c:	af00      	add	r7, sp, #0
 800958e:	60f8      	str	r0, [r7, #12]
 8009590:	60b9      	str	r1, [r7, #8]
 8009592:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8009594:	2300      	movs	r3, #0
 8009596:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	781a      	ldrb	r2, [r3, #0]
 800959c:	68bb      	ldr	r3, [r7, #8]
 800959e:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	785a      	ldrb	r2, [r3, #1]
 80095a4:	68bb      	ldr	r3, [r7, #8]
 80095a6:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	789a      	ldrb	r2, [r3, #2]
 80095ac:	68bb      	ldr	r3, [r7, #8]
 80095ae:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	78da      	ldrb	r2, [r3, #3]
 80095b4:	68bb      	ldr	r3, [r7, #8]
 80095b6:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	3304      	adds	r3, #4
 80095bc:	781b      	ldrb	r3, [r3, #0]
 80095be:	461a      	mov	r2, r3
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	3305      	adds	r3, #5
 80095c4:	781b      	ldrb	r3, [r3, #0]
 80095c6:	021b      	lsls	r3, r3, #8
 80095c8:	b29b      	uxth	r3, r3
 80095ca:	4313      	orrs	r3, r2
 80095cc:	b29a      	uxth	r2, r3
 80095ce:	68bb      	ldr	r3, [r7, #8]
 80095d0:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	799a      	ldrb	r2, [r3, #6]
 80095d6:	68bb      	ldr	r3, [r7, #8]
 80095d8:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 80095da:	68bb      	ldr	r3, [r7, #8]
 80095dc:	889b      	ldrh	r3, [r3, #4]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d009      	beq.n	80095f6 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 80095e2:	68bb      	ldr	r3, [r7, #8]
 80095e4:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 80095e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80095ea:	d804      	bhi.n	80095f6 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 80095ec:	68bb      	ldr	r3, [r7, #8]
 80095ee:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 80095f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80095f4:	d901      	bls.n	80095fa <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 80095f6:	2303      	movs	r3, #3
 80095f8:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009600:	2b00      	cmp	r3, #0
 8009602:	d136      	bne.n	8009672 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8009604:	68bb      	ldr	r3, [r7, #8]
 8009606:	78db      	ldrb	r3, [r3, #3]
 8009608:	f003 0303 	and.w	r3, r3, #3
 800960c:	2b02      	cmp	r3, #2
 800960e:	d108      	bne.n	8009622 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8009610:	68bb      	ldr	r3, [r7, #8]
 8009612:	889b      	ldrh	r3, [r3, #4]
 8009614:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009618:	f240 8097 	bls.w	800974a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800961c:	2303      	movs	r3, #3
 800961e:	75fb      	strb	r3, [r7, #23]
 8009620:	e093      	b.n	800974a <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8009622:	68bb      	ldr	r3, [r7, #8]
 8009624:	78db      	ldrb	r3, [r3, #3]
 8009626:	f003 0303 	and.w	r3, r3, #3
 800962a:	2b00      	cmp	r3, #0
 800962c:	d107      	bne.n	800963e <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800962e:	68bb      	ldr	r3, [r7, #8]
 8009630:	889b      	ldrh	r3, [r3, #4]
 8009632:	2b40      	cmp	r3, #64	@ 0x40
 8009634:	f240 8089 	bls.w	800974a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009638:	2303      	movs	r3, #3
 800963a:	75fb      	strb	r3, [r7, #23]
 800963c:	e085      	b.n	800974a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800963e:	68bb      	ldr	r3, [r7, #8]
 8009640:	78db      	ldrb	r3, [r3, #3]
 8009642:	f003 0303 	and.w	r3, r3, #3
 8009646:	2b01      	cmp	r3, #1
 8009648:	d005      	beq.n	8009656 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800964a:	68bb      	ldr	r3, [r7, #8]
 800964c:	78db      	ldrb	r3, [r3, #3]
 800964e:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8009652:	2b03      	cmp	r3, #3
 8009654:	d10a      	bne.n	800966c <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009656:	68bb      	ldr	r3, [r7, #8]
 8009658:	799b      	ldrb	r3, [r3, #6]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d003      	beq.n	8009666 <USBH_ParseEPDesc+0xde>
 800965e:	68bb      	ldr	r3, [r7, #8]
 8009660:	799b      	ldrb	r3, [r3, #6]
 8009662:	2b10      	cmp	r3, #16
 8009664:	d970      	bls.n	8009748 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 8009666:	2303      	movs	r3, #3
 8009668:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800966a:	e06d      	b.n	8009748 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800966c:	2303      	movs	r3, #3
 800966e:	75fb      	strb	r3, [r7, #23]
 8009670:	e06b      	b.n	800974a <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009678:	2b01      	cmp	r3, #1
 800967a:	d13c      	bne.n	80096f6 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800967c:	68bb      	ldr	r3, [r7, #8]
 800967e:	78db      	ldrb	r3, [r3, #3]
 8009680:	f003 0303 	and.w	r3, r3, #3
 8009684:	2b02      	cmp	r3, #2
 8009686:	d005      	beq.n	8009694 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8009688:	68bb      	ldr	r3, [r7, #8]
 800968a:	78db      	ldrb	r3, [r3, #3]
 800968c:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8009690:	2b00      	cmp	r3, #0
 8009692:	d106      	bne.n	80096a2 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009694:	68bb      	ldr	r3, [r7, #8]
 8009696:	889b      	ldrh	r3, [r3, #4]
 8009698:	2b40      	cmp	r3, #64	@ 0x40
 800969a:	d956      	bls.n	800974a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800969c:	2303      	movs	r3, #3
 800969e:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 80096a0:	e053      	b.n	800974a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 80096a2:	68bb      	ldr	r3, [r7, #8]
 80096a4:	78db      	ldrb	r3, [r3, #3]
 80096a6:	f003 0303 	and.w	r3, r3, #3
 80096aa:	2b01      	cmp	r3, #1
 80096ac:	d10e      	bne.n	80096cc <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 80096ae:	68bb      	ldr	r3, [r7, #8]
 80096b0:	799b      	ldrb	r3, [r3, #6]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d007      	beq.n	80096c6 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 80096b6:	68bb      	ldr	r3, [r7, #8]
 80096b8:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 80096ba:	2b10      	cmp	r3, #16
 80096bc:	d803      	bhi.n	80096c6 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 80096be:	68bb      	ldr	r3, [r7, #8]
 80096c0:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 80096c2:	2b40      	cmp	r3, #64	@ 0x40
 80096c4:	d941      	bls.n	800974a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80096c6:	2303      	movs	r3, #3
 80096c8:	75fb      	strb	r3, [r7, #23]
 80096ca:	e03e      	b.n	800974a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80096cc:	68bb      	ldr	r3, [r7, #8]
 80096ce:	78db      	ldrb	r3, [r3, #3]
 80096d0:	f003 0303 	and.w	r3, r3, #3
 80096d4:	2b03      	cmp	r3, #3
 80096d6:	d10b      	bne.n	80096f0 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 80096d8:	68bb      	ldr	r3, [r7, #8]
 80096da:	799b      	ldrb	r3, [r3, #6]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d004      	beq.n	80096ea <USBH_ParseEPDesc+0x162>
 80096e0:	68bb      	ldr	r3, [r7, #8]
 80096e2:	889b      	ldrh	r3, [r3, #4]
 80096e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80096e8:	d32f      	bcc.n	800974a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80096ea:	2303      	movs	r3, #3
 80096ec:	75fb      	strb	r3, [r7, #23]
 80096ee:	e02c      	b.n	800974a <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80096f0:	2303      	movs	r3, #3
 80096f2:	75fb      	strb	r3, [r7, #23]
 80096f4:	e029      	b.n	800974a <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80096fc:	2b02      	cmp	r3, #2
 80096fe:	d120      	bne.n	8009742 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8009700:	68bb      	ldr	r3, [r7, #8]
 8009702:	78db      	ldrb	r3, [r3, #3]
 8009704:	f003 0303 	and.w	r3, r3, #3
 8009708:	2b00      	cmp	r3, #0
 800970a:	d106      	bne.n	800971a <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800970c:	68bb      	ldr	r3, [r7, #8]
 800970e:	889b      	ldrh	r3, [r3, #4]
 8009710:	2b08      	cmp	r3, #8
 8009712:	d01a      	beq.n	800974a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009714:	2303      	movs	r3, #3
 8009716:	75fb      	strb	r3, [r7, #23]
 8009718:	e017      	b.n	800974a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800971a:	68bb      	ldr	r3, [r7, #8]
 800971c:	78db      	ldrb	r3, [r3, #3]
 800971e:	f003 0303 	and.w	r3, r3, #3
 8009722:	2b03      	cmp	r3, #3
 8009724:	d10a      	bne.n	800973c <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8009726:	68bb      	ldr	r3, [r7, #8]
 8009728:	799b      	ldrb	r3, [r3, #6]
 800972a:	2b00      	cmp	r3, #0
 800972c:	d003      	beq.n	8009736 <USBH_ParseEPDesc+0x1ae>
 800972e:	68bb      	ldr	r3, [r7, #8]
 8009730:	889b      	ldrh	r3, [r3, #4]
 8009732:	2b08      	cmp	r3, #8
 8009734:	d909      	bls.n	800974a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009736:	2303      	movs	r3, #3
 8009738:	75fb      	strb	r3, [r7, #23]
 800973a:	e006      	b.n	800974a <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800973c:	2303      	movs	r3, #3
 800973e:	75fb      	strb	r3, [r7, #23]
 8009740:	e003      	b.n	800974a <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8009742:	2303      	movs	r3, #3
 8009744:	75fb      	strb	r3, [r7, #23]
 8009746:	e000      	b.n	800974a <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009748:	bf00      	nop
  }

  return status;
 800974a:	7dfb      	ldrb	r3, [r7, #23]
}
 800974c:	4618      	mov	r0, r3
 800974e:	371c      	adds	r7, #28
 8009750:	46bd      	mov	sp, r7
 8009752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009756:	4770      	bx	lr

08009758 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8009758:	b480      	push	{r7}
 800975a:	b087      	sub	sp, #28
 800975c:	af00      	add	r7, sp, #0
 800975e:	60f8      	str	r0, [r7, #12]
 8009760:	60b9      	str	r1, [r7, #8]
 8009762:	4613      	mov	r3, r2
 8009764:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	3301      	adds	r3, #1
 800976a:	781b      	ldrb	r3, [r3, #0]
 800976c:	2b03      	cmp	r3, #3
 800976e:	d120      	bne.n	80097b2 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	781b      	ldrb	r3, [r3, #0]
 8009774:	1e9a      	subs	r2, r3, #2
 8009776:	88fb      	ldrh	r3, [r7, #6]
 8009778:	4293      	cmp	r3, r2
 800977a:	bf28      	it	cs
 800977c:	4613      	movcs	r3, r2
 800977e:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	3302      	adds	r3, #2
 8009784:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8009786:	2300      	movs	r3, #0
 8009788:	82fb      	strh	r3, [r7, #22]
 800978a:	e00b      	b.n	80097a4 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800978c:	8afb      	ldrh	r3, [r7, #22]
 800978e:	68fa      	ldr	r2, [r7, #12]
 8009790:	4413      	add	r3, r2
 8009792:	781a      	ldrb	r2, [r3, #0]
 8009794:	68bb      	ldr	r3, [r7, #8]
 8009796:	701a      	strb	r2, [r3, #0]
      pdest++;
 8009798:	68bb      	ldr	r3, [r7, #8]
 800979a:	3301      	adds	r3, #1
 800979c:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800979e:	8afb      	ldrh	r3, [r7, #22]
 80097a0:	3302      	adds	r3, #2
 80097a2:	82fb      	strh	r3, [r7, #22]
 80097a4:	8afa      	ldrh	r2, [r7, #22]
 80097a6:	8abb      	ldrh	r3, [r7, #20]
 80097a8:	429a      	cmp	r2, r3
 80097aa:	d3ef      	bcc.n	800978c <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80097ac:	68bb      	ldr	r3, [r7, #8]
 80097ae:	2200      	movs	r2, #0
 80097b0:	701a      	strb	r2, [r3, #0]
  }
}
 80097b2:	bf00      	nop
 80097b4:	371c      	adds	r7, #28
 80097b6:	46bd      	mov	sp, r7
 80097b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097bc:	4770      	bx	lr

080097be <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80097be:	b480      	push	{r7}
 80097c0:	b085      	sub	sp, #20
 80097c2:	af00      	add	r7, sp, #0
 80097c4:	6078      	str	r0, [r7, #4]
 80097c6:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	881b      	ldrh	r3, [r3, #0]
 80097cc:	687a      	ldr	r2, [r7, #4]
 80097ce:	7812      	ldrb	r2, [r2, #0]
 80097d0:	4413      	add	r3, r2
 80097d2:	b29a      	uxth	r2, r3
 80097d4:	683b      	ldr	r3, [r7, #0]
 80097d6:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	781b      	ldrb	r3, [r3, #0]
 80097dc:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	4413      	add	r3, r2
 80097e2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80097e4:	68fb      	ldr	r3, [r7, #12]
}
 80097e6:	4618      	mov	r0, r3
 80097e8:	3714      	adds	r7, #20
 80097ea:	46bd      	mov	sp, r7
 80097ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f0:	4770      	bx	lr

080097f2 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80097f2:	b580      	push	{r7, lr}
 80097f4:	b086      	sub	sp, #24
 80097f6:	af00      	add	r7, sp, #0
 80097f8:	60f8      	str	r0, [r7, #12]
 80097fa:	60b9      	str	r1, [r7, #8]
 80097fc:	4613      	mov	r3, r2
 80097fe:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8009800:	2301      	movs	r3, #1
 8009802:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	789b      	ldrb	r3, [r3, #2]
 8009808:	2b01      	cmp	r3, #1
 800980a:	d002      	beq.n	8009812 <USBH_CtlReq+0x20>
 800980c:	2b02      	cmp	r3, #2
 800980e:	d00f      	beq.n	8009830 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8009810:	e027      	b.n	8009862 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	68ba      	ldr	r2, [r7, #8]
 8009816:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	88fa      	ldrh	r2, [r7, #6]
 800981c:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	2201      	movs	r2, #1
 8009822:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	2202      	movs	r2, #2
 8009828:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800982a:	2301      	movs	r3, #1
 800982c:	75fb      	strb	r3, [r7, #23]
      break;
 800982e:	e018      	b.n	8009862 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8009830:	68f8      	ldr	r0, [r7, #12]
 8009832:	f000 f81b 	bl	800986c <USBH_HandleControl>
 8009836:	4603      	mov	r3, r0
 8009838:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800983a:	7dfb      	ldrb	r3, [r7, #23]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d002      	beq.n	8009846 <USBH_CtlReq+0x54>
 8009840:	7dfb      	ldrb	r3, [r7, #23]
 8009842:	2b03      	cmp	r3, #3
 8009844:	d106      	bne.n	8009854 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	2201      	movs	r2, #1
 800984a:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	2200      	movs	r2, #0
 8009850:	761a      	strb	r2, [r3, #24]
      break;
 8009852:	e005      	b.n	8009860 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8009854:	7dfb      	ldrb	r3, [r7, #23]
 8009856:	2b02      	cmp	r3, #2
 8009858:	d102      	bne.n	8009860 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	2201      	movs	r2, #1
 800985e:	709a      	strb	r2, [r3, #2]
      break;
 8009860:	bf00      	nop
  }
  return status;
 8009862:	7dfb      	ldrb	r3, [r7, #23]
}
 8009864:	4618      	mov	r0, r3
 8009866:	3718      	adds	r7, #24
 8009868:	46bd      	mov	sp, r7
 800986a:	bd80      	pop	{r7, pc}

0800986c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800986c:	b580      	push	{r7, lr}
 800986e:	b086      	sub	sp, #24
 8009870:	af02      	add	r7, sp, #8
 8009872:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8009874:	2301      	movs	r3, #1
 8009876:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009878:	2300      	movs	r3, #0
 800987a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	7e1b      	ldrb	r3, [r3, #24]
 8009880:	3b01      	subs	r3, #1
 8009882:	2b0a      	cmp	r3, #10
 8009884:	f200 8156 	bhi.w	8009b34 <USBH_HandleControl+0x2c8>
 8009888:	a201      	add	r2, pc, #4	@ (adr r2, 8009890 <USBH_HandleControl+0x24>)
 800988a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800988e:	bf00      	nop
 8009890:	080098bd 	.word	0x080098bd
 8009894:	080098d7 	.word	0x080098d7
 8009898:	08009941 	.word	0x08009941
 800989c:	08009967 	.word	0x08009967
 80098a0:	0800999f 	.word	0x0800999f
 80098a4:	080099c9 	.word	0x080099c9
 80098a8:	08009a1b 	.word	0x08009a1b
 80098ac:	08009a3d 	.word	0x08009a3d
 80098b0:	08009a79 	.word	0x08009a79
 80098b4:	08009a9f 	.word	0x08009a9f
 80098b8:	08009add 	.word	0x08009add
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	f103 0110 	add.w	r1, r3, #16
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	795b      	ldrb	r3, [r3, #5]
 80098c6:	461a      	mov	r2, r3
 80098c8:	6878      	ldr	r0, [r7, #4]
 80098ca:	f000 f943 	bl	8009b54 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	2202      	movs	r2, #2
 80098d2:	761a      	strb	r2, [r3, #24]
      break;
 80098d4:	e139      	b.n	8009b4a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	795b      	ldrb	r3, [r3, #5]
 80098da:	4619      	mov	r1, r3
 80098dc:	6878      	ldr	r0, [r7, #4]
 80098de:	f000 fcc5 	bl	800a26c <USBH_LL_GetURBState>
 80098e2:	4603      	mov	r3, r0
 80098e4:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80098e6:	7bbb      	ldrb	r3, [r7, #14]
 80098e8:	2b01      	cmp	r3, #1
 80098ea:	d11e      	bne.n	800992a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	7c1b      	ldrb	r3, [r3, #16]
 80098f0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80098f4:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	8adb      	ldrh	r3, [r3, #22]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d00a      	beq.n	8009914 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80098fe:	7b7b      	ldrb	r3, [r7, #13]
 8009900:	2b80      	cmp	r3, #128	@ 0x80
 8009902:	d103      	bne.n	800990c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	2203      	movs	r2, #3
 8009908:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800990a:	e115      	b.n	8009b38 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	2205      	movs	r2, #5
 8009910:	761a      	strb	r2, [r3, #24]
      break;
 8009912:	e111      	b.n	8009b38 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8009914:	7b7b      	ldrb	r3, [r7, #13]
 8009916:	2b80      	cmp	r3, #128	@ 0x80
 8009918:	d103      	bne.n	8009922 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	2209      	movs	r2, #9
 800991e:	761a      	strb	r2, [r3, #24]
      break;
 8009920:	e10a      	b.n	8009b38 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	2207      	movs	r2, #7
 8009926:	761a      	strb	r2, [r3, #24]
      break;
 8009928:	e106      	b.n	8009b38 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800992a:	7bbb      	ldrb	r3, [r7, #14]
 800992c:	2b04      	cmp	r3, #4
 800992e:	d003      	beq.n	8009938 <USBH_HandleControl+0xcc>
 8009930:	7bbb      	ldrb	r3, [r7, #14]
 8009932:	2b02      	cmp	r3, #2
 8009934:	f040 8100 	bne.w	8009b38 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	220b      	movs	r2, #11
 800993c:	761a      	strb	r2, [r3, #24]
      break;
 800993e:	e0fb      	b.n	8009b38 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009946:	b29a      	uxth	r2, r3
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	6899      	ldr	r1, [r3, #8]
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	899a      	ldrh	r2, [r3, #12]
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	791b      	ldrb	r3, [r3, #4]
 8009958:	6878      	ldr	r0, [r7, #4]
 800995a:	f000 f93a 	bl	8009bd2 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	2204      	movs	r2, #4
 8009962:	761a      	strb	r2, [r3, #24]
      break;
 8009964:	e0f1      	b.n	8009b4a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	791b      	ldrb	r3, [r3, #4]
 800996a:	4619      	mov	r1, r3
 800996c:	6878      	ldr	r0, [r7, #4]
 800996e:	f000 fc7d 	bl	800a26c <USBH_LL_GetURBState>
 8009972:	4603      	mov	r3, r0
 8009974:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8009976:	7bbb      	ldrb	r3, [r7, #14]
 8009978:	2b01      	cmp	r3, #1
 800997a:	d102      	bne.n	8009982 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	2209      	movs	r2, #9
 8009980:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8009982:	7bbb      	ldrb	r3, [r7, #14]
 8009984:	2b05      	cmp	r3, #5
 8009986:	d102      	bne.n	800998e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8009988:	2303      	movs	r3, #3
 800998a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800998c:	e0d6      	b.n	8009b3c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800998e:	7bbb      	ldrb	r3, [r7, #14]
 8009990:	2b04      	cmp	r3, #4
 8009992:	f040 80d3 	bne.w	8009b3c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	220b      	movs	r2, #11
 800999a:	761a      	strb	r2, [r3, #24]
      break;
 800999c:	e0ce      	b.n	8009b3c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	6899      	ldr	r1, [r3, #8]
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	899a      	ldrh	r2, [r3, #12]
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	795b      	ldrb	r3, [r3, #5]
 80099aa:	2001      	movs	r0, #1
 80099ac:	9000      	str	r0, [sp, #0]
 80099ae:	6878      	ldr	r0, [r7, #4]
 80099b0:	f000 f8ea 	bl	8009b88 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80099ba:	b29a      	uxth	r2, r3
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	2206      	movs	r2, #6
 80099c4:	761a      	strb	r2, [r3, #24]
      break;
 80099c6:	e0c0      	b.n	8009b4a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	795b      	ldrb	r3, [r3, #5]
 80099cc:	4619      	mov	r1, r3
 80099ce:	6878      	ldr	r0, [r7, #4]
 80099d0:	f000 fc4c 	bl	800a26c <USBH_LL_GetURBState>
 80099d4:	4603      	mov	r3, r0
 80099d6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80099d8:	7bbb      	ldrb	r3, [r7, #14]
 80099da:	2b01      	cmp	r3, #1
 80099dc:	d103      	bne.n	80099e6 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	2207      	movs	r2, #7
 80099e2:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80099e4:	e0ac      	b.n	8009b40 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 80099e6:	7bbb      	ldrb	r3, [r7, #14]
 80099e8:	2b05      	cmp	r3, #5
 80099ea:	d105      	bne.n	80099f8 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	220c      	movs	r2, #12
 80099f0:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80099f2:	2303      	movs	r3, #3
 80099f4:	73fb      	strb	r3, [r7, #15]
      break;
 80099f6:	e0a3      	b.n	8009b40 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 80099f8:	7bbb      	ldrb	r3, [r7, #14]
 80099fa:	2b02      	cmp	r3, #2
 80099fc:	d103      	bne.n	8009a06 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	2205      	movs	r2, #5
 8009a02:	761a      	strb	r2, [r3, #24]
      break;
 8009a04:	e09c      	b.n	8009b40 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8009a06:	7bbb      	ldrb	r3, [r7, #14]
 8009a08:	2b04      	cmp	r3, #4
 8009a0a:	f040 8099 	bne.w	8009b40 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	220b      	movs	r2, #11
 8009a12:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8009a14:	2302      	movs	r3, #2
 8009a16:	73fb      	strb	r3, [r7, #15]
      break;
 8009a18:	e092      	b.n	8009b40 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	791b      	ldrb	r3, [r3, #4]
 8009a1e:	2200      	movs	r2, #0
 8009a20:	2100      	movs	r1, #0
 8009a22:	6878      	ldr	r0, [r7, #4]
 8009a24:	f000 f8d5 	bl	8009bd2 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009a2e:	b29a      	uxth	r2, r3
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	2208      	movs	r2, #8
 8009a38:	761a      	strb	r2, [r3, #24]

      break;
 8009a3a:	e086      	b.n	8009b4a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	791b      	ldrb	r3, [r3, #4]
 8009a40:	4619      	mov	r1, r3
 8009a42:	6878      	ldr	r0, [r7, #4]
 8009a44:	f000 fc12 	bl	800a26c <USBH_LL_GetURBState>
 8009a48:	4603      	mov	r3, r0
 8009a4a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009a4c:	7bbb      	ldrb	r3, [r7, #14]
 8009a4e:	2b01      	cmp	r3, #1
 8009a50:	d105      	bne.n	8009a5e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	220d      	movs	r2, #13
 8009a56:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8009a58:	2300      	movs	r3, #0
 8009a5a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009a5c:	e072      	b.n	8009b44 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8009a5e:	7bbb      	ldrb	r3, [r7, #14]
 8009a60:	2b04      	cmp	r3, #4
 8009a62:	d103      	bne.n	8009a6c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	220b      	movs	r2, #11
 8009a68:	761a      	strb	r2, [r3, #24]
      break;
 8009a6a:	e06b      	b.n	8009b44 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8009a6c:	7bbb      	ldrb	r3, [r7, #14]
 8009a6e:	2b05      	cmp	r3, #5
 8009a70:	d168      	bne.n	8009b44 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8009a72:	2303      	movs	r3, #3
 8009a74:	73fb      	strb	r3, [r7, #15]
      break;
 8009a76:	e065      	b.n	8009b44 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	795b      	ldrb	r3, [r3, #5]
 8009a7c:	2201      	movs	r2, #1
 8009a7e:	9200      	str	r2, [sp, #0]
 8009a80:	2200      	movs	r2, #0
 8009a82:	2100      	movs	r1, #0
 8009a84:	6878      	ldr	r0, [r7, #4]
 8009a86:	f000 f87f 	bl	8009b88 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009a90:	b29a      	uxth	r2, r3
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	220a      	movs	r2, #10
 8009a9a:	761a      	strb	r2, [r3, #24]
      break;
 8009a9c:	e055      	b.n	8009b4a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	795b      	ldrb	r3, [r3, #5]
 8009aa2:	4619      	mov	r1, r3
 8009aa4:	6878      	ldr	r0, [r7, #4]
 8009aa6:	f000 fbe1 	bl	800a26c <USBH_LL_GetURBState>
 8009aaa:	4603      	mov	r3, r0
 8009aac:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8009aae:	7bbb      	ldrb	r3, [r7, #14]
 8009ab0:	2b01      	cmp	r3, #1
 8009ab2:	d105      	bne.n	8009ac0 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	220d      	movs	r2, #13
 8009abc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009abe:	e043      	b.n	8009b48 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009ac0:	7bbb      	ldrb	r3, [r7, #14]
 8009ac2:	2b02      	cmp	r3, #2
 8009ac4:	d103      	bne.n	8009ace <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	2209      	movs	r2, #9
 8009aca:	761a      	strb	r2, [r3, #24]
      break;
 8009acc:	e03c      	b.n	8009b48 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8009ace:	7bbb      	ldrb	r3, [r7, #14]
 8009ad0:	2b04      	cmp	r3, #4
 8009ad2:	d139      	bne.n	8009b48 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	220b      	movs	r2, #11
 8009ad8:	761a      	strb	r2, [r3, #24]
      break;
 8009ada:	e035      	b.n	8009b48 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	7e5b      	ldrb	r3, [r3, #25]
 8009ae0:	3301      	adds	r3, #1
 8009ae2:	b2da      	uxtb	r2, r3
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	765a      	strb	r2, [r3, #25]
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	7e5b      	ldrb	r3, [r3, #25]
 8009aec:	2b02      	cmp	r3, #2
 8009aee:	d806      	bhi.n	8009afe <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	2201      	movs	r2, #1
 8009af4:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	2201      	movs	r2, #1
 8009afa:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8009afc:	e025      	b.n	8009b4a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009b04:	2106      	movs	r1, #6
 8009b06:	6878      	ldr	r0, [r7, #4]
 8009b08:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	2200      	movs	r2, #0
 8009b0e:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	795b      	ldrb	r3, [r3, #5]
 8009b14:	4619      	mov	r1, r3
 8009b16:	6878      	ldr	r0, [r7, #4]
 8009b18:	f000 f90c 	bl	8009d34 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	791b      	ldrb	r3, [r3, #4]
 8009b20:	4619      	mov	r1, r3
 8009b22:	6878      	ldr	r0, [r7, #4]
 8009b24:	f000 f906 	bl	8009d34 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8009b2e:	2302      	movs	r3, #2
 8009b30:	73fb      	strb	r3, [r7, #15]
      break;
 8009b32:	e00a      	b.n	8009b4a <USBH_HandleControl+0x2de>

    default:
      break;
 8009b34:	bf00      	nop
 8009b36:	e008      	b.n	8009b4a <USBH_HandleControl+0x2de>
      break;
 8009b38:	bf00      	nop
 8009b3a:	e006      	b.n	8009b4a <USBH_HandleControl+0x2de>
      break;
 8009b3c:	bf00      	nop
 8009b3e:	e004      	b.n	8009b4a <USBH_HandleControl+0x2de>
      break;
 8009b40:	bf00      	nop
 8009b42:	e002      	b.n	8009b4a <USBH_HandleControl+0x2de>
      break;
 8009b44:	bf00      	nop
 8009b46:	e000      	b.n	8009b4a <USBH_HandleControl+0x2de>
      break;
 8009b48:	bf00      	nop
  }

  return status;
 8009b4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	3710      	adds	r7, #16
 8009b50:	46bd      	mov	sp, r7
 8009b52:	bd80      	pop	{r7, pc}

08009b54 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8009b54:	b580      	push	{r7, lr}
 8009b56:	b088      	sub	sp, #32
 8009b58:	af04      	add	r7, sp, #16
 8009b5a:	60f8      	str	r0, [r7, #12]
 8009b5c:	60b9      	str	r1, [r7, #8]
 8009b5e:	4613      	mov	r3, r2
 8009b60:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009b62:	79f9      	ldrb	r1, [r7, #7]
 8009b64:	2300      	movs	r3, #0
 8009b66:	9303      	str	r3, [sp, #12]
 8009b68:	2308      	movs	r3, #8
 8009b6a:	9302      	str	r3, [sp, #8]
 8009b6c:	68bb      	ldr	r3, [r7, #8]
 8009b6e:	9301      	str	r3, [sp, #4]
 8009b70:	2300      	movs	r3, #0
 8009b72:	9300      	str	r3, [sp, #0]
 8009b74:	2300      	movs	r3, #0
 8009b76:	2200      	movs	r2, #0
 8009b78:	68f8      	ldr	r0, [r7, #12]
 8009b7a:	f000 fb46 	bl	800a20a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8009b7e:	2300      	movs	r3, #0
}
 8009b80:	4618      	mov	r0, r3
 8009b82:	3710      	adds	r7, #16
 8009b84:	46bd      	mov	sp, r7
 8009b86:	bd80      	pop	{r7, pc}

08009b88 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	b088      	sub	sp, #32
 8009b8c:	af04      	add	r7, sp, #16
 8009b8e:	60f8      	str	r0, [r7, #12]
 8009b90:	60b9      	str	r1, [r7, #8]
 8009b92:	4611      	mov	r1, r2
 8009b94:	461a      	mov	r2, r3
 8009b96:	460b      	mov	r3, r1
 8009b98:	80fb      	strh	r3, [r7, #6]
 8009b9a:	4613      	mov	r3, r2
 8009b9c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d001      	beq.n	8009bac <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8009ba8:	2300      	movs	r3, #0
 8009baa:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009bac:	7979      	ldrb	r1, [r7, #5]
 8009bae:	7e3b      	ldrb	r3, [r7, #24]
 8009bb0:	9303      	str	r3, [sp, #12]
 8009bb2:	88fb      	ldrh	r3, [r7, #6]
 8009bb4:	9302      	str	r3, [sp, #8]
 8009bb6:	68bb      	ldr	r3, [r7, #8]
 8009bb8:	9301      	str	r3, [sp, #4]
 8009bba:	2301      	movs	r3, #1
 8009bbc:	9300      	str	r3, [sp, #0]
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	68f8      	ldr	r0, [r7, #12]
 8009bc4:	f000 fb21 	bl	800a20a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8009bc8:	2300      	movs	r3, #0
}
 8009bca:	4618      	mov	r0, r3
 8009bcc:	3710      	adds	r7, #16
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	bd80      	pop	{r7, pc}

08009bd2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8009bd2:	b580      	push	{r7, lr}
 8009bd4:	b088      	sub	sp, #32
 8009bd6:	af04      	add	r7, sp, #16
 8009bd8:	60f8      	str	r0, [r7, #12]
 8009bda:	60b9      	str	r1, [r7, #8]
 8009bdc:	4611      	mov	r1, r2
 8009bde:	461a      	mov	r2, r3
 8009be0:	460b      	mov	r3, r1
 8009be2:	80fb      	strh	r3, [r7, #6]
 8009be4:	4613      	mov	r3, r2
 8009be6:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009be8:	7979      	ldrb	r1, [r7, #5]
 8009bea:	2300      	movs	r3, #0
 8009bec:	9303      	str	r3, [sp, #12]
 8009bee:	88fb      	ldrh	r3, [r7, #6]
 8009bf0:	9302      	str	r3, [sp, #8]
 8009bf2:	68bb      	ldr	r3, [r7, #8]
 8009bf4:	9301      	str	r3, [sp, #4]
 8009bf6:	2301      	movs	r3, #1
 8009bf8:	9300      	str	r3, [sp, #0]
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	2201      	movs	r2, #1
 8009bfe:	68f8      	ldr	r0, [r7, #12]
 8009c00:	f000 fb03 	bl	800a20a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009c04:	2300      	movs	r3, #0

}
 8009c06:	4618      	mov	r0, r3
 8009c08:	3710      	adds	r7, #16
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	bd80      	pop	{r7, pc}

08009c0e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8009c0e:	b580      	push	{r7, lr}
 8009c10:	b088      	sub	sp, #32
 8009c12:	af04      	add	r7, sp, #16
 8009c14:	60f8      	str	r0, [r7, #12]
 8009c16:	60b9      	str	r1, [r7, #8]
 8009c18:	4611      	mov	r1, r2
 8009c1a:	461a      	mov	r2, r3
 8009c1c:	460b      	mov	r3, r1
 8009c1e:	80fb      	strh	r3, [r7, #6]
 8009c20:	4613      	mov	r3, r2
 8009c22:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d001      	beq.n	8009c32 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8009c2e:	2300      	movs	r3, #0
 8009c30:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009c32:	7979      	ldrb	r1, [r7, #5]
 8009c34:	7e3b      	ldrb	r3, [r7, #24]
 8009c36:	9303      	str	r3, [sp, #12]
 8009c38:	88fb      	ldrh	r3, [r7, #6]
 8009c3a:	9302      	str	r3, [sp, #8]
 8009c3c:	68bb      	ldr	r3, [r7, #8]
 8009c3e:	9301      	str	r3, [sp, #4]
 8009c40:	2301      	movs	r3, #1
 8009c42:	9300      	str	r3, [sp, #0]
 8009c44:	2302      	movs	r3, #2
 8009c46:	2200      	movs	r2, #0
 8009c48:	68f8      	ldr	r0, [r7, #12]
 8009c4a:	f000 fade 	bl	800a20a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8009c4e:	2300      	movs	r3, #0
}
 8009c50:	4618      	mov	r0, r3
 8009c52:	3710      	adds	r7, #16
 8009c54:	46bd      	mov	sp, r7
 8009c56:	bd80      	pop	{r7, pc}

08009c58 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b088      	sub	sp, #32
 8009c5c:	af04      	add	r7, sp, #16
 8009c5e:	60f8      	str	r0, [r7, #12]
 8009c60:	60b9      	str	r1, [r7, #8]
 8009c62:	4611      	mov	r1, r2
 8009c64:	461a      	mov	r2, r3
 8009c66:	460b      	mov	r3, r1
 8009c68:	80fb      	strh	r3, [r7, #6]
 8009c6a:	4613      	mov	r3, r2
 8009c6c:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009c6e:	7979      	ldrb	r1, [r7, #5]
 8009c70:	2300      	movs	r3, #0
 8009c72:	9303      	str	r3, [sp, #12]
 8009c74:	88fb      	ldrh	r3, [r7, #6]
 8009c76:	9302      	str	r3, [sp, #8]
 8009c78:	68bb      	ldr	r3, [r7, #8]
 8009c7a:	9301      	str	r3, [sp, #4]
 8009c7c:	2301      	movs	r3, #1
 8009c7e:	9300      	str	r3, [sp, #0]
 8009c80:	2302      	movs	r3, #2
 8009c82:	2201      	movs	r2, #1
 8009c84:	68f8      	ldr	r0, [r7, #12]
 8009c86:	f000 fac0 	bl	800a20a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009c8a:	2300      	movs	r3, #0
}
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	3710      	adds	r7, #16
 8009c90:	46bd      	mov	sp, r7
 8009c92:	bd80      	pop	{r7, pc}

08009c94 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b086      	sub	sp, #24
 8009c98:	af04      	add	r7, sp, #16
 8009c9a:	6078      	str	r0, [r7, #4]
 8009c9c:	4608      	mov	r0, r1
 8009c9e:	4611      	mov	r1, r2
 8009ca0:	461a      	mov	r2, r3
 8009ca2:	4603      	mov	r3, r0
 8009ca4:	70fb      	strb	r3, [r7, #3]
 8009ca6:	460b      	mov	r3, r1
 8009ca8:	70bb      	strb	r3, [r7, #2]
 8009caa:	4613      	mov	r3, r2
 8009cac:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8009cae:	7878      	ldrb	r0, [r7, #1]
 8009cb0:	78ba      	ldrb	r2, [r7, #2]
 8009cb2:	78f9      	ldrb	r1, [r7, #3]
 8009cb4:	8b3b      	ldrh	r3, [r7, #24]
 8009cb6:	9302      	str	r3, [sp, #8]
 8009cb8:	7d3b      	ldrb	r3, [r7, #20]
 8009cba:	9301      	str	r3, [sp, #4]
 8009cbc:	7c3b      	ldrb	r3, [r7, #16]
 8009cbe:	9300      	str	r3, [sp, #0]
 8009cc0:	4603      	mov	r3, r0
 8009cc2:	6878      	ldr	r0, [r7, #4]
 8009cc4:	f000 fa53 	bl	800a16e <USBH_LL_OpenPipe>

  return USBH_OK;
 8009cc8:	2300      	movs	r3, #0
}
 8009cca:	4618      	mov	r0, r3
 8009ccc:	3708      	adds	r7, #8
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	bd80      	pop	{r7, pc}

08009cd2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8009cd2:	b580      	push	{r7, lr}
 8009cd4:	b082      	sub	sp, #8
 8009cd6:	af00      	add	r7, sp, #0
 8009cd8:	6078      	str	r0, [r7, #4]
 8009cda:	460b      	mov	r3, r1
 8009cdc:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8009cde:	78fb      	ldrb	r3, [r7, #3]
 8009ce0:	4619      	mov	r1, r3
 8009ce2:	6878      	ldr	r0, [r7, #4]
 8009ce4:	f000 fa72 	bl	800a1cc <USBH_LL_ClosePipe>

  return USBH_OK;
 8009ce8:	2300      	movs	r3, #0
}
 8009cea:	4618      	mov	r0, r3
 8009cec:	3708      	adds	r7, #8
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	bd80      	pop	{r7, pc}

08009cf2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8009cf2:	b580      	push	{r7, lr}
 8009cf4:	b084      	sub	sp, #16
 8009cf6:	af00      	add	r7, sp, #0
 8009cf8:	6078      	str	r0, [r7, #4]
 8009cfa:	460b      	mov	r3, r1
 8009cfc:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8009cfe:	6878      	ldr	r0, [r7, #4]
 8009d00:	f000 f836 	bl	8009d70 <USBH_GetFreePipe>
 8009d04:	4603      	mov	r3, r0
 8009d06:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8009d08:	89fb      	ldrh	r3, [r7, #14]
 8009d0a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009d0e:	4293      	cmp	r3, r2
 8009d10:	d00a      	beq.n	8009d28 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8009d12:	78fa      	ldrb	r2, [r7, #3]
 8009d14:	89fb      	ldrh	r3, [r7, #14]
 8009d16:	f003 030f 	and.w	r3, r3, #15
 8009d1a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009d1e:	6879      	ldr	r1, [r7, #4]
 8009d20:	33e0      	adds	r3, #224	@ 0xe0
 8009d22:	009b      	lsls	r3, r3, #2
 8009d24:	440b      	add	r3, r1
 8009d26:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8009d28:	89fb      	ldrh	r3, [r7, #14]
 8009d2a:	b2db      	uxtb	r3, r3
}
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	3710      	adds	r7, #16
 8009d30:	46bd      	mov	sp, r7
 8009d32:	bd80      	pop	{r7, pc}

08009d34 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8009d34:	b480      	push	{r7}
 8009d36:	b083      	sub	sp, #12
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
 8009d3c:	460b      	mov	r3, r1
 8009d3e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8009d40:	78fb      	ldrb	r3, [r7, #3]
 8009d42:	2b0f      	cmp	r3, #15
 8009d44:	d80d      	bhi.n	8009d62 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8009d46:	78fb      	ldrb	r3, [r7, #3]
 8009d48:	687a      	ldr	r2, [r7, #4]
 8009d4a:	33e0      	adds	r3, #224	@ 0xe0
 8009d4c:	009b      	lsls	r3, r3, #2
 8009d4e:	4413      	add	r3, r2
 8009d50:	685a      	ldr	r2, [r3, #4]
 8009d52:	78fb      	ldrb	r3, [r7, #3]
 8009d54:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8009d58:	6879      	ldr	r1, [r7, #4]
 8009d5a:	33e0      	adds	r3, #224	@ 0xe0
 8009d5c:	009b      	lsls	r3, r3, #2
 8009d5e:	440b      	add	r3, r1
 8009d60:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8009d62:	2300      	movs	r3, #0
}
 8009d64:	4618      	mov	r0, r3
 8009d66:	370c      	adds	r7, #12
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6e:	4770      	bx	lr

08009d70 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8009d70:	b480      	push	{r7}
 8009d72:	b085      	sub	sp, #20
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8009d78:	2300      	movs	r3, #0
 8009d7a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	73fb      	strb	r3, [r7, #15]
 8009d80:	e00f      	b.n	8009da2 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8009d82:	7bfb      	ldrb	r3, [r7, #15]
 8009d84:	687a      	ldr	r2, [r7, #4]
 8009d86:	33e0      	adds	r3, #224	@ 0xe0
 8009d88:	009b      	lsls	r3, r3, #2
 8009d8a:	4413      	add	r3, r2
 8009d8c:	685b      	ldr	r3, [r3, #4]
 8009d8e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d102      	bne.n	8009d9c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8009d96:	7bfb      	ldrb	r3, [r7, #15]
 8009d98:	b29b      	uxth	r3, r3
 8009d9a:	e007      	b.n	8009dac <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8009d9c:	7bfb      	ldrb	r3, [r7, #15]
 8009d9e:	3301      	adds	r3, #1
 8009da0:	73fb      	strb	r3, [r7, #15]
 8009da2:	7bfb      	ldrb	r3, [r7, #15]
 8009da4:	2b0f      	cmp	r3, #15
 8009da6:	d9ec      	bls.n	8009d82 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8009da8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8009dac:	4618      	mov	r0, r3
 8009dae:	3714      	adds	r7, #20
 8009db0:	46bd      	mov	sp, r7
 8009db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db6:	4770      	bx	lr

08009db8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8009db8:	b580      	push	{r7, lr}
 8009dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8009dbc:	2201      	movs	r2, #1
 8009dbe:	490e      	ldr	r1, [pc, #56]	@ (8009df8 <MX_USB_HOST_Init+0x40>)
 8009dc0:	480e      	ldr	r0, [pc, #56]	@ (8009dfc <MX_USB_HOST_Init+0x44>)
 8009dc2:	f7fe fb15 	bl	80083f0 <USBH_Init>
 8009dc6:	4603      	mov	r3, r0
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d001      	beq.n	8009dd0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8009dcc:	f7f7 fb0c 	bl	80013e8 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8009dd0:	490b      	ldr	r1, [pc, #44]	@ (8009e00 <MX_USB_HOST_Init+0x48>)
 8009dd2:	480a      	ldr	r0, [pc, #40]	@ (8009dfc <MX_USB_HOST_Init+0x44>)
 8009dd4:	f7fe fbb9 	bl	800854a <USBH_RegisterClass>
 8009dd8:	4603      	mov	r3, r0
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d001      	beq.n	8009de2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8009dde:	f7f7 fb03 	bl	80013e8 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8009de2:	4806      	ldr	r0, [pc, #24]	@ (8009dfc <MX_USB_HOST_Init+0x44>)
 8009de4:	f7fe fc3d 	bl	8008662 <USBH_Start>
 8009de8:	4603      	mov	r3, r0
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d001      	beq.n	8009df2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8009dee:	f7f7 fafb 	bl	80013e8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8009df2:	bf00      	nop
 8009df4:	bd80      	pop	{r7, pc}
 8009df6:	bf00      	nop
 8009df8:	08009e19 	.word	0x08009e19
 8009dfc:	20000300 	.word	0x20000300
 8009e00:	2000000c 	.word	0x2000000c

08009e04 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8009e04:	b580      	push	{r7, lr}
 8009e06:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8009e08:	4802      	ldr	r0, [pc, #8]	@ (8009e14 <MX_USB_HOST_Process+0x10>)
 8009e0a:	f7fe fc3b 	bl	8008684 <USBH_Process>
}
 8009e0e:	bf00      	nop
 8009e10:	bd80      	pop	{r7, pc}
 8009e12:	bf00      	nop
 8009e14:	20000300 	.word	0x20000300

08009e18 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8009e18:	b480      	push	{r7}
 8009e1a:	b083      	sub	sp, #12
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
 8009e20:	460b      	mov	r3, r1
 8009e22:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8009e24:	78fb      	ldrb	r3, [r7, #3]
 8009e26:	3b01      	subs	r3, #1
 8009e28:	2b04      	cmp	r3, #4
 8009e2a:	d819      	bhi.n	8009e60 <USBH_UserProcess+0x48>
 8009e2c:	a201      	add	r2, pc, #4	@ (adr r2, 8009e34 <USBH_UserProcess+0x1c>)
 8009e2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e32:	bf00      	nop
 8009e34:	08009e61 	.word	0x08009e61
 8009e38:	08009e51 	.word	0x08009e51
 8009e3c:	08009e61 	.word	0x08009e61
 8009e40:	08009e59 	.word	0x08009e59
 8009e44:	08009e49 	.word	0x08009e49
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8009e48:	4b09      	ldr	r3, [pc, #36]	@ (8009e70 <USBH_UserProcess+0x58>)
 8009e4a:	2203      	movs	r2, #3
 8009e4c:	701a      	strb	r2, [r3, #0]
  break;
 8009e4e:	e008      	b.n	8009e62 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8009e50:	4b07      	ldr	r3, [pc, #28]	@ (8009e70 <USBH_UserProcess+0x58>)
 8009e52:	2202      	movs	r2, #2
 8009e54:	701a      	strb	r2, [r3, #0]
  break;
 8009e56:	e004      	b.n	8009e62 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8009e58:	4b05      	ldr	r3, [pc, #20]	@ (8009e70 <USBH_UserProcess+0x58>)
 8009e5a:	2201      	movs	r2, #1
 8009e5c:	701a      	strb	r2, [r3, #0]
  break;
 8009e5e:	e000      	b.n	8009e62 <USBH_UserProcess+0x4a>

  default:
  break;
 8009e60:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8009e62:	bf00      	nop
 8009e64:	370c      	adds	r7, #12
 8009e66:	46bd      	mov	sp, r7
 8009e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6c:	4770      	bx	lr
 8009e6e:	bf00      	nop
 8009e70:	200006d8 	.word	0x200006d8

08009e74 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8009e74:	b580      	push	{r7, lr}
 8009e76:	b08a      	sub	sp, #40	@ 0x28
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009e7c:	f107 0314 	add.w	r3, r7, #20
 8009e80:	2200      	movs	r2, #0
 8009e82:	601a      	str	r2, [r3, #0]
 8009e84:	605a      	str	r2, [r3, #4]
 8009e86:	609a      	str	r2, [r3, #8]
 8009e88:	60da      	str	r2, [r3, #12]
 8009e8a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009e94:	d147      	bne.n	8009f26 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009e96:	2300      	movs	r3, #0
 8009e98:	613b      	str	r3, [r7, #16]
 8009e9a:	4b25      	ldr	r3, [pc, #148]	@ (8009f30 <HAL_HCD_MspInit+0xbc>)
 8009e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e9e:	4a24      	ldr	r2, [pc, #144]	@ (8009f30 <HAL_HCD_MspInit+0xbc>)
 8009ea0:	f043 0301 	orr.w	r3, r3, #1
 8009ea4:	6313      	str	r3, [r2, #48]	@ 0x30
 8009ea6:	4b22      	ldr	r3, [pc, #136]	@ (8009f30 <HAL_HCD_MspInit+0xbc>)
 8009ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009eaa:	f003 0301 	and.w	r3, r3, #1
 8009eae:	613b      	str	r3, [r7, #16]
 8009eb0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8009eb2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009eb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009eb8:	2300      	movs	r3, #0
 8009eba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8009ec0:	f107 0314 	add.w	r3, r7, #20
 8009ec4:	4619      	mov	r1, r3
 8009ec6:	481b      	ldr	r0, [pc, #108]	@ (8009f34 <HAL_HCD_MspInit+0xc0>)
 8009ec8:	f7f7 fef2 	bl	8001cb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8009ecc:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8009ed0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009ed2:	2302      	movs	r3, #2
 8009ed4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009eda:	2300      	movs	r3, #0
 8009edc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009ede:	230a      	movs	r3, #10
 8009ee0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009ee2:	f107 0314 	add.w	r3, r7, #20
 8009ee6:	4619      	mov	r1, r3
 8009ee8:	4812      	ldr	r0, [pc, #72]	@ (8009f34 <HAL_HCD_MspInit+0xc0>)
 8009eea:	f7f7 fee1 	bl	8001cb0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009eee:	4b10      	ldr	r3, [pc, #64]	@ (8009f30 <HAL_HCD_MspInit+0xbc>)
 8009ef0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009ef2:	4a0f      	ldr	r2, [pc, #60]	@ (8009f30 <HAL_HCD_MspInit+0xbc>)
 8009ef4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009ef8:	6353      	str	r3, [r2, #52]	@ 0x34
 8009efa:	2300      	movs	r3, #0
 8009efc:	60fb      	str	r3, [r7, #12]
 8009efe:	4b0c      	ldr	r3, [pc, #48]	@ (8009f30 <HAL_HCD_MspInit+0xbc>)
 8009f00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f02:	4a0b      	ldr	r2, [pc, #44]	@ (8009f30 <HAL_HCD_MspInit+0xbc>)
 8009f04:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009f08:	6453      	str	r3, [r2, #68]	@ 0x44
 8009f0a:	4b09      	ldr	r3, [pc, #36]	@ (8009f30 <HAL_HCD_MspInit+0xbc>)
 8009f0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009f12:	60fb      	str	r3, [r7, #12]
 8009f14:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009f16:	2200      	movs	r2, #0
 8009f18:	2100      	movs	r1, #0
 8009f1a:	2043      	movs	r0, #67	@ 0x43
 8009f1c:	f7f7 fe91 	bl	8001c42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009f20:	2043      	movs	r0, #67	@ 0x43
 8009f22:	f7f7 feaa 	bl	8001c7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009f26:	bf00      	nop
 8009f28:	3728      	adds	r7, #40	@ 0x28
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	bd80      	pop	{r7, pc}
 8009f2e:	bf00      	nop
 8009f30:	40023800 	.word	0x40023800
 8009f34:	40020000 	.word	0x40020000

08009f38 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	b082      	sub	sp, #8
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009f46:	4618      	mov	r0, r3
 8009f48:	f7fe ff73 	bl	8008e32 <USBH_LL_IncTimer>
}
 8009f4c:	bf00      	nop
 8009f4e:	3708      	adds	r7, #8
 8009f50:	46bd      	mov	sp, r7
 8009f52:	bd80      	pop	{r7, pc}

08009f54 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009f54:	b580      	push	{r7, lr}
 8009f56:	b082      	sub	sp, #8
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009f62:	4618      	mov	r0, r3
 8009f64:	f7fe ffab 	bl	8008ebe <USBH_LL_Connect>
}
 8009f68:	bf00      	nop
 8009f6a:	3708      	adds	r7, #8
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	bd80      	pop	{r7, pc}

08009f70 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b082      	sub	sp, #8
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009f7e:	4618      	mov	r0, r3
 8009f80:	f7fe ffb4 	bl	8008eec <USBH_LL_Disconnect>
}
 8009f84:	bf00      	nop
 8009f86:	3708      	adds	r7, #8
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	bd80      	pop	{r7, pc}

08009f8c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8009f8c:	b480      	push	{r7}
 8009f8e:	b083      	sub	sp, #12
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	6078      	str	r0, [r7, #4]
 8009f94:	460b      	mov	r3, r1
 8009f96:	70fb      	strb	r3, [r7, #3]
 8009f98:	4613      	mov	r3, r2
 8009f9a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8009f9c:	bf00      	nop
 8009f9e:	370c      	adds	r7, #12
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa6:	4770      	bx	lr

08009fa8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b082      	sub	sp, #8
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	f7fe ff65 	bl	8008e86 <USBH_LL_PortEnabled>
}
 8009fbc:	bf00      	nop
 8009fbe:	3708      	adds	r7, #8
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	bd80      	pop	{r7, pc}

08009fc4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	b082      	sub	sp, #8
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	f7fe ff65 	bl	8008ea2 <USBH_LL_PortDisabled>
}
 8009fd8:	bf00      	nop
 8009fda:	3708      	adds	r7, #8
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	bd80      	pop	{r7, pc}

08009fe0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b082      	sub	sp, #8
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8009fee:	2b01      	cmp	r3, #1
 8009ff0:	d12a      	bne.n	800a048 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8009ff2:	4a18      	ldr	r2, [pc, #96]	@ (800a054 <USBH_LL_Init+0x74>)
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	4a15      	ldr	r2, [pc, #84]	@ (800a054 <USBH_LL_Init+0x74>)
 8009ffe:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a002:	4b14      	ldr	r3, [pc, #80]	@ (800a054 <USBH_LL_Init+0x74>)
 800a004:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800a008:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800a00a:	4b12      	ldr	r3, [pc, #72]	@ (800a054 <USBH_LL_Init+0x74>)
 800a00c:	2208      	movs	r2, #8
 800a00e:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800a010:	4b10      	ldr	r3, [pc, #64]	@ (800a054 <USBH_LL_Init+0x74>)
 800a012:	2201      	movs	r2, #1
 800a014:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a016:	4b0f      	ldr	r3, [pc, #60]	@ (800a054 <USBH_LL_Init+0x74>)
 800a018:	2200      	movs	r2, #0
 800a01a:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800a01c:	4b0d      	ldr	r3, [pc, #52]	@ (800a054 <USBH_LL_Init+0x74>)
 800a01e:	2202      	movs	r2, #2
 800a020:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a022:	4b0c      	ldr	r3, [pc, #48]	@ (800a054 <USBH_LL_Init+0x74>)
 800a024:	2200      	movs	r2, #0
 800a026:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800a028:	480a      	ldr	r0, [pc, #40]	@ (800a054 <USBH_LL_Init+0x74>)
 800a02a:	f7f8 f80e 	bl	800204a <HAL_HCD_Init>
 800a02e:	4603      	mov	r3, r0
 800a030:	2b00      	cmp	r3, #0
 800a032:	d001      	beq.n	800a038 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800a034:	f7f7 f9d8 	bl	80013e8 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800a038:	4806      	ldr	r0, [pc, #24]	@ (800a054 <USBH_LL_Init+0x74>)
 800a03a:	f7f8 fc6f 	bl	800291c <HAL_HCD_GetCurrentFrame>
 800a03e:	4603      	mov	r3, r0
 800a040:	4619      	mov	r1, r3
 800a042:	6878      	ldr	r0, [r7, #4]
 800a044:	f7fe fee6 	bl	8008e14 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800a048:	2300      	movs	r3, #0
}
 800a04a:	4618      	mov	r0, r3
 800a04c:	3708      	adds	r7, #8
 800a04e:	46bd      	mov	sp, r7
 800a050:	bd80      	pop	{r7, pc}
 800a052:	bf00      	nop
 800a054:	200006dc 	.word	0x200006dc

0800a058 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800a058:	b580      	push	{r7, lr}
 800a05a:	b084      	sub	sp, #16
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a060:	2300      	movs	r3, #0
 800a062:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a064:	2300      	movs	r3, #0
 800a066:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a06e:	4618      	mov	r0, r3
 800a070:	f7f8 fbdc 	bl	800282c <HAL_HCD_Start>
 800a074:	4603      	mov	r3, r0
 800a076:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a078:	7bfb      	ldrb	r3, [r7, #15]
 800a07a:	4618      	mov	r0, r3
 800a07c:	f000 f95e 	bl	800a33c <USBH_Get_USB_Status>
 800a080:	4603      	mov	r3, r0
 800a082:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a084:	7bbb      	ldrb	r3, [r7, #14]
}
 800a086:	4618      	mov	r0, r3
 800a088:	3710      	adds	r7, #16
 800a08a:	46bd      	mov	sp, r7
 800a08c:	bd80      	pop	{r7, pc}

0800a08e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800a08e:	b580      	push	{r7, lr}
 800a090:	b084      	sub	sp, #16
 800a092:	af00      	add	r7, sp, #0
 800a094:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a096:	2300      	movs	r3, #0
 800a098:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a09a:	2300      	movs	r3, #0
 800a09c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	f7f8 fbe4 	bl	8002872 <HAL_HCD_Stop>
 800a0aa:	4603      	mov	r3, r0
 800a0ac:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a0ae:	7bfb      	ldrb	r3, [r7, #15]
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	f000 f943 	bl	800a33c <USBH_Get_USB_Status>
 800a0b6:	4603      	mov	r3, r0
 800a0b8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a0ba:	7bbb      	ldrb	r3, [r7, #14]
}
 800a0bc:	4618      	mov	r0, r3
 800a0be:	3710      	adds	r7, #16
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	bd80      	pop	{r7, pc}

0800a0c4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b084      	sub	sp, #16
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800a0cc:	2301      	movs	r3, #1
 800a0ce:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	f7f8 fc2e 	bl	8002938 <HAL_HCD_GetCurrentSpeed>
 800a0dc:	4603      	mov	r3, r0
 800a0de:	2b02      	cmp	r3, #2
 800a0e0:	d00c      	beq.n	800a0fc <USBH_LL_GetSpeed+0x38>
 800a0e2:	2b02      	cmp	r3, #2
 800a0e4:	d80d      	bhi.n	800a102 <USBH_LL_GetSpeed+0x3e>
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d002      	beq.n	800a0f0 <USBH_LL_GetSpeed+0x2c>
 800a0ea:	2b01      	cmp	r3, #1
 800a0ec:	d003      	beq.n	800a0f6 <USBH_LL_GetSpeed+0x32>
 800a0ee:	e008      	b.n	800a102 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	73fb      	strb	r3, [r7, #15]
    break;
 800a0f4:	e008      	b.n	800a108 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800a0f6:	2301      	movs	r3, #1
 800a0f8:	73fb      	strb	r3, [r7, #15]
    break;
 800a0fa:	e005      	b.n	800a108 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800a0fc:	2302      	movs	r3, #2
 800a0fe:	73fb      	strb	r3, [r7, #15]
    break;
 800a100:	e002      	b.n	800a108 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800a102:	2301      	movs	r3, #1
 800a104:	73fb      	strb	r3, [r7, #15]
    break;
 800a106:	bf00      	nop
  }
  return  speed;
 800a108:	7bfb      	ldrb	r3, [r7, #15]
}
 800a10a:	4618      	mov	r0, r3
 800a10c:	3710      	adds	r7, #16
 800a10e:	46bd      	mov	sp, r7
 800a110:	bd80      	pop	{r7, pc}

0800a112 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800a112:	b580      	push	{r7, lr}
 800a114:	b084      	sub	sp, #16
 800a116:	af00      	add	r7, sp, #0
 800a118:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a11a:	2300      	movs	r3, #0
 800a11c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a11e:	2300      	movs	r3, #0
 800a120:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a128:	4618      	mov	r0, r3
 800a12a:	f7f8 fbbf 	bl	80028ac <HAL_HCD_ResetPort>
 800a12e:	4603      	mov	r3, r0
 800a130:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a132:	7bfb      	ldrb	r3, [r7, #15]
 800a134:	4618      	mov	r0, r3
 800a136:	f000 f901 	bl	800a33c <USBH_Get_USB_Status>
 800a13a:	4603      	mov	r3, r0
 800a13c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a13e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a140:	4618      	mov	r0, r3
 800a142:	3710      	adds	r7, #16
 800a144:	46bd      	mov	sp, r7
 800a146:	bd80      	pop	{r7, pc}

0800a148 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a148:	b580      	push	{r7, lr}
 800a14a:	b082      	sub	sp, #8
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	6078      	str	r0, [r7, #4]
 800a150:	460b      	mov	r3, r1
 800a152:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a15a:	78fa      	ldrb	r2, [r7, #3]
 800a15c:	4611      	mov	r1, r2
 800a15e:	4618      	mov	r0, r3
 800a160:	f7f8 fbc7 	bl	80028f2 <HAL_HCD_HC_GetXferCount>
 800a164:	4603      	mov	r3, r0
}
 800a166:	4618      	mov	r0, r3
 800a168:	3708      	adds	r7, #8
 800a16a:	46bd      	mov	sp, r7
 800a16c:	bd80      	pop	{r7, pc}

0800a16e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a16e:	b590      	push	{r4, r7, lr}
 800a170:	b089      	sub	sp, #36	@ 0x24
 800a172:	af04      	add	r7, sp, #16
 800a174:	6078      	str	r0, [r7, #4]
 800a176:	4608      	mov	r0, r1
 800a178:	4611      	mov	r1, r2
 800a17a:	461a      	mov	r2, r3
 800a17c:	4603      	mov	r3, r0
 800a17e:	70fb      	strb	r3, [r7, #3]
 800a180:	460b      	mov	r3, r1
 800a182:	70bb      	strb	r3, [r7, #2]
 800a184:	4613      	mov	r3, r2
 800a186:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a188:	2300      	movs	r3, #0
 800a18a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a18c:	2300      	movs	r3, #0
 800a18e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800a196:	787c      	ldrb	r4, [r7, #1]
 800a198:	78ba      	ldrb	r2, [r7, #2]
 800a19a:	78f9      	ldrb	r1, [r7, #3]
 800a19c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a19e:	9302      	str	r3, [sp, #8]
 800a1a0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a1a4:	9301      	str	r3, [sp, #4]
 800a1a6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a1aa:	9300      	str	r3, [sp, #0]
 800a1ac:	4623      	mov	r3, r4
 800a1ae:	f7f7 ffb3 	bl	8002118 <HAL_HCD_HC_Init>
 800a1b2:	4603      	mov	r3, r0
 800a1b4:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800a1b6:	7bfb      	ldrb	r3, [r7, #15]
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	f000 f8bf 	bl	800a33c <USBH_Get_USB_Status>
 800a1be:	4603      	mov	r3, r0
 800a1c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a1c2:	7bbb      	ldrb	r3, [r7, #14]
}
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	3714      	adds	r7, #20
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	bd90      	pop	{r4, r7, pc}

0800a1cc <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	b084      	sub	sp, #16
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]
 800a1d4:	460b      	mov	r3, r1
 800a1d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1d8:	2300      	movs	r3, #0
 800a1da:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a1dc:	2300      	movs	r3, #0
 800a1de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a1e6:	78fa      	ldrb	r2, [r7, #3]
 800a1e8:	4611      	mov	r1, r2
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	f7f8 f84c 	bl	8002288 <HAL_HCD_HC_Halt>
 800a1f0:	4603      	mov	r3, r0
 800a1f2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a1f4:	7bfb      	ldrb	r3, [r7, #15]
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	f000 f8a0 	bl	800a33c <USBH_Get_USB_Status>
 800a1fc:	4603      	mov	r3, r0
 800a1fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a200:	7bbb      	ldrb	r3, [r7, #14]
}
 800a202:	4618      	mov	r0, r3
 800a204:	3710      	adds	r7, #16
 800a206:	46bd      	mov	sp, r7
 800a208:	bd80      	pop	{r7, pc}

0800a20a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800a20a:	b590      	push	{r4, r7, lr}
 800a20c:	b089      	sub	sp, #36	@ 0x24
 800a20e:	af04      	add	r7, sp, #16
 800a210:	6078      	str	r0, [r7, #4]
 800a212:	4608      	mov	r0, r1
 800a214:	4611      	mov	r1, r2
 800a216:	461a      	mov	r2, r3
 800a218:	4603      	mov	r3, r0
 800a21a:	70fb      	strb	r3, [r7, #3]
 800a21c:	460b      	mov	r3, r1
 800a21e:	70bb      	strb	r3, [r7, #2]
 800a220:	4613      	mov	r3, r2
 800a222:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a224:	2300      	movs	r3, #0
 800a226:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a228:	2300      	movs	r3, #0
 800a22a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800a232:	787c      	ldrb	r4, [r7, #1]
 800a234:	78ba      	ldrb	r2, [r7, #2]
 800a236:	78f9      	ldrb	r1, [r7, #3]
 800a238:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800a23c:	9303      	str	r3, [sp, #12]
 800a23e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a240:	9302      	str	r3, [sp, #8]
 800a242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a244:	9301      	str	r3, [sp, #4]
 800a246:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a24a:	9300      	str	r3, [sp, #0]
 800a24c:	4623      	mov	r3, r4
 800a24e:	f7f8 f83f 	bl	80022d0 <HAL_HCD_HC_SubmitRequest>
 800a252:	4603      	mov	r3, r0
 800a254:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800a256:	7bfb      	ldrb	r3, [r7, #15]
 800a258:	4618      	mov	r0, r3
 800a25a:	f000 f86f 	bl	800a33c <USBH_Get_USB_Status>
 800a25e:	4603      	mov	r3, r0
 800a260:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a262:	7bbb      	ldrb	r3, [r7, #14]
}
 800a264:	4618      	mov	r0, r3
 800a266:	3714      	adds	r7, #20
 800a268:	46bd      	mov	sp, r7
 800a26a:	bd90      	pop	{r4, r7, pc}

0800a26c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b082      	sub	sp, #8
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]
 800a274:	460b      	mov	r3, r1
 800a276:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a27e:	78fa      	ldrb	r2, [r7, #3]
 800a280:	4611      	mov	r1, r2
 800a282:	4618      	mov	r0, r3
 800a284:	f7f8 fb20 	bl	80028c8 <HAL_HCD_HC_GetURBState>
 800a288:	4603      	mov	r3, r0
}
 800a28a:	4618      	mov	r0, r3
 800a28c:	3708      	adds	r7, #8
 800a28e:	46bd      	mov	sp, r7
 800a290:	bd80      	pop	{r7, pc}

0800a292 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800a292:	b580      	push	{r7, lr}
 800a294:	b082      	sub	sp, #8
 800a296:	af00      	add	r7, sp, #0
 800a298:	6078      	str	r0, [r7, #4]
 800a29a:	460b      	mov	r3, r1
 800a29c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800a2a4:	2b01      	cmp	r3, #1
 800a2a6:	d103      	bne.n	800a2b0 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800a2a8:	78fb      	ldrb	r3, [r7, #3]
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	f000 f872 	bl	800a394 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800a2b0:	20c8      	movs	r0, #200	@ 0xc8
 800a2b2:	f7f7 fbc7 	bl	8001a44 <HAL_Delay>
  return USBH_OK;
 800a2b6:	2300      	movs	r3, #0
}
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	3708      	adds	r7, #8
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	bd80      	pop	{r7, pc}

0800a2c0 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800a2c0:	b480      	push	{r7}
 800a2c2:	b085      	sub	sp, #20
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]
 800a2c8:	460b      	mov	r3, r1
 800a2ca:	70fb      	strb	r3, [r7, #3]
 800a2cc:	4613      	mov	r3, r2
 800a2ce:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a2d6:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800a2d8:	78fa      	ldrb	r2, [r7, #3]
 800a2da:	68f9      	ldr	r1, [r7, #12]
 800a2dc:	4613      	mov	r3, r2
 800a2de:	011b      	lsls	r3, r3, #4
 800a2e0:	1a9b      	subs	r3, r3, r2
 800a2e2:	009b      	lsls	r3, r3, #2
 800a2e4:	440b      	add	r3, r1
 800a2e6:	3317      	adds	r3, #23
 800a2e8:	781b      	ldrb	r3, [r3, #0]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d00a      	beq.n	800a304 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800a2ee:	78fa      	ldrb	r2, [r7, #3]
 800a2f0:	68f9      	ldr	r1, [r7, #12]
 800a2f2:	4613      	mov	r3, r2
 800a2f4:	011b      	lsls	r3, r3, #4
 800a2f6:	1a9b      	subs	r3, r3, r2
 800a2f8:	009b      	lsls	r3, r3, #2
 800a2fa:	440b      	add	r3, r1
 800a2fc:	333c      	adds	r3, #60	@ 0x3c
 800a2fe:	78ba      	ldrb	r2, [r7, #2]
 800a300:	701a      	strb	r2, [r3, #0]
 800a302:	e009      	b.n	800a318 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800a304:	78fa      	ldrb	r2, [r7, #3]
 800a306:	68f9      	ldr	r1, [r7, #12]
 800a308:	4613      	mov	r3, r2
 800a30a:	011b      	lsls	r3, r3, #4
 800a30c:	1a9b      	subs	r3, r3, r2
 800a30e:	009b      	lsls	r3, r3, #2
 800a310:	440b      	add	r3, r1
 800a312:	333d      	adds	r3, #61	@ 0x3d
 800a314:	78ba      	ldrb	r2, [r7, #2]
 800a316:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800a318:	2300      	movs	r3, #0
}
 800a31a:	4618      	mov	r0, r3
 800a31c:	3714      	adds	r7, #20
 800a31e:	46bd      	mov	sp, r7
 800a320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a324:	4770      	bx	lr

0800a326 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800a326:	b580      	push	{r7, lr}
 800a328:	b082      	sub	sp, #8
 800a32a:	af00      	add	r7, sp, #0
 800a32c:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800a32e:	6878      	ldr	r0, [r7, #4]
 800a330:	f7f7 fb88 	bl	8001a44 <HAL_Delay>
}
 800a334:	bf00      	nop
 800a336:	3708      	adds	r7, #8
 800a338:	46bd      	mov	sp, r7
 800a33a:	bd80      	pop	{r7, pc}

0800a33c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a33c:	b480      	push	{r7}
 800a33e:	b085      	sub	sp, #20
 800a340:	af00      	add	r7, sp, #0
 800a342:	4603      	mov	r3, r0
 800a344:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a346:	2300      	movs	r3, #0
 800a348:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a34a:	79fb      	ldrb	r3, [r7, #7]
 800a34c:	2b03      	cmp	r3, #3
 800a34e:	d817      	bhi.n	800a380 <USBH_Get_USB_Status+0x44>
 800a350:	a201      	add	r2, pc, #4	@ (adr r2, 800a358 <USBH_Get_USB_Status+0x1c>)
 800a352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a356:	bf00      	nop
 800a358:	0800a369 	.word	0x0800a369
 800a35c:	0800a36f 	.word	0x0800a36f
 800a360:	0800a375 	.word	0x0800a375
 800a364:	0800a37b 	.word	0x0800a37b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800a368:	2300      	movs	r3, #0
 800a36a:	73fb      	strb	r3, [r7, #15]
    break;
 800a36c:	e00b      	b.n	800a386 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800a36e:	2302      	movs	r3, #2
 800a370:	73fb      	strb	r3, [r7, #15]
    break;
 800a372:	e008      	b.n	800a386 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800a374:	2301      	movs	r3, #1
 800a376:	73fb      	strb	r3, [r7, #15]
    break;
 800a378:	e005      	b.n	800a386 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800a37a:	2302      	movs	r3, #2
 800a37c:	73fb      	strb	r3, [r7, #15]
    break;
 800a37e:	e002      	b.n	800a386 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800a380:	2302      	movs	r3, #2
 800a382:	73fb      	strb	r3, [r7, #15]
    break;
 800a384:	bf00      	nop
  }
  return usb_status;
 800a386:	7bfb      	ldrb	r3, [r7, #15]
}
 800a388:	4618      	mov	r0, r3
 800a38a:	3714      	adds	r7, #20
 800a38c:	46bd      	mov	sp, r7
 800a38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a392:	4770      	bx	lr

0800a394 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800a394:	b580      	push	{r7, lr}
 800a396:	b084      	sub	sp, #16
 800a398:	af00      	add	r7, sp, #0
 800a39a:	4603      	mov	r3, r0
 800a39c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800a39e:	79fb      	ldrb	r3, [r7, #7]
 800a3a0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800a3a2:	79fb      	ldrb	r3, [r7, #7]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d102      	bne.n	800a3ae <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	73fb      	strb	r3, [r7, #15]
 800a3ac:	e001      	b.n	800a3b2 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800a3ae:	2301      	movs	r3, #1
 800a3b0:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800a3b2:	7bfb      	ldrb	r3, [r7, #15]
 800a3b4:	461a      	mov	r2, r3
 800a3b6:	2101      	movs	r1, #1
 800a3b8:	4803      	ldr	r0, [pc, #12]	@ (800a3c8 <MX_DriverVbusFS+0x34>)
 800a3ba:	f7f7 fe2d 	bl	8002018 <HAL_GPIO_WritePin>
}
 800a3be:	bf00      	nop
 800a3c0:	3710      	adds	r7, #16
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	bd80      	pop	{r7, pc}
 800a3c6:	bf00      	nop
 800a3c8:	40020800 	.word	0x40020800

0800a3cc <malloc>:
 800a3cc:	4b02      	ldr	r3, [pc, #8]	@ (800a3d8 <malloc+0xc>)
 800a3ce:	4601      	mov	r1, r0
 800a3d0:	6818      	ldr	r0, [r3, #0]
 800a3d2:	f000 b82d 	b.w	800a430 <_malloc_r>
 800a3d6:	bf00      	nop
 800a3d8:	20000038 	.word	0x20000038

0800a3dc <free>:
 800a3dc:	4b02      	ldr	r3, [pc, #8]	@ (800a3e8 <free+0xc>)
 800a3de:	4601      	mov	r1, r0
 800a3e0:	6818      	ldr	r0, [r3, #0]
 800a3e2:	f000 ba55 	b.w	800a890 <_free_r>
 800a3e6:	bf00      	nop
 800a3e8:	20000038 	.word	0x20000038

0800a3ec <sbrk_aligned>:
 800a3ec:	b570      	push	{r4, r5, r6, lr}
 800a3ee:	4e0f      	ldr	r6, [pc, #60]	@ (800a42c <sbrk_aligned+0x40>)
 800a3f0:	460c      	mov	r4, r1
 800a3f2:	6831      	ldr	r1, [r6, #0]
 800a3f4:	4605      	mov	r5, r0
 800a3f6:	b911      	cbnz	r1, 800a3fe <sbrk_aligned+0x12>
 800a3f8:	f000 f9fa 	bl	800a7f0 <_sbrk_r>
 800a3fc:	6030      	str	r0, [r6, #0]
 800a3fe:	4621      	mov	r1, r4
 800a400:	4628      	mov	r0, r5
 800a402:	f000 f9f5 	bl	800a7f0 <_sbrk_r>
 800a406:	1c43      	adds	r3, r0, #1
 800a408:	d103      	bne.n	800a412 <sbrk_aligned+0x26>
 800a40a:	f04f 34ff 	mov.w	r4, #4294967295
 800a40e:	4620      	mov	r0, r4
 800a410:	bd70      	pop	{r4, r5, r6, pc}
 800a412:	1cc4      	adds	r4, r0, #3
 800a414:	f024 0403 	bic.w	r4, r4, #3
 800a418:	42a0      	cmp	r0, r4
 800a41a:	d0f8      	beq.n	800a40e <sbrk_aligned+0x22>
 800a41c:	1a21      	subs	r1, r4, r0
 800a41e:	4628      	mov	r0, r5
 800a420:	f000 f9e6 	bl	800a7f0 <_sbrk_r>
 800a424:	3001      	adds	r0, #1
 800a426:	d1f2      	bne.n	800a40e <sbrk_aligned+0x22>
 800a428:	e7ef      	b.n	800a40a <sbrk_aligned+0x1e>
 800a42a:	bf00      	nop
 800a42c:	20000abc 	.word	0x20000abc

0800a430 <_malloc_r>:
 800a430:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a434:	1ccd      	adds	r5, r1, #3
 800a436:	f025 0503 	bic.w	r5, r5, #3
 800a43a:	3508      	adds	r5, #8
 800a43c:	2d0c      	cmp	r5, #12
 800a43e:	bf38      	it	cc
 800a440:	250c      	movcc	r5, #12
 800a442:	2d00      	cmp	r5, #0
 800a444:	4606      	mov	r6, r0
 800a446:	db01      	blt.n	800a44c <_malloc_r+0x1c>
 800a448:	42a9      	cmp	r1, r5
 800a44a:	d904      	bls.n	800a456 <_malloc_r+0x26>
 800a44c:	230c      	movs	r3, #12
 800a44e:	6033      	str	r3, [r6, #0]
 800a450:	2000      	movs	r0, #0
 800a452:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a456:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a52c <_malloc_r+0xfc>
 800a45a:	f000 f869 	bl	800a530 <__malloc_lock>
 800a45e:	f8d8 3000 	ldr.w	r3, [r8]
 800a462:	461c      	mov	r4, r3
 800a464:	bb44      	cbnz	r4, 800a4b8 <_malloc_r+0x88>
 800a466:	4629      	mov	r1, r5
 800a468:	4630      	mov	r0, r6
 800a46a:	f7ff ffbf 	bl	800a3ec <sbrk_aligned>
 800a46e:	1c43      	adds	r3, r0, #1
 800a470:	4604      	mov	r4, r0
 800a472:	d158      	bne.n	800a526 <_malloc_r+0xf6>
 800a474:	f8d8 4000 	ldr.w	r4, [r8]
 800a478:	4627      	mov	r7, r4
 800a47a:	2f00      	cmp	r7, #0
 800a47c:	d143      	bne.n	800a506 <_malloc_r+0xd6>
 800a47e:	2c00      	cmp	r4, #0
 800a480:	d04b      	beq.n	800a51a <_malloc_r+0xea>
 800a482:	6823      	ldr	r3, [r4, #0]
 800a484:	4639      	mov	r1, r7
 800a486:	4630      	mov	r0, r6
 800a488:	eb04 0903 	add.w	r9, r4, r3
 800a48c:	f000 f9b0 	bl	800a7f0 <_sbrk_r>
 800a490:	4581      	cmp	r9, r0
 800a492:	d142      	bne.n	800a51a <_malloc_r+0xea>
 800a494:	6821      	ldr	r1, [r4, #0]
 800a496:	1a6d      	subs	r5, r5, r1
 800a498:	4629      	mov	r1, r5
 800a49a:	4630      	mov	r0, r6
 800a49c:	f7ff ffa6 	bl	800a3ec <sbrk_aligned>
 800a4a0:	3001      	adds	r0, #1
 800a4a2:	d03a      	beq.n	800a51a <_malloc_r+0xea>
 800a4a4:	6823      	ldr	r3, [r4, #0]
 800a4a6:	442b      	add	r3, r5
 800a4a8:	6023      	str	r3, [r4, #0]
 800a4aa:	f8d8 3000 	ldr.w	r3, [r8]
 800a4ae:	685a      	ldr	r2, [r3, #4]
 800a4b0:	bb62      	cbnz	r2, 800a50c <_malloc_r+0xdc>
 800a4b2:	f8c8 7000 	str.w	r7, [r8]
 800a4b6:	e00f      	b.n	800a4d8 <_malloc_r+0xa8>
 800a4b8:	6822      	ldr	r2, [r4, #0]
 800a4ba:	1b52      	subs	r2, r2, r5
 800a4bc:	d420      	bmi.n	800a500 <_malloc_r+0xd0>
 800a4be:	2a0b      	cmp	r2, #11
 800a4c0:	d917      	bls.n	800a4f2 <_malloc_r+0xc2>
 800a4c2:	1961      	adds	r1, r4, r5
 800a4c4:	42a3      	cmp	r3, r4
 800a4c6:	6025      	str	r5, [r4, #0]
 800a4c8:	bf18      	it	ne
 800a4ca:	6059      	strne	r1, [r3, #4]
 800a4cc:	6863      	ldr	r3, [r4, #4]
 800a4ce:	bf08      	it	eq
 800a4d0:	f8c8 1000 	streq.w	r1, [r8]
 800a4d4:	5162      	str	r2, [r4, r5]
 800a4d6:	604b      	str	r3, [r1, #4]
 800a4d8:	4630      	mov	r0, r6
 800a4da:	f000 f82f 	bl	800a53c <__malloc_unlock>
 800a4de:	f104 000b 	add.w	r0, r4, #11
 800a4e2:	1d23      	adds	r3, r4, #4
 800a4e4:	f020 0007 	bic.w	r0, r0, #7
 800a4e8:	1ac2      	subs	r2, r0, r3
 800a4ea:	bf1c      	itt	ne
 800a4ec:	1a1b      	subne	r3, r3, r0
 800a4ee:	50a3      	strne	r3, [r4, r2]
 800a4f0:	e7af      	b.n	800a452 <_malloc_r+0x22>
 800a4f2:	6862      	ldr	r2, [r4, #4]
 800a4f4:	42a3      	cmp	r3, r4
 800a4f6:	bf0c      	ite	eq
 800a4f8:	f8c8 2000 	streq.w	r2, [r8]
 800a4fc:	605a      	strne	r2, [r3, #4]
 800a4fe:	e7eb      	b.n	800a4d8 <_malloc_r+0xa8>
 800a500:	4623      	mov	r3, r4
 800a502:	6864      	ldr	r4, [r4, #4]
 800a504:	e7ae      	b.n	800a464 <_malloc_r+0x34>
 800a506:	463c      	mov	r4, r7
 800a508:	687f      	ldr	r7, [r7, #4]
 800a50a:	e7b6      	b.n	800a47a <_malloc_r+0x4a>
 800a50c:	461a      	mov	r2, r3
 800a50e:	685b      	ldr	r3, [r3, #4]
 800a510:	42a3      	cmp	r3, r4
 800a512:	d1fb      	bne.n	800a50c <_malloc_r+0xdc>
 800a514:	2300      	movs	r3, #0
 800a516:	6053      	str	r3, [r2, #4]
 800a518:	e7de      	b.n	800a4d8 <_malloc_r+0xa8>
 800a51a:	230c      	movs	r3, #12
 800a51c:	6033      	str	r3, [r6, #0]
 800a51e:	4630      	mov	r0, r6
 800a520:	f000 f80c 	bl	800a53c <__malloc_unlock>
 800a524:	e794      	b.n	800a450 <_malloc_r+0x20>
 800a526:	6005      	str	r5, [r0, #0]
 800a528:	e7d6      	b.n	800a4d8 <_malloc_r+0xa8>
 800a52a:	bf00      	nop
 800a52c:	20000ac0 	.word	0x20000ac0

0800a530 <__malloc_lock>:
 800a530:	4801      	ldr	r0, [pc, #4]	@ (800a538 <__malloc_lock+0x8>)
 800a532:	f000 b9aa 	b.w	800a88a <__retarget_lock_acquire_recursive>
 800a536:	bf00      	nop
 800a538:	20000c04 	.word	0x20000c04

0800a53c <__malloc_unlock>:
 800a53c:	4801      	ldr	r0, [pc, #4]	@ (800a544 <__malloc_unlock+0x8>)
 800a53e:	f000 b9a5 	b.w	800a88c <__retarget_lock_release_recursive>
 800a542:	bf00      	nop
 800a544:	20000c04 	.word	0x20000c04

0800a548 <std>:
 800a548:	2300      	movs	r3, #0
 800a54a:	b510      	push	{r4, lr}
 800a54c:	4604      	mov	r4, r0
 800a54e:	e9c0 3300 	strd	r3, r3, [r0]
 800a552:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a556:	6083      	str	r3, [r0, #8]
 800a558:	8181      	strh	r1, [r0, #12]
 800a55a:	6643      	str	r3, [r0, #100]	@ 0x64
 800a55c:	81c2      	strh	r2, [r0, #14]
 800a55e:	6183      	str	r3, [r0, #24]
 800a560:	4619      	mov	r1, r3
 800a562:	2208      	movs	r2, #8
 800a564:	305c      	adds	r0, #92	@ 0x5c
 800a566:	f000 f906 	bl	800a776 <memset>
 800a56a:	4b0d      	ldr	r3, [pc, #52]	@ (800a5a0 <std+0x58>)
 800a56c:	6263      	str	r3, [r4, #36]	@ 0x24
 800a56e:	4b0d      	ldr	r3, [pc, #52]	@ (800a5a4 <std+0x5c>)
 800a570:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a572:	4b0d      	ldr	r3, [pc, #52]	@ (800a5a8 <std+0x60>)
 800a574:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a576:	4b0d      	ldr	r3, [pc, #52]	@ (800a5ac <std+0x64>)
 800a578:	6323      	str	r3, [r4, #48]	@ 0x30
 800a57a:	4b0d      	ldr	r3, [pc, #52]	@ (800a5b0 <std+0x68>)
 800a57c:	6224      	str	r4, [r4, #32]
 800a57e:	429c      	cmp	r4, r3
 800a580:	d006      	beq.n	800a590 <std+0x48>
 800a582:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a586:	4294      	cmp	r4, r2
 800a588:	d002      	beq.n	800a590 <std+0x48>
 800a58a:	33d0      	adds	r3, #208	@ 0xd0
 800a58c:	429c      	cmp	r4, r3
 800a58e:	d105      	bne.n	800a59c <std+0x54>
 800a590:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a594:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a598:	f000 b976 	b.w	800a888 <__retarget_lock_init_recursive>
 800a59c:	bd10      	pop	{r4, pc}
 800a59e:	bf00      	nop
 800a5a0:	0800a6f1 	.word	0x0800a6f1
 800a5a4:	0800a713 	.word	0x0800a713
 800a5a8:	0800a74b 	.word	0x0800a74b
 800a5ac:	0800a76f 	.word	0x0800a76f
 800a5b0:	20000ac4 	.word	0x20000ac4

0800a5b4 <stdio_exit_handler>:
 800a5b4:	4a02      	ldr	r2, [pc, #8]	@ (800a5c0 <stdio_exit_handler+0xc>)
 800a5b6:	4903      	ldr	r1, [pc, #12]	@ (800a5c4 <stdio_exit_handler+0x10>)
 800a5b8:	4803      	ldr	r0, [pc, #12]	@ (800a5c8 <stdio_exit_handler+0x14>)
 800a5ba:	f000 b869 	b.w	800a690 <_fwalk_sglue>
 800a5be:	bf00      	nop
 800a5c0:	2000002c 	.word	0x2000002c
 800a5c4:	0800afcd 	.word	0x0800afcd
 800a5c8:	2000003c 	.word	0x2000003c

0800a5cc <cleanup_stdio>:
 800a5cc:	6841      	ldr	r1, [r0, #4]
 800a5ce:	4b0c      	ldr	r3, [pc, #48]	@ (800a600 <cleanup_stdio+0x34>)
 800a5d0:	4299      	cmp	r1, r3
 800a5d2:	b510      	push	{r4, lr}
 800a5d4:	4604      	mov	r4, r0
 800a5d6:	d001      	beq.n	800a5dc <cleanup_stdio+0x10>
 800a5d8:	f000 fcf8 	bl	800afcc <_fflush_r>
 800a5dc:	68a1      	ldr	r1, [r4, #8]
 800a5de:	4b09      	ldr	r3, [pc, #36]	@ (800a604 <cleanup_stdio+0x38>)
 800a5e0:	4299      	cmp	r1, r3
 800a5e2:	d002      	beq.n	800a5ea <cleanup_stdio+0x1e>
 800a5e4:	4620      	mov	r0, r4
 800a5e6:	f000 fcf1 	bl	800afcc <_fflush_r>
 800a5ea:	68e1      	ldr	r1, [r4, #12]
 800a5ec:	4b06      	ldr	r3, [pc, #24]	@ (800a608 <cleanup_stdio+0x3c>)
 800a5ee:	4299      	cmp	r1, r3
 800a5f0:	d004      	beq.n	800a5fc <cleanup_stdio+0x30>
 800a5f2:	4620      	mov	r0, r4
 800a5f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a5f8:	f000 bce8 	b.w	800afcc <_fflush_r>
 800a5fc:	bd10      	pop	{r4, pc}
 800a5fe:	bf00      	nop
 800a600:	20000ac4 	.word	0x20000ac4
 800a604:	20000b2c 	.word	0x20000b2c
 800a608:	20000b94 	.word	0x20000b94

0800a60c <global_stdio_init.part.0>:
 800a60c:	b510      	push	{r4, lr}
 800a60e:	4b0b      	ldr	r3, [pc, #44]	@ (800a63c <global_stdio_init.part.0+0x30>)
 800a610:	4c0b      	ldr	r4, [pc, #44]	@ (800a640 <global_stdio_init.part.0+0x34>)
 800a612:	4a0c      	ldr	r2, [pc, #48]	@ (800a644 <global_stdio_init.part.0+0x38>)
 800a614:	601a      	str	r2, [r3, #0]
 800a616:	4620      	mov	r0, r4
 800a618:	2200      	movs	r2, #0
 800a61a:	2104      	movs	r1, #4
 800a61c:	f7ff ff94 	bl	800a548 <std>
 800a620:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a624:	2201      	movs	r2, #1
 800a626:	2109      	movs	r1, #9
 800a628:	f7ff ff8e 	bl	800a548 <std>
 800a62c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a630:	2202      	movs	r2, #2
 800a632:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a636:	2112      	movs	r1, #18
 800a638:	f7ff bf86 	b.w	800a548 <std>
 800a63c:	20000bfc 	.word	0x20000bfc
 800a640:	20000ac4 	.word	0x20000ac4
 800a644:	0800a5b5 	.word	0x0800a5b5

0800a648 <__sfp_lock_acquire>:
 800a648:	4801      	ldr	r0, [pc, #4]	@ (800a650 <__sfp_lock_acquire+0x8>)
 800a64a:	f000 b91e 	b.w	800a88a <__retarget_lock_acquire_recursive>
 800a64e:	bf00      	nop
 800a650:	20000c05 	.word	0x20000c05

0800a654 <__sfp_lock_release>:
 800a654:	4801      	ldr	r0, [pc, #4]	@ (800a65c <__sfp_lock_release+0x8>)
 800a656:	f000 b919 	b.w	800a88c <__retarget_lock_release_recursive>
 800a65a:	bf00      	nop
 800a65c:	20000c05 	.word	0x20000c05

0800a660 <__sinit>:
 800a660:	b510      	push	{r4, lr}
 800a662:	4604      	mov	r4, r0
 800a664:	f7ff fff0 	bl	800a648 <__sfp_lock_acquire>
 800a668:	6a23      	ldr	r3, [r4, #32]
 800a66a:	b11b      	cbz	r3, 800a674 <__sinit+0x14>
 800a66c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a670:	f7ff bff0 	b.w	800a654 <__sfp_lock_release>
 800a674:	4b04      	ldr	r3, [pc, #16]	@ (800a688 <__sinit+0x28>)
 800a676:	6223      	str	r3, [r4, #32]
 800a678:	4b04      	ldr	r3, [pc, #16]	@ (800a68c <__sinit+0x2c>)
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d1f5      	bne.n	800a66c <__sinit+0xc>
 800a680:	f7ff ffc4 	bl	800a60c <global_stdio_init.part.0>
 800a684:	e7f2      	b.n	800a66c <__sinit+0xc>
 800a686:	bf00      	nop
 800a688:	0800a5cd 	.word	0x0800a5cd
 800a68c:	20000bfc 	.word	0x20000bfc

0800a690 <_fwalk_sglue>:
 800a690:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a694:	4607      	mov	r7, r0
 800a696:	4688      	mov	r8, r1
 800a698:	4614      	mov	r4, r2
 800a69a:	2600      	movs	r6, #0
 800a69c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a6a0:	f1b9 0901 	subs.w	r9, r9, #1
 800a6a4:	d505      	bpl.n	800a6b2 <_fwalk_sglue+0x22>
 800a6a6:	6824      	ldr	r4, [r4, #0]
 800a6a8:	2c00      	cmp	r4, #0
 800a6aa:	d1f7      	bne.n	800a69c <_fwalk_sglue+0xc>
 800a6ac:	4630      	mov	r0, r6
 800a6ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a6b2:	89ab      	ldrh	r3, [r5, #12]
 800a6b4:	2b01      	cmp	r3, #1
 800a6b6:	d907      	bls.n	800a6c8 <_fwalk_sglue+0x38>
 800a6b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a6bc:	3301      	adds	r3, #1
 800a6be:	d003      	beq.n	800a6c8 <_fwalk_sglue+0x38>
 800a6c0:	4629      	mov	r1, r5
 800a6c2:	4638      	mov	r0, r7
 800a6c4:	47c0      	blx	r8
 800a6c6:	4306      	orrs	r6, r0
 800a6c8:	3568      	adds	r5, #104	@ 0x68
 800a6ca:	e7e9      	b.n	800a6a0 <_fwalk_sglue+0x10>

0800a6cc <iprintf>:
 800a6cc:	b40f      	push	{r0, r1, r2, r3}
 800a6ce:	b507      	push	{r0, r1, r2, lr}
 800a6d0:	4906      	ldr	r1, [pc, #24]	@ (800a6ec <iprintf+0x20>)
 800a6d2:	ab04      	add	r3, sp, #16
 800a6d4:	6808      	ldr	r0, [r1, #0]
 800a6d6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a6da:	6881      	ldr	r1, [r0, #8]
 800a6dc:	9301      	str	r3, [sp, #4]
 800a6de:	f000 f94b 	bl	800a978 <_vfiprintf_r>
 800a6e2:	b003      	add	sp, #12
 800a6e4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a6e8:	b004      	add	sp, #16
 800a6ea:	4770      	bx	lr
 800a6ec:	20000038 	.word	0x20000038

0800a6f0 <__sread>:
 800a6f0:	b510      	push	{r4, lr}
 800a6f2:	460c      	mov	r4, r1
 800a6f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6f8:	f000 f868 	bl	800a7cc <_read_r>
 800a6fc:	2800      	cmp	r0, #0
 800a6fe:	bfab      	itete	ge
 800a700:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a702:	89a3      	ldrhlt	r3, [r4, #12]
 800a704:	181b      	addge	r3, r3, r0
 800a706:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a70a:	bfac      	ite	ge
 800a70c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a70e:	81a3      	strhlt	r3, [r4, #12]
 800a710:	bd10      	pop	{r4, pc}

0800a712 <__swrite>:
 800a712:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a716:	461f      	mov	r7, r3
 800a718:	898b      	ldrh	r3, [r1, #12]
 800a71a:	05db      	lsls	r3, r3, #23
 800a71c:	4605      	mov	r5, r0
 800a71e:	460c      	mov	r4, r1
 800a720:	4616      	mov	r6, r2
 800a722:	d505      	bpl.n	800a730 <__swrite+0x1e>
 800a724:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a728:	2302      	movs	r3, #2
 800a72a:	2200      	movs	r2, #0
 800a72c:	f000 f83c 	bl	800a7a8 <_lseek_r>
 800a730:	89a3      	ldrh	r3, [r4, #12]
 800a732:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a736:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a73a:	81a3      	strh	r3, [r4, #12]
 800a73c:	4632      	mov	r2, r6
 800a73e:	463b      	mov	r3, r7
 800a740:	4628      	mov	r0, r5
 800a742:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a746:	f000 b863 	b.w	800a810 <_write_r>

0800a74a <__sseek>:
 800a74a:	b510      	push	{r4, lr}
 800a74c:	460c      	mov	r4, r1
 800a74e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a752:	f000 f829 	bl	800a7a8 <_lseek_r>
 800a756:	1c43      	adds	r3, r0, #1
 800a758:	89a3      	ldrh	r3, [r4, #12]
 800a75a:	bf15      	itete	ne
 800a75c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a75e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a762:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a766:	81a3      	strheq	r3, [r4, #12]
 800a768:	bf18      	it	ne
 800a76a:	81a3      	strhne	r3, [r4, #12]
 800a76c:	bd10      	pop	{r4, pc}

0800a76e <__sclose>:
 800a76e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a772:	f000 b809 	b.w	800a788 <_close_r>

0800a776 <memset>:
 800a776:	4402      	add	r2, r0
 800a778:	4603      	mov	r3, r0
 800a77a:	4293      	cmp	r3, r2
 800a77c:	d100      	bne.n	800a780 <memset+0xa>
 800a77e:	4770      	bx	lr
 800a780:	f803 1b01 	strb.w	r1, [r3], #1
 800a784:	e7f9      	b.n	800a77a <memset+0x4>
	...

0800a788 <_close_r>:
 800a788:	b538      	push	{r3, r4, r5, lr}
 800a78a:	4d06      	ldr	r5, [pc, #24]	@ (800a7a4 <_close_r+0x1c>)
 800a78c:	2300      	movs	r3, #0
 800a78e:	4604      	mov	r4, r0
 800a790:	4608      	mov	r0, r1
 800a792:	602b      	str	r3, [r5, #0]
 800a794:	f7f7 f83d 	bl	8001812 <_close>
 800a798:	1c43      	adds	r3, r0, #1
 800a79a:	d102      	bne.n	800a7a2 <_close_r+0x1a>
 800a79c:	682b      	ldr	r3, [r5, #0]
 800a79e:	b103      	cbz	r3, 800a7a2 <_close_r+0x1a>
 800a7a0:	6023      	str	r3, [r4, #0]
 800a7a2:	bd38      	pop	{r3, r4, r5, pc}
 800a7a4:	20000c00 	.word	0x20000c00

0800a7a8 <_lseek_r>:
 800a7a8:	b538      	push	{r3, r4, r5, lr}
 800a7aa:	4d07      	ldr	r5, [pc, #28]	@ (800a7c8 <_lseek_r+0x20>)
 800a7ac:	4604      	mov	r4, r0
 800a7ae:	4608      	mov	r0, r1
 800a7b0:	4611      	mov	r1, r2
 800a7b2:	2200      	movs	r2, #0
 800a7b4:	602a      	str	r2, [r5, #0]
 800a7b6:	461a      	mov	r2, r3
 800a7b8:	f7f7 f852 	bl	8001860 <_lseek>
 800a7bc:	1c43      	adds	r3, r0, #1
 800a7be:	d102      	bne.n	800a7c6 <_lseek_r+0x1e>
 800a7c0:	682b      	ldr	r3, [r5, #0]
 800a7c2:	b103      	cbz	r3, 800a7c6 <_lseek_r+0x1e>
 800a7c4:	6023      	str	r3, [r4, #0]
 800a7c6:	bd38      	pop	{r3, r4, r5, pc}
 800a7c8:	20000c00 	.word	0x20000c00

0800a7cc <_read_r>:
 800a7cc:	b538      	push	{r3, r4, r5, lr}
 800a7ce:	4d07      	ldr	r5, [pc, #28]	@ (800a7ec <_read_r+0x20>)
 800a7d0:	4604      	mov	r4, r0
 800a7d2:	4608      	mov	r0, r1
 800a7d4:	4611      	mov	r1, r2
 800a7d6:	2200      	movs	r2, #0
 800a7d8:	602a      	str	r2, [r5, #0]
 800a7da:	461a      	mov	r2, r3
 800a7dc:	f7f6 fffc 	bl	80017d8 <_read>
 800a7e0:	1c43      	adds	r3, r0, #1
 800a7e2:	d102      	bne.n	800a7ea <_read_r+0x1e>
 800a7e4:	682b      	ldr	r3, [r5, #0]
 800a7e6:	b103      	cbz	r3, 800a7ea <_read_r+0x1e>
 800a7e8:	6023      	str	r3, [r4, #0]
 800a7ea:	bd38      	pop	{r3, r4, r5, pc}
 800a7ec:	20000c00 	.word	0x20000c00

0800a7f0 <_sbrk_r>:
 800a7f0:	b538      	push	{r3, r4, r5, lr}
 800a7f2:	4d06      	ldr	r5, [pc, #24]	@ (800a80c <_sbrk_r+0x1c>)
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	4604      	mov	r4, r0
 800a7f8:	4608      	mov	r0, r1
 800a7fa:	602b      	str	r3, [r5, #0]
 800a7fc:	f7f7 f83e 	bl	800187c <_sbrk>
 800a800:	1c43      	adds	r3, r0, #1
 800a802:	d102      	bne.n	800a80a <_sbrk_r+0x1a>
 800a804:	682b      	ldr	r3, [r5, #0]
 800a806:	b103      	cbz	r3, 800a80a <_sbrk_r+0x1a>
 800a808:	6023      	str	r3, [r4, #0]
 800a80a:	bd38      	pop	{r3, r4, r5, pc}
 800a80c:	20000c00 	.word	0x20000c00

0800a810 <_write_r>:
 800a810:	b538      	push	{r3, r4, r5, lr}
 800a812:	4d07      	ldr	r5, [pc, #28]	@ (800a830 <_write_r+0x20>)
 800a814:	4604      	mov	r4, r0
 800a816:	4608      	mov	r0, r1
 800a818:	4611      	mov	r1, r2
 800a81a:	2200      	movs	r2, #0
 800a81c:	602a      	str	r2, [r5, #0]
 800a81e:	461a      	mov	r2, r3
 800a820:	f7f6 fde8 	bl	80013f4 <_write>
 800a824:	1c43      	adds	r3, r0, #1
 800a826:	d102      	bne.n	800a82e <_write_r+0x1e>
 800a828:	682b      	ldr	r3, [r5, #0]
 800a82a:	b103      	cbz	r3, 800a82e <_write_r+0x1e>
 800a82c:	6023      	str	r3, [r4, #0]
 800a82e:	bd38      	pop	{r3, r4, r5, pc}
 800a830:	20000c00 	.word	0x20000c00

0800a834 <__errno>:
 800a834:	4b01      	ldr	r3, [pc, #4]	@ (800a83c <__errno+0x8>)
 800a836:	6818      	ldr	r0, [r3, #0]
 800a838:	4770      	bx	lr
 800a83a:	bf00      	nop
 800a83c:	20000038 	.word	0x20000038

0800a840 <__libc_init_array>:
 800a840:	b570      	push	{r4, r5, r6, lr}
 800a842:	4d0d      	ldr	r5, [pc, #52]	@ (800a878 <__libc_init_array+0x38>)
 800a844:	4c0d      	ldr	r4, [pc, #52]	@ (800a87c <__libc_init_array+0x3c>)
 800a846:	1b64      	subs	r4, r4, r5
 800a848:	10a4      	asrs	r4, r4, #2
 800a84a:	2600      	movs	r6, #0
 800a84c:	42a6      	cmp	r6, r4
 800a84e:	d109      	bne.n	800a864 <__libc_init_array+0x24>
 800a850:	4d0b      	ldr	r5, [pc, #44]	@ (800a880 <__libc_init_array+0x40>)
 800a852:	4c0c      	ldr	r4, [pc, #48]	@ (800a884 <__libc_init_array+0x44>)
 800a854:	f000 fcfa 	bl	800b24c <_init>
 800a858:	1b64      	subs	r4, r4, r5
 800a85a:	10a4      	asrs	r4, r4, #2
 800a85c:	2600      	movs	r6, #0
 800a85e:	42a6      	cmp	r6, r4
 800a860:	d105      	bne.n	800a86e <__libc_init_array+0x2e>
 800a862:	bd70      	pop	{r4, r5, r6, pc}
 800a864:	f855 3b04 	ldr.w	r3, [r5], #4
 800a868:	4798      	blx	r3
 800a86a:	3601      	adds	r6, #1
 800a86c:	e7ee      	b.n	800a84c <__libc_init_array+0xc>
 800a86e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a872:	4798      	blx	r3
 800a874:	3601      	adds	r6, #1
 800a876:	e7f2      	b.n	800a85e <__libc_init_array+0x1e>
 800a878:	0800b4bc 	.word	0x0800b4bc
 800a87c:	0800b4bc 	.word	0x0800b4bc
 800a880:	0800b4bc 	.word	0x0800b4bc
 800a884:	0800b4c0 	.word	0x0800b4c0

0800a888 <__retarget_lock_init_recursive>:
 800a888:	4770      	bx	lr

0800a88a <__retarget_lock_acquire_recursive>:
 800a88a:	4770      	bx	lr

0800a88c <__retarget_lock_release_recursive>:
 800a88c:	4770      	bx	lr
	...

0800a890 <_free_r>:
 800a890:	b538      	push	{r3, r4, r5, lr}
 800a892:	4605      	mov	r5, r0
 800a894:	2900      	cmp	r1, #0
 800a896:	d041      	beq.n	800a91c <_free_r+0x8c>
 800a898:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a89c:	1f0c      	subs	r4, r1, #4
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	bfb8      	it	lt
 800a8a2:	18e4      	addlt	r4, r4, r3
 800a8a4:	f7ff fe44 	bl	800a530 <__malloc_lock>
 800a8a8:	4a1d      	ldr	r2, [pc, #116]	@ (800a920 <_free_r+0x90>)
 800a8aa:	6813      	ldr	r3, [r2, #0]
 800a8ac:	b933      	cbnz	r3, 800a8bc <_free_r+0x2c>
 800a8ae:	6063      	str	r3, [r4, #4]
 800a8b0:	6014      	str	r4, [r2, #0]
 800a8b2:	4628      	mov	r0, r5
 800a8b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a8b8:	f7ff be40 	b.w	800a53c <__malloc_unlock>
 800a8bc:	42a3      	cmp	r3, r4
 800a8be:	d908      	bls.n	800a8d2 <_free_r+0x42>
 800a8c0:	6820      	ldr	r0, [r4, #0]
 800a8c2:	1821      	adds	r1, r4, r0
 800a8c4:	428b      	cmp	r3, r1
 800a8c6:	bf01      	itttt	eq
 800a8c8:	6819      	ldreq	r1, [r3, #0]
 800a8ca:	685b      	ldreq	r3, [r3, #4]
 800a8cc:	1809      	addeq	r1, r1, r0
 800a8ce:	6021      	streq	r1, [r4, #0]
 800a8d0:	e7ed      	b.n	800a8ae <_free_r+0x1e>
 800a8d2:	461a      	mov	r2, r3
 800a8d4:	685b      	ldr	r3, [r3, #4]
 800a8d6:	b10b      	cbz	r3, 800a8dc <_free_r+0x4c>
 800a8d8:	42a3      	cmp	r3, r4
 800a8da:	d9fa      	bls.n	800a8d2 <_free_r+0x42>
 800a8dc:	6811      	ldr	r1, [r2, #0]
 800a8de:	1850      	adds	r0, r2, r1
 800a8e0:	42a0      	cmp	r0, r4
 800a8e2:	d10b      	bne.n	800a8fc <_free_r+0x6c>
 800a8e4:	6820      	ldr	r0, [r4, #0]
 800a8e6:	4401      	add	r1, r0
 800a8e8:	1850      	adds	r0, r2, r1
 800a8ea:	4283      	cmp	r3, r0
 800a8ec:	6011      	str	r1, [r2, #0]
 800a8ee:	d1e0      	bne.n	800a8b2 <_free_r+0x22>
 800a8f0:	6818      	ldr	r0, [r3, #0]
 800a8f2:	685b      	ldr	r3, [r3, #4]
 800a8f4:	6053      	str	r3, [r2, #4]
 800a8f6:	4408      	add	r0, r1
 800a8f8:	6010      	str	r0, [r2, #0]
 800a8fa:	e7da      	b.n	800a8b2 <_free_r+0x22>
 800a8fc:	d902      	bls.n	800a904 <_free_r+0x74>
 800a8fe:	230c      	movs	r3, #12
 800a900:	602b      	str	r3, [r5, #0]
 800a902:	e7d6      	b.n	800a8b2 <_free_r+0x22>
 800a904:	6820      	ldr	r0, [r4, #0]
 800a906:	1821      	adds	r1, r4, r0
 800a908:	428b      	cmp	r3, r1
 800a90a:	bf04      	itt	eq
 800a90c:	6819      	ldreq	r1, [r3, #0]
 800a90e:	685b      	ldreq	r3, [r3, #4]
 800a910:	6063      	str	r3, [r4, #4]
 800a912:	bf04      	itt	eq
 800a914:	1809      	addeq	r1, r1, r0
 800a916:	6021      	streq	r1, [r4, #0]
 800a918:	6054      	str	r4, [r2, #4]
 800a91a:	e7ca      	b.n	800a8b2 <_free_r+0x22>
 800a91c:	bd38      	pop	{r3, r4, r5, pc}
 800a91e:	bf00      	nop
 800a920:	20000ac0 	.word	0x20000ac0

0800a924 <__sfputc_r>:
 800a924:	6893      	ldr	r3, [r2, #8]
 800a926:	3b01      	subs	r3, #1
 800a928:	2b00      	cmp	r3, #0
 800a92a:	b410      	push	{r4}
 800a92c:	6093      	str	r3, [r2, #8]
 800a92e:	da08      	bge.n	800a942 <__sfputc_r+0x1e>
 800a930:	6994      	ldr	r4, [r2, #24]
 800a932:	42a3      	cmp	r3, r4
 800a934:	db01      	blt.n	800a93a <__sfputc_r+0x16>
 800a936:	290a      	cmp	r1, #10
 800a938:	d103      	bne.n	800a942 <__sfputc_r+0x1e>
 800a93a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a93e:	f000 bb6d 	b.w	800b01c <__swbuf_r>
 800a942:	6813      	ldr	r3, [r2, #0]
 800a944:	1c58      	adds	r0, r3, #1
 800a946:	6010      	str	r0, [r2, #0]
 800a948:	7019      	strb	r1, [r3, #0]
 800a94a:	4608      	mov	r0, r1
 800a94c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a950:	4770      	bx	lr

0800a952 <__sfputs_r>:
 800a952:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a954:	4606      	mov	r6, r0
 800a956:	460f      	mov	r7, r1
 800a958:	4614      	mov	r4, r2
 800a95a:	18d5      	adds	r5, r2, r3
 800a95c:	42ac      	cmp	r4, r5
 800a95e:	d101      	bne.n	800a964 <__sfputs_r+0x12>
 800a960:	2000      	movs	r0, #0
 800a962:	e007      	b.n	800a974 <__sfputs_r+0x22>
 800a964:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a968:	463a      	mov	r2, r7
 800a96a:	4630      	mov	r0, r6
 800a96c:	f7ff ffda 	bl	800a924 <__sfputc_r>
 800a970:	1c43      	adds	r3, r0, #1
 800a972:	d1f3      	bne.n	800a95c <__sfputs_r+0xa>
 800a974:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a978 <_vfiprintf_r>:
 800a978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a97c:	460d      	mov	r5, r1
 800a97e:	b09d      	sub	sp, #116	@ 0x74
 800a980:	4614      	mov	r4, r2
 800a982:	4698      	mov	r8, r3
 800a984:	4606      	mov	r6, r0
 800a986:	b118      	cbz	r0, 800a990 <_vfiprintf_r+0x18>
 800a988:	6a03      	ldr	r3, [r0, #32]
 800a98a:	b90b      	cbnz	r3, 800a990 <_vfiprintf_r+0x18>
 800a98c:	f7ff fe68 	bl	800a660 <__sinit>
 800a990:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a992:	07d9      	lsls	r1, r3, #31
 800a994:	d405      	bmi.n	800a9a2 <_vfiprintf_r+0x2a>
 800a996:	89ab      	ldrh	r3, [r5, #12]
 800a998:	059a      	lsls	r2, r3, #22
 800a99a:	d402      	bmi.n	800a9a2 <_vfiprintf_r+0x2a>
 800a99c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a99e:	f7ff ff74 	bl	800a88a <__retarget_lock_acquire_recursive>
 800a9a2:	89ab      	ldrh	r3, [r5, #12]
 800a9a4:	071b      	lsls	r3, r3, #28
 800a9a6:	d501      	bpl.n	800a9ac <_vfiprintf_r+0x34>
 800a9a8:	692b      	ldr	r3, [r5, #16]
 800a9aa:	b99b      	cbnz	r3, 800a9d4 <_vfiprintf_r+0x5c>
 800a9ac:	4629      	mov	r1, r5
 800a9ae:	4630      	mov	r0, r6
 800a9b0:	f000 fb72 	bl	800b098 <__swsetup_r>
 800a9b4:	b170      	cbz	r0, 800a9d4 <_vfiprintf_r+0x5c>
 800a9b6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a9b8:	07dc      	lsls	r4, r3, #31
 800a9ba:	d504      	bpl.n	800a9c6 <_vfiprintf_r+0x4e>
 800a9bc:	f04f 30ff 	mov.w	r0, #4294967295
 800a9c0:	b01d      	add	sp, #116	@ 0x74
 800a9c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9c6:	89ab      	ldrh	r3, [r5, #12]
 800a9c8:	0598      	lsls	r0, r3, #22
 800a9ca:	d4f7      	bmi.n	800a9bc <_vfiprintf_r+0x44>
 800a9cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a9ce:	f7ff ff5d 	bl	800a88c <__retarget_lock_release_recursive>
 800a9d2:	e7f3      	b.n	800a9bc <_vfiprintf_r+0x44>
 800a9d4:	2300      	movs	r3, #0
 800a9d6:	9309      	str	r3, [sp, #36]	@ 0x24
 800a9d8:	2320      	movs	r3, #32
 800a9da:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a9de:	f8cd 800c 	str.w	r8, [sp, #12]
 800a9e2:	2330      	movs	r3, #48	@ 0x30
 800a9e4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ab94 <_vfiprintf_r+0x21c>
 800a9e8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a9ec:	f04f 0901 	mov.w	r9, #1
 800a9f0:	4623      	mov	r3, r4
 800a9f2:	469a      	mov	sl, r3
 800a9f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a9f8:	b10a      	cbz	r2, 800a9fe <_vfiprintf_r+0x86>
 800a9fa:	2a25      	cmp	r2, #37	@ 0x25
 800a9fc:	d1f9      	bne.n	800a9f2 <_vfiprintf_r+0x7a>
 800a9fe:	ebba 0b04 	subs.w	fp, sl, r4
 800aa02:	d00b      	beq.n	800aa1c <_vfiprintf_r+0xa4>
 800aa04:	465b      	mov	r3, fp
 800aa06:	4622      	mov	r2, r4
 800aa08:	4629      	mov	r1, r5
 800aa0a:	4630      	mov	r0, r6
 800aa0c:	f7ff ffa1 	bl	800a952 <__sfputs_r>
 800aa10:	3001      	adds	r0, #1
 800aa12:	f000 80a7 	beq.w	800ab64 <_vfiprintf_r+0x1ec>
 800aa16:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aa18:	445a      	add	r2, fp
 800aa1a:	9209      	str	r2, [sp, #36]	@ 0x24
 800aa1c:	f89a 3000 	ldrb.w	r3, [sl]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	f000 809f 	beq.w	800ab64 <_vfiprintf_r+0x1ec>
 800aa26:	2300      	movs	r3, #0
 800aa28:	f04f 32ff 	mov.w	r2, #4294967295
 800aa2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aa30:	f10a 0a01 	add.w	sl, sl, #1
 800aa34:	9304      	str	r3, [sp, #16]
 800aa36:	9307      	str	r3, [sp, #28]
 800aa38:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800aa3c:	931a      	str	r3, [sp, #104]	@ 0x68
 800aa3e:	4654      	mov	r4, sl
 800aa40:	2205      	movs	r2, #5
 800aa42:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa46:	4853      	ldr	r0, [pc, #332]	@ (800ab94 <_vfiprintf_r+0x21c>)
 800aa48:	f7f5 fbd2 	bl	80001f0 <memchr>
 800aa4c:	9a04      	ldr	r2, [sp, #16]
 800aa4e:	b9d8      	cbnz	r0, 800aa88 <_vfiprintf_r+0x110>
 800aa50:	06d1      	lsls	r1, r2, #27
 800aa52:	bf44      	itt	mi
 800aa54:	2320      	movmi	r3, #32
 800aa56:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aa5a:	0713      	lsls	r3, r2, #28
 800aa5c:	bf44      	itt	mi
 800aa5e:	232b      	movmi	r3, #43	@ 0x2b
 800aa60:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aa64:	f89a 3000 	ldrb.w	r3, [sl]
 800aa68:	2b2a      	cmp	r3, #42	@ 0x2a
 800aa6a:	d015      	beq.n	800aa98 <_vfiprintf_r+0x120>
 800aa6c:	9a07      	ldr	r2, [sp, #28]
 800aa6e:	4654      	mov	r4, sl
 800aa70:	2000      	movs	r0, #0
 800aa72:	f04f 0c0a 	mov.w	ip, #10
 800aa76:	4621      	mov	r1, r4
 800aa78:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aa7c:	3b30      	subs	r3, #48	@ 0x30
 800aa7e:	2b09      	cmp	r3, #9
 800aa80:	d94b      	bls.n	800ab1a <_vfiprintf_r+0x1a2>
 800aa82:	b1b0      	cbz	r0, 800aab2 <_vfiprintf_r+0x13a>
 800aa84:	9207      	str	r2, [sp, #28]
 800aa86:	e014      	b.n	800aab2 <_vfiprintf_r+0x13a>
 800aa88:	eba0 0308 	sub.w	r3, r0, r8
 800aa8c:	fa09 f303 	lsl.w	r3, r9, r3
 800aa90:	4313      	orrs	r3, r2
 800aa92:	9304      	str	r3, [sp, #16]
 800aa94:	46a2      	mov	sl, r4
 800aa96:	e7d2      	b.n	800aa3e <_vfiprintf_r+0xc6>
 800aa98:	9b03      	ldr	r3, [sp, #12]
 800aa9a:	1d19      	adds	r1, r3, #4
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	9103      	str	r1, [sp, #12]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	bfbb      	ittet	lt
 800aaa4:	425b      	neglt	r3, r3
 800aaa6:	f042 0202 	orrlt.w	r2, r2, #2
 800aaaa:	9307      	strge	r3, [sp, #28]
 800aaac:	9307      	strlt	r3, [sp, #28]
 800aaae:	bfb8      	it	lt
 800aab0:	9204      	strlt	r2, [sp, #16]
 800aab2:	7823      	ldrb	r3, [r4, #0]
 800aab4:	2b2e      	cmp	r3, #46	@ 0x2e
 800aab6:	d10a      	bne.n	800aace <_vfiprintf_r+0x156>
 800aab8:	7863      	ldrb	r3, [r4, #1]
 800aaba:	2b2a      	cmp	r3, #42	@ 0x2a
 800aabc:	d132      	bne.n	800ab24 <_vfiprintf_r+0x1ac>
 800aabe:	9b03      	ldr	r3, [sp, #12]
 800aac0:	1d1a      	adds	r2, r3, #4
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	9203      	str	r2, [sp, #12]
 800aac6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800aaca:	3402      	adds	r4, #2
 800aacc:	9305      	str	r3, [sp, #20]
 800aace:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800aba4 <_vfiprintf_r+0x22c>
 800aad2:	7821      	ldrb	r1, [r4, #0]
 800aad4:	2203      	movs	r2, #3
 800aad6:	4650      	mov	r0, sl
 800aad8:	f7f5 fb8a 	bl	80001f0 <memchr>
 800aadc:	b138      	cbz	r0, 800aaee <_vfiprintf_r+0x176>
 800aade:	9b04      	ldr	r3, [sp, #16]
 800aae0:	eba0 000a 	sub.w	r0, r0, sl
 800aae4:	2240      	movs	r2, #64	@ 0x40
 800aae6:	4082      	lsls	r2, r0
 800aae8:	4313      	orrs	r3, r2
 800aaea:	3401      	adds	r4, #1
 800aaec:	9304      	str	r3, [sp, #16]
 800aaee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aaf2:	4829      	ldr	r0, [pc, #164]	@ (800ab98 <_vfiprintf_r+0x220>)
 800aaf4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800aaf8:	2206      	movs	r2, #6
 800aafa:	f7f5 fb79 	bl	80001f0 <memchr>
 800aafe:	2800      	cmp	r0, #0
 800ab00:	d03f      	beq.n	800ab82 <_vfiprintf_r+0x20a>
 800ab02:	4b26      	ldr	r3, [pc, #152]	@ (800ab9c <_vfiprintf_r+0x224>)
 800ab04:	bb1b      	cbnz	r3, 800ab4e <_vfiprintf_r+0x1d6>
 800ab06:	9b03      	ldr	r3, [sp, #12]
 800ab08:	3307      	adds	r3, #7
 800ab0a:	f023 0307 	bic.w	r3, r3, #7
 800ab0e:	3308      	adds	r3, #8
 800ab10:	9303      	str	r3, [sp, #12]
 800ab12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab14:	443b      	add	r3, r7
 800ab16:	9309      	str	r3, [sp, #36]	@ 0x24
 800ab18:	e76a      	b.n	800a9f0 <_vfiprintf_r+0x78>
 800ab1a:	fb0c 3202 	mla	r2, ip, r2, r3
 800ab1e:	460c      	mov	r4, r1
 800ab20:	2001      	movs	r0, #1
 800ab22:	e7a8      	b.n	800aa76 <_vfiprintf_r+0xfe>
 800ab24:	2300      	movs	r3, #0
 800ab26:	3401      	adds	r4, #1
 800ab28:	9305      	str	r3, [sp, #20]
 800ab2a:	4619      	mov	r1, r3
 800ab2c:	f04f 0c0a 	mov.w	ip, #10
 800ab30:	4620      	mov	r0, r4
 800ab32:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ab36:	3a30      	subs	r2, #48	@ 0x30
 800ab38:	2a09      	cmp	r2, #9
 800ab3a:	d903      	bls.n	800ab44 <_vfiprintf_r+0x1cc>
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d0c6      	beq.n	800aace <_vfiprintf_r+0x156>
 800ab40:	9105      	str	r1, [sp, #20]
 800ab42:	e7c4      	b.n	800aace <_vfiprintf_r+0x156>
 800ab44:	fb0c 2101 	mla	r1, ip, r1, r2
 800ab48:	4604      	mov	r4, r0
 800ab4a:	2301      	movs	r3, #1
 800ab4c:	e7f0      	b.n	800ab30 <_vfiprintf_r+0x1b8>
 800ab4e:	ab03      	add	r3, sp, #12
 800ab50:	9300      	str	r3, [sp, #0]
 800ab52:	462a      	mov	r2, r5
 800ab54:	4b12      	ldr	r3, [pc, #72]	@ (800aba0 <_vfiprintf_r+0x228>)
 800ab56:	a904      	add	r1, sp, #16
 800ab58:	4630      	mov	r0, r6
 800ab5a:	f3af 8000 	nop.w
 800ab5e:	4607      	mov	r7, r0
 800ab60:	1c78      	adds	r0, r7, #1
 800ab62:	d1d6      	bne.n	800ab12 <_vfiprintf_r+0x19a>
 800ab64:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ab66:	07d9      	lsls	r1, r3, #31
 800ab68:	d405      	bmi.n	800ab76 <_vfiprintf_r+0x1fe>
 800ab6a:	89ab      	ldrh	r3, [r5, #12]
 800ab6c:	059a      	lsls	r2, r3, #22
 800ab6e:	d402      	bmi.n	800ab76 <_vfiprintf_r+0x1fe>
 800ab70:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ab72:	f7ff fe8b 	bl	800a88c <__retarget_lock_release_recursive>
 800ab76:	89ab      	ldrh	r3, [r5, #12]
 800ab78:	065b      	lsls	r3, r3, #25
 800ab7a:	f53f af1f 	bmi.w	800a9bc <_vfiprintf_r+0x44>
 800ab7e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ab80:	e71e      	b.n	800a9c0 <_vfiprintf_r+0x48>
 800ab82:	ab03      	add	r3, sp, #12
 800ab84:	9300      	str	r3, [sp, #0]
 800ab86:	462a      	mov	r2, r5
 800ab88:	4b05      	ldr	r3, [pc, #20]	@ (800aba0 <_vfiprintf_r+0x228>)
 800ab8a:	a904      	add	r1, sp, #16
 800ab8c:	4630      	mov	r0, r6
 800ab8e:	f000 f879 	bl	800ac84 <_printf_i>
 800ab92:	e7e4      	b.n	800ab5e <_vfiprintf_r+0x1e6>
 800ab94:	0800b480 	.word	0x0800b480
 800ab98:	0800b48a 	.word	0x0800b48a
 800ab9c:	00000000 	.word	0x00000000
 800aba0:	0800a953 	.word	0x0800a953
 800aba4:	0800b486 	.word	0x0800b486

0800aba8 <_printf_common>:
 800aba8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800abac:	4616      	mov	r6, r2
 800abae:	4698      	mov	r8, r3
 800abb0:	688a      	ldr	r2, [r1, #8]
 800abb2:	690b      	ldr	r3, [r1, #16]
 800abb4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800abb8:	4293      	cmp	r3, r2
 800abba:	bfb8      	it	lt
 800abbc:	4613      	movlt	r3, r2
 800abbe:	6033      	str	r3, [r6, #0]
 800abc0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800abc4:	4607      	mov	r7, r0
 800abc6:	460c      	mov	r4, r1
 800abc8:	b10a      	cbz	r2, 800abce <_printf_common+0x26>
 800abca:	3301      	adds	r3, #1
 800abcc:	6033      	str	r3, [r6, #0]
 800abce:	6823      	ldr	r3, [r4, #0]
 800abd0:	0699      	lsls	r1, r3, #26
 800abd2:	bf42      	ittt	mi
 800abd4:	6833      	ldrmi	r3, [r6, #0]
 800abd6:	3302      	addmi	r3, #2
 800abd8:	6033      	strmi	r3, [r6, #0]
 800abda:	6825      	ldr	r5, [r4, #0]
 800abdc:	f015 0506 	ands.w	r5, r5, #6
 800abe0:	d106      	bne.n	800abf0 <_printf_common+0x48>
 800abe2:	f104 0a19 	add.w	sl, r4, #25
 800abe6:	68e3      	ldr	r3, [r4, #12]
 800abe8:	6832      	ldr	r2, [r6, #0]
 800abea:	1a9b      	subs	r3, r3, r2
 800abec:	42ab      	cmp	r3, r5
 800abee:	dc26      	bgt.n	800ac3e <_printf_common+0x96>
 800abf0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800abf4:	6822      	ldr	r2, [r4, #0]
 800abf6:	3b00      	subs	r3, #0
 800abf8:	bf18      	it	ne
 800abfa:	2301      	movne	r3, #1
 800abfc:	0692      	lsls	r2, r2, #26
 800abfe:	d42b      	bmi.n	800ac58 <_printf_common+0xb0>
 800ac00:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ac04:	4641      	mov	r1, r8
 800ac06:	4638      	mov	r0, r7
 800ac08:	47c8      	blx	r9
 800ac0a:	3001      	adds	r0, #1
 800ac0c:	d01e      	beq.n	800ac4c <_printf_common+0xa4>
 800ac0e:	6823      	ldr	r3, [r4, #0]
 800ac10:	6922      	ldr	r2, [r4, #16]
 800ac12:	f003 0306 	and.w	r3, r3, #6
 800ac16:	2b04      	cmp	r3, #4
 800ac18:	bf02      	ittt	eq
 800ac1a:	68e5      	ldreq	r5, [r4, #12]
 800ac1c:	6833      	ldreq	r3, [r6, #0]
 800ac1e:	1aed      	subeq	r5, r5, r3
 800ac20:	68a3      	ldr	r3, [r4, #8]
 800ac22:	bf0c      	ite	eq
 800ac24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ac28:	2500      	movne	r5, #0
 800ac2a:	4293      	cmp	r3, r2
 800ac2c:	bfc4      	itt	gt
 800ac2e:	1a9b      	subgt	r3, r3, r2
 800ac30:	18ed      	addgt	r5, r5, r3
 800ac32:	2600      	movs	r6, #0
 800ac34:	341a      	adds	r4, #26
 800ac36:	42b5      	cmp	r5, r6
 800ac38:	d11a      	bne.n	800ac70 <_printf_common+0xc8>
 800ac3a:	2000      	movs	r0, #0
 800ac3c:	e008      	b.n	800ac50 <_printf_common+0xa8>
 800ac3e:	2301      	movs	r3, #1
 800ac40:	4652      	mov	r2, sl
 800ac42:	4641      	mov	r1, r8
 800ac44:	4638      	mov	r0, r7
 800ac46:	47c8      	blx	r9
 800ac48:	3001      	adds	r0, #1
 800ac4a:	d103      	bne.n	800ac54 <_printf_common+0xac>
 800ac4c:	f04f 30ff 	mov.w	r0, #4294967295
 800ac50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac54:	3501      	adds	r5, #1
 800ac56:	e7c6      	b.n	800abe6 <_printf_common+0x3e>
 800ac58:	18e1      	adds	r1, r4, r3
 800ac5a:	1c5a      	adds	r2, r3, #1
 800ac5c:	2030      	movs	r0, #48	@ 0x30
 800ac5e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ac62:	4422      	add	r2, r4
 800ac64:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ac68:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ac6c:	3302      	adds	r3, #2
 800ac6e:	e7c7      	b.n	800ac00 <_printf_common+0x58>
 800ac70:	2301      	movs	r3, #1
 800ac72:	4622      	mov	r2, r4
 800ac74:	4641      	mov	r1, r8
 800ac76:	4638      	mov	r0, r7
 800ac78:	47c8      	blx	r9
 800ac7a:	3001      	adds	r0, #1
 800ac7c:	d0e6      	beq.n	800ac4c <_printf_common+0xa4>
 800ac7e:	3601      	adds	r6, #1
 800ac80:	e7d9      	b.n	800ac36 <_printf_common+0x8e>
	...

0800ac84 <_printf_i>:
 800ac84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ac88:	7e0f      	ldrb	r7, [r1, #24]
 800ac8a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ac8c:	2f78      	cmp	r7, #120	@ 0x78
 800ac8e:	4691      	mov	r9, r2
 800ac90:	4680      	mov	r8, r0
 800ac92:	460c      	mov	r4, r1
 800ac94:	469a      	mov	sl, r3
 800ac96:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ac9a:	d807      	bhi.n	800acac <_printf_i+0x28>
 800ac9c:	2f62      	cmp	r7, #98	@ 0x62
 800ac9e:	d80a      	bhi.n	800acb6 <_printf_i+0x32>
 800aca0:	2f00      	cmp	r7, #0
 800aca2:	f000 80d2 	beq.w	800ae4a <_printf_i+0x1c6>
 800aca6:	2f58      	cmp	r7, #88	@ 0x58
 800aca8:	f000 80b9 	beq.w	800ae1e <_printf_i+0x19a>
 800acac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800acb0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800acb4:	e03a      	b.n	800ad2c <_printf_i+0xa8>
 800acb6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800acba:	2b15      	cmp	r3, #21
 800acbc:	d8f6      	bhi.n	800acac <_printf_i+0x28>
 800acbe:	a101      	add	r1, pc, #4	@ (adr r1, 800acc4 <_printf_i+0x40>)
 800acc0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800acc4:	0800ad1d 	.word	0x0800ad1d
 800acc8:	0800ad31 	.word	0x0800ad31
 800accc:	0800acad 	.word	0x0800acad
 800acd0:	0800acad 	.word	0x0800acad
 800acd4:	0800acad 	.word	0x0800acad
 800acd8:	0800acad 	.word	0x0800acad
 800acdc:	0800ad31 	.word	0x0800ad31
 800ace0:	0800acad 	.word	0x0800acad
 800ace4:	0800acad 	.word	0x0800acad
 800ace8:	0800acad 	.word	0x0800acad
 800acec:	0800acad 	.word	0x0800acad
 800acf0:	0800ae31 	.word	0x0800ae31
 800acf4:	0800ad5b 	.word	0x0800ad5b
 800acf8:	0800adeb 	.word	0x0800adeb
 800acfc:	0800acad 	.word	0x0800acad
 800ad00:	0800acad 	.word	0x0800acad
 800ad04:	0800ae53 	.word	0x0800ae53
 800ad08:	0800acad 	.word	0x0800acad
 800ad0c:	0800ad5b 	.word	0x0800ad5b
 800ad10:	0800acad 	.word	0x0800acad
 800ad14:	0800acad 	.word	0x0800acad
 800ad18:	0800adf3 	.word	0x0800adf3
 800ad1c:	6833      	ldr	r3, [r6, #0]
 800ad1e:	1d1a      	adds	r2, r3, #4
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	6032      	str	r2, [r6, #0]
 800ad24:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ad28:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ad2c:	2301      	movs	r3, #1
 800ad2e:	e09d      	b.n	800ae6c <_printf_i+0x1e8>
 800ad30:	6833      	ldr	r3, [r6, #0]
 800ad32:	6820      	ldr	r0, [r4, #0]
 800ad34:	1d19      	adds	r1, r3, #4
 800ad36:	6031      	str	r1, [r6, #0]
 800ad38:	0606      	lsls	r6, r0, #24
 800ad3a:	d501      	bpl.n	800ad40 <_printf_i+0xbc>
 800ad3c:	681d      	ldr	r5, [r3, #0]
 800ad3e:	e003      	b.n	800ad48 <_printf_i+0xc4>
 800ad40:	0645      	lsls	r5, r0, #25
 800ad42:	d5fb      	bpl.n	800ad3c <_printf_i+0xb8>
 800ad44:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ad48:	2d00      	cmp	r5, #0
 800ad4a:	da03      	bge.n	800ad54 <_printf_i+0xd0>
 800ad4c:	232d      	movs	r3, #45	@ 0x2d
 800ad4e:	426d      	negs	r5, r5
 800ad50:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ad54:	4859      	ldr	r0, [pc, #356]	@ (800aebc <_printf_i+0x238>)
 800ad56:	230a      	movs	r3, #10
 800ad58:	e011      	b.n	800ad7e <_printf_i+0xfa>
 800ad5a:	6821      	ldr	r1, [r4, #0]
 800ad5c:	6833      	ldr	r3, [r6, #0]
 800ad5e:	0608      	lsls	r0, r1, #24
 800ad60:	f853 5b04 	ldr.w	r5, [r3], #4
 800ad64:	d402      	bmi.n	800ad6c <_printf_i+0xe8>
 800ad66:	0649      	lsls	r1, r1, #25
 800ad68:	bf48      	it	mi
 800ad6a:	b2ad      	uxthmi	r5, r5
 800ad6c:	2f6f      	cmp	r7, #111	@ 0x6f
 800ad6e:	4853      	ldr	r0, [pc, #332]	@ (800aebc <_printf_i+0x238>)
 800ad70:	6033      	str	r3, [r6, #0]
 800ad72:	bf14      	ite	ne
 800ad74:	230a      	movne	r3, #10
 800ad76:	2308      	moveq	r3, #8
 800ad78:	2100      	movs	r1, #0
 800ad7a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ad7e:	6866      	ldr	r6, [r4, #4]
 800ad80:	60a6      	str	r6, [r4, #8]
 800ad82:	2e00      	cmp	r6, #0
 800ad84:	bfa2      	ittt	ge
 800ad86:	6821      	ldrge	r1, [r4, #0]
 800ad88:	f021 0104 	bicge.w	r1, r1, #4
 800ad8c:	6021      	strge	r1, [r4, #0]
 800ad8e:	b90d      	cbnz	r5, 800ad94 <_printf_i+0x110>
 800ad90:	2e00      	cmp	r6, #0
 800ad92:	d04b      	beq.n	800ae2c <_printf_i+0x1a8>
 800ad94:	4616      	mov	r6, r2
 800ad96:	fbb5 f1f3 	udiv	r1, r5, r3
 800ad9a:	fb03 5711 	mls	r7, r3, r1, r5
 800ad9e:	5dc7      	ldrb	r7, [r0, r7]
 800ada0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ada4:	462f      	mov	r7, r5
 800ada6:	42bb      	cmp	r3, r7
 800ada8:	460d      	mov	r5, r1
 800adaa:	d9f4      	bls.n	800ad96 <_printf_i+0x112>
 800adac:	2b08      	cmp	r3, #8
 800adae:	d10b      	bne.n	800adc8 <_printf_i+0x144>
 800adb0:	6823      	ldr	r3, [r4, #0]
 800adb2:	07df      	lsls	r7, r3, #31
 800adb4:	d508      	bpl.n	800adc8 <_printf_i+0x144>
 800adb6:	6923      	ldr	r3, [r4, #16]
 800adb8:	6861      	ldr	r1, [r4, #4]
 800adba:	4299      	cmp	r1, r3
 800adbc:	bfde      	ittt	le
 800adbe:	2330      	movle	r3, #48	@ 0x30
 800adc0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800adc4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800adc8:	1b92      	subs	r2, r2, r6
 800adca:	6122      	str	r2, [r4, #16]
 800adcc:	f8cd a000 	str.w	sl, [sp]
 800add0:	464b      	mov	r3, r9
 800add2:	aa03      	add	r2, sp, #12
 800add4:	4621      	mov	r1, r4
 800add6:	4640      	mov	r0, r8
 800add8:	f7ff fee6 	bl	800aba8 <_printf_common>
 800addc:	3001      	adds	r0, #1
 800adde:	d14a      	bne.n	800ae76 <_printf_i+0x1f2>
 800ade0:	f04f 30ff 	mov.w	r0, #4294967295
 800ade4:	b004      	add	sp, #16
 800ade6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800adea:	6823      	ldr	r3, [r4, #0]
 800adec:	f043 0320 	orr.w	r3, r3, #32
 800adf0:	6023      	str	r3, [r4, #0]
 800adf2:	4833      	ldr	r0, [pc, #204]	@ (800aec0 <_printf_i+0x23c>)
 800adf4:	2778      	movs	r7, #120	@ 0x78
 800adf6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800adfa:	6823      	ldr	r3, [r4, #0]
 800adfc:	6831      	ldr	r1, [r6, #0]
 800adfe:	061f      	lsls	r7, r3, #24
 800ae00:	f851 5b04 	ldr.w	r5, [r1], #4
 800ae04:	d402      	bmi.n	800ae0c <_printf_i+0x188>
 800ae06:	065f      	lsls	r7, r3, #25
 800ae08:	bf48      	it	mi
 800ae0a:	b2ad      	uxthmi	r5, r5
 800ae0c:	6031      	str	r1, [r6, #0]
 800ae0e:	07d9      	lsls	r1, r3, #31
 800ae10:	bf44      	itt	mi
 800ae12:	f043 0320 	orrmi.w	r3, r3, #32
 800ae16:	6023      	strmi	r3, [r4, #0]
 800ae18:	b11d      	cbz	r5, 800ae22 <_printf_i+0x19e>
 800ae1a:	2310      	movs	r3, #16
 800ae1c:	e7ac      	b.n	800ad78 <_printf_i+0xf4>
 800ae1e:	4827      	ldr	r0, [pc, #156]	@ (800aebc <_printf_i+0x238>)
 800ae20:	e7e9      	b.n	800adf6 <_printf_i+0x172>
 800ae22:	6823      	ldr	r3, [r4, #0]
 800ae24:	f023 0320 	bic.w	r3, r3, #32
 800ae28:	6023      	str	r3, [r4, #0]
 800ae2a:	e7f6      	b.n	800ae1a <_printf_i+0x196>
 800ae2c:	4616      	mov	r6, r2
 800ae2e:	e7bd      	b.n	800adac <_printf_i+0x128>
 800ae30:	6833      	ldr	r3, [r6, #0]
 800ae32:	6825      	ldr	r5, [r4, #0]
 800ae34:	6961      	ldr	r1, [r4, #20]
 800ae36:	1d18      	adds	r0, r3, #4
 800ae38:	6030      	str	r0, [r6, #0]
 800ae3a:	062e      	lsls	r6, r5, #24
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	d501      	bpl.n	800ae44 <_printf_i+0x1c0>
 800ae40:	6019      	str	r1, [r3, #0]
 800ae42:	e002      	b.n	800ae4a <_printf_i+0x1c6>
 800ae44:	0668      	lsls	r0, r5, #25
 800ae46:	d5fb      	bpl.n	800ae40 <_printf_i+0x1bc>
 800ae48:	8019      	strh	r1, [r3, #0]
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	6123      	str	r3, [r4, #16]
 800ae4e:	4616      	mov	r6, r2
 800ae50:	e7bc      	b.n	800adcc <_printf_i+0x148>
 800ae52:	6833      	ldr	r3, [r6, #0]
 800ae54:	1d1a      	adds	r2, r3, #4
 800ae56:	6032      	str	r2, [r6, #0]
 800ae58:	681e      	ldr	r6, [r3, #0]
 800ae5a:	6862      	ldr	r2, [r4, #4]
 800ae5c:	2100      	movs	r1, #0
 800ae5e:	4630      	mov	r0, r6
 800ae60:	f7f5 f9c6 	bl	80001f0 <memchr>
 800ae64:	b108      	cbz	r0, 800ae6a <_printf_i+0x1e6>
 800ae66:	1b80      	subs	r0, r0, r6
 800ae68:	6060      	str	r0, [r4, #4]
 800ae6a:	6863      	ldr	r3, [r4, #4]
 800ae6c:	6123      	str	r3, [r4, #16]
 800ae6e:	2300      	movs	r3, #0
 800ae70:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ae74:	e7aa      	b.n	800adcc <_printf_i+0x148>
 800ae76:	6923      	ldr	r3, [r4, #16]
 800ae78:	4632      	mov	r2, r6
 800ae7a:	4649      	mov	r1, r9
 800ae7c:	4640      	mov	r0, r8
 800ae7e:	47d0      	blx	sl
 800ae80:	3001      	adds	r0, #1
 800ae82:	d0ad      	beq.n	800ade0 <_printf_i+0x15c>
 800ae84:	6823      	ldr	r3, [r4, #0]
 800ae86:	079b      	lsls	r3, r3, #30
 800ae88:	d413      	bmi.n	800aeb2 <_printf_i+0x22e>
 800ae8a:	68e0      	ldr	r0, [r4, #12]
 800ae8c:	9b03      	ldr	r3, [sp, #12]
 800ae8e:	4298      	cmp	r0, r3
 800ae90:	bfb8      	it	lt
 800ae92:	4618      	movlt	r0, r3
 800ae94:	e7a6      	b.n	800ade4 <_printf_i+0x160>
 800ae96:	2301      	movs	r3, #1
 800ae98:	4632      	mov	r2, r6
 800ae9a:	4649      	mov	r1, r9
 800ae9c:	4640      	mov	r0, r8
 800ae9e:	47d0      	blx	sl
 800aea0:	3001      	adds	r0, #1
 800aea2:	d09d      	beq.n	800ade0 <_printf_i+0x15c>
 800aea4:	3501      	adds	r5, #1
 800aea6:	68e3      	ldr	r3, [r4, #12]
 800aea8:	9903      	ldr	r1, [sp, #12]
 800aeaa:	1a5b      	subs	r3, r3, r1
 800aeac:	42ab      	cmp	r3, r5
 800aeae:	dcf2      	bgt.n	800ae96 <_printf_i+0x212>
 800aeb0:	e7eb      	b.n	800ae8a <_printf_i+0x206>
 800aeb2:	2500      	movs	r5, #0
 800aeb4:	f104 0619 	add.w	r6, r4, #25
 800aeb8:	e7f5      	b.n	800aea6 <_printf_i+0x222>
 800aeba:	bf00      	nop
 800aebc:	0800b491 	.word	0x0800b491
 800aec0:	0800b4a2 	.word	0x0800b4a2

0800aec4 <__sflush_r>:
 800aec4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800aec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aecc:	0716      	lsls	r6, r2, #28
 800aece:	4605      	mov	r5, r0
 800aed0:	460c      	mov	r4, r1
 800aed2:	d454      	bmi.n	800af7e <__sflush_r+0xba>
 800aed4:	684b      	ldr	r3, [r1, #4]
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	dc02      	bgt.n	800aee0 <__sflush_r+0x1c>
 800aeda:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800aedc:	2b00      	cmp	r3, #0
 800aede:	dd48      	ble.n	800af72 <__sflush_r+0xae>
 800aee0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800aee2:	2e00      	cmp	r6, #0
 800aee4:	d045      	beq.n	800af72 <__sflush_r+0xae>
 800aee6:	2300      	movs	r3, #0
 800aee8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800aeec:	682f      	ldr	r7, [r5, #0]
 800aeee:	6a21      	ldr	r1, [r4, #32]
 800aef0:	602b      	str	r3, [r5, #0]
 800aef2:	d030      	beq.n	800af56 <__sflush_r+0x92>
 800aef4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800aef6:	89a3      	ldrh	r3, [r4, #12]
 800aef8:	0759      	lsls	r1, r3, #29
 800aefa:	d505      	bpl.n	800af08 <__sflush_r+0x44>
 800aefc:	6863      	ldr	r3, [r4, #4]
 800aefe:	1ad2      	subs	r2, r2, r3
 800af00:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800af02:	b10b      	cbz	r3, 800af08 <__sflush_r+0x44>
 800af04:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800af06:	1ad2      	subs	r2, r2, r3
 800af08:	2300      	movs	r3, #0
 800af0a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800af0c:	6a21      	ldr	r1, [r4, #32]
 800af0e:	4628      	mov	r0, r5
 800af10:	47b0      	blx	r6
 800af12:	1c43      	adds	r3, r0, #1
 800af14:	89a3      	ldrh	r3, [r4, #12]
 800af16:	d106      	bne.n	800af26 <__sflush_r+0x62>
 800af18:	6829      	ldr	r1, [r5, #0]
 800af1a:	291d      	cmp	r1, #29
 800af1c:	d82b      	bhi.n	800af76 <__sflush_r+0xb2>
 800af1e:	4a2a      	ldr	r2, [pc, #168]	@ (800afc8 <__sflush_r+0x104>)
 800af20:	410a      	asrs	r2, r1
 800af22:	07d6      	lsls	r6, r2, #31
 800af24:	d427      	bmi.n	800af76 <__sflush_r+0xb2>
 800af26:	2200      	movs	r2, #0
 800af28:	6062      	str	r2, [r4, #4]
 800af2a:	04d9      	lsls	r1, r3, #19
 800af2c:	6922      	ldr	r2, [r4, #16]
 800af2e:	6022      	str	r2, [r4, #0]
 800af30:	d504      	bpl.n	800af3c <__sflush_r+0x78>
 800af32:	1c42      	adds	r2, r0, #1
 800af34:	d101      	bne.n	800af3a <__sflush_r+0x76>
 800af36:	682b      	ldr	r3, [r5, #0]
 800af38:	b903      	cbnz	r3, 800af3c <__sflush_r+0x78>
 800af3a:	6560      	str	r0, [r4, #84]	@ 0x54
 800af3c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800af3e:	602f      	str	r7, [r5, #0]
 800af40:	b1b9      	cbz	r1, 800af72 <__sflush_r+0xae>
 800af42:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800af46:	4299      	cmp	r1, r3
 800af48:	d002      	beq.n	800af50 <__sflush_r+0x8c>
 800af4a:	4628      	mov	r0, r5
 800af4c:	f7ff fca0 	bl	800a890 <_free_r>
 800af50:	2300      	movs	r3, #0
 800af52:	6363      	str	r3, [r4, #52]	@ 0x34
 800af54:	e00d      	b.n	800af72 <__sflush_r+0xae>
 800af56:	2301      	movs	r3, #1
 800af58:	4628      	mov	r0, r5
 800af5a:	47b0      	blx	r6
 800af5c:	4602      	mov	r2, r0
 800af5e:	1c50      	adds	r0, r2, #1
 800af60:	d1c9      	bne.n	800aef6 <__sflush_r+0x32>
 800af62:	682b      	ldr	r3, [r5, #0]
 800af64:	2b00      	cmp	r3, #0
 800af66:	d0c6      	beq.n	800aef6 <__sflush_r+0x32>
 800af68:	2b1d      	cmp	r3, #29
 800af6a:	d001      	beq.n	800af70 <__sflush_r+0xac>
 800af6c:	2b16      	cmp	r3, #22
 800af6e:	d11e      	bne.n	800afae <__sflush_r+0xea>
 800af70:	602f      	str	r7, [r5, #0]
 800af72:	2000      	movs	r0, #0
 800af74:	e022      	b.n	800afbc <__sflush_r+0xf8>
 800af76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800af7a:	b21b      	sxth	r3, r3
 800af7c:	e01b      	b.n	800afb6 <__sflush_r+0xf2>
 800af7e:	690f      	ldr	r7, [r1, #16]
 800af80:	2f00      	cmp	r7, #0
 800af82:	d0f6      	beq.n	800af72 <__sflush_r+0xae>
 800af84:	0793      	lsls	r3, r2, #30
 800af86:	680e      	ldr	r6, [r1, #0]
 800af88:	bf08      	it	eq
 800af8a:	694b      	ldreq	r3, [r1, #20]
 800af8c:	600f      	str	r7, [r1, #0]
 800af8e:	bf18      	it	ne
 800af90:	2300      	movne	r3, #0
 800af92:	eba6 0807 	sub.w	r8, r6, r7
 800af96:	608b      	str	r3, [r1, #8]
 800af98:	f1b8 0f00 	cmp.w	r8, #0
 800af9c:	dde9      	ble.n	800af72 <__sflush_r+0xae>
 800af9e:	6a21      	ldr	r1, [r4, #32]
 800afa0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800afa2:	4643      	mov	r3, r8
 800afa4:	463a      	mov	r2, r7
 800afa6:	4628      	mov	r0, r5
 800afa8:	47b0      	blx	r6
 800afaa:	2800      	cmp	r0, #0
 800afac:	dc08      	bgt.n	800afc0 <__sflush_r+0xfc>
 800afae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800afb2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800afb6:	81a3      	strh	r3, [r4, #12]
 800afb8:	f04f 30ff 	mov.w	r0, #4294967295
 800afbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800afc0:	4407      	add	r7, r0
 800afc2:	eba8 0800 	sub.w	r8, r8, r0
 800afc6:	e7e7      	b.n	800af98 <__sflush_r+0xd4>
 800afc8:	dfbffffe 	.word	0xdfbffffe

0800afcc <_fflush_r>:
 800afcc:	b538      	push	{r3, r4, r5, lr}
 800afce:	690b      	ldr	r3, [r1, #16]
 800afd0:	4605      	mov	r5, r0
 800afd2:	460c      	mov	r4, r1
 800afd4:	b913      	cbnz	r3, 800afdc <_fflush_r+0x10>
 800afd6:	2500      	movs	r5, #0
 800afd8:	4628      	mov	r0, r5
 800afda:	bd38      	pop	{r3, r4, r5, pc}
 800afdc:	b118      	cbz	r0, 800afe6 <_fflush_r+0x1a>
 800afde:	6a03      	ldr	r3, [r0, #32]
 800afe0:	b90b      	cbnz	r3, 800afe6 <_fflush_r+0x1a>
 800afe2:	f7ff fb3d 	bl	800a660 <__sinit>
 800afe6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800afea:	2b00      	cmp	r3, #0
 800afec:	d0f3      	beq.n	800afd6 <_fflush_r+0xa>
 800afee:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800aff0:	07d0      	lsls	r0, r2, #31
 800aff2:	d404      	bmi.n	800affe <_fflush_r+0x32>
 800aff4:	0599      	lsls	r1, r3, #22
 800aff6:	d402      	bmi.n	800affe <_fflush_r+0x32>
 800aff8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800affa:	f7ff fc46 	bl	800a88a <__retarget_lock_acquire_recursive>
 800affe:	4628      	mov	r0, r5
 800b000:	4621      	mov	r1, r4
 800b002:	f7ff ff5f 	bl	800aec4 <__sflush_r>
 800b006:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b008:	07da      	lsls	r2, r3, #31
 800b00a:	4605      	mov	r5, r0
 800b00c:	d4e4      	bmi.n	800afd8 <_fflush_r+0xc>
 800b00e:	89a3      	ldrh	r3, [r4, #12]
 800b010:	059b      	lsls	r3, r3, #22
 800b012:	d4e1      	bmi.n	800afd8 <_fflush_r+0xc>
 800b014:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b016:	f7ff fc39 	bl	800a88c <__retarget_lock_release_recursive>
 800b01a:	e7dd      	b.n	800afd8 <_fflush_r+0xc>

0800b01c <__swbuf_r>:
 800b01c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b01e:	460e      	mov	r6, r1
 800b020:	4614      	mov	r4, r2
 800b022:	4605      	mov	r5, r0
 800b024:	b118      	cbz	r0, 800b02e <__swbuf_r+0x12>
 800b026:	6a03      	ldr	r3, [r0, #32]
 800b028:	b90b      	cbnz	r3, 800b02e <__swbuf_r+0x12>
 800b02a:	f7ff fb19 	bl	800a660 <__sinit>
 800b02e:	69a3      	ldr	r3, [r4, #24]
 800b030:	60a3      	str	r3, [r4, #8]
 800b032:	89a3      	ldrh	r3, [r4, #12]
 800b034:	071a      	lsls	r2, r3, #28
 800b036:	d501      	bpl.n	800b03c <__swbuf_r+0x20>
 800b038:	6923      	ldr	r3, [r4, #16]
 800b03a:	b943      	cbnz	r3, 800b04e <__swbuf_r+0x32>
 800b03c:	4621      	mov	r1, r4
 800b03e:	4628      	mov	r0, r5
 800b040:	f000 f82a 	bl	800b098 <__swsetup_r>
 800b044:	b118      	cbz	r0, 800b04e <__swbuf_r+0x32>
 800b046:	f04f 37ff 	mov.w	r7, #4294967295
 800b04a:	4638      	mov	r0, r7
 800b04c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b04e:	6823      	ldr	r3, [r4, #0]
 800b050:	6922      	ldr	r2, [r4, #16]
 800b052:	1a98      	subs	r0, r3, r2
 800b054:	6963      	ldr	r3, [r4, #20]
 800b056:	b2f6      	uxtb	r6, r6
 800b058:	4283      	cmp	r3, r0
 800b05a:	4637      	mov	r7, r6
 800b05c:	dc05      	bgt.n	800b06a <__swbuf_r+0x4e>
 800b05e:	4621      	mov	r1, r4
 800b060:	4628      	mov	r0, r5
 800b062:	f7ff ffb3 	bl	800afcc <_fflush_r>
 800b066:	2800      	cmp	r0, #0
 800b068:	d1ed      	bne.n	800b046 <__swbuf_r+0x2a>
 800b06a:	68a3      	ldr	r3, [r4, #8]
 800b06c:	3b01      	subs	r3, #1
 800b06e:	60a3      	str	r3, [r4, #8]
 800b070:	6823      	ldr	r3, [r4, #0]
 800b072:	1c5a      	adds	r2, r3, #1
 800b074:	6022      	str	r2, [r4, #0]
 800b076:	701e      	strb	r6, [r3, #0]
 800b078:	6962      	ldr	r2, [r4, #20]
 800b07a:	1c43      	adds	r3, r0, #1
 800b07c:	429a      	cmp	r2, r3
 800b07e:	d004      	beq.n	800b08a <__swbuf_r+0x6e>
 800b080:	89a3      	ldrh	r3, [r4, #12]
 800b082:	07db      	lsls	r3, r3, #31
 800b084:	d5e1      	bpl.n	800b04a <__swbuf_r+0x2e>
 800b086:	2e0a      	cmp	r6, #10
 800b088:	d1df      	bne.n	800b04a <__swbuf_r+0x2e>
 800b08a:	4621      	mov	r1, r4
 800b08c:	4628      	mov	r0, r5
 800b08e:	f7ff ff9d 	bl	800afcc <_fflush_r>
 800b092:	2800      	cmp	r0, #0
 800b094:	d0d9      	beq.n	800b04a <__swbuf_r+0x2e>
 800b096:	e7d6      	b.n	800b046 <__swbuf_r+0x2a>

0800b098 <__swsetup_r>:
 800b098:	b538      	push	{r3, r4, r5, lr}
 800b09a:	4b29      	ldr	r3, [pc, #164]	@ (800b140 <__swsetup_r+0xa8>)
 800b09c:	4605      	mov	r5, r0
 800b09e:	6818      	ldr	r0, [r3, #0]
 800b0a0:	460c      	mov	r4, r1
 800b0a2:	b118      	cbz	r0, 800b0ac <__swsetup_r+0x14>
 800b0a4:	6a03      	ldr	r3, [r0, #32]
 800b0a6:	b90b      	cbnz	r3, 800b0ac <__swsetup_r+0x14>
 800b0a8:	f7ff fada 	bl	800a660 <__sinit>
 800b0ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b0b0:	0719      	lsls	r1, r3, #28
 800b0b2:	d422      	bmi.n	800b0fa <__swsetup_r+0x62>
 800b0b4:	06da      	lsls	r2, r3, #27
 800b0b6:	d407      	bmi.n	800b0c8 <__swsetup_r+0x30>
 800b0b8:	2209      	movs	r2, #9
 800b0ba:	602a      	str	r2, [r5, #0]
 800b0bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b0c0:	81a3      	strh	r3, [r4, #12]
 800b0c2:	f04f 30ff 	mov.w	r0, #4294967295
 800b0c6:	e033      	b.n	800b130 <__swsetup_r+0x98>
 800b0c8:	0758      	lsls	r0, r3, #29
 800b0ca:	d512      	bpl.n	800b0f2 <__swsetup_r+0x5a>
 800b0cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b0ce:	b141      	cbz	r1, 800b0e2 <__swsetup_r+0x4a>
 800b0d0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b0d4:	4299      	cmp	r1, r3
 800b0d6:	d002      	beq.n	800b0de <__swsetup_r+0x46>
 800b0d8:	4628      	mov	r0, r5
 800b0da:	f7ff fbd9 	bl	800a890 <_free_r>
 800b0de:	2300      	movs	r3, #0
 800b0e0:	6363      	str	r3, [r4, #52]	@ 0x34
 800b0e2:	89a3      	ldrh	r3, [r4, #12]
 800b0e4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b0e8:	81a3      	strh	r3, [r4, #12]
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	6063      	str	r3, [r4, #4]
 800b0ee:	6923      	ldr	r3, [r4, #16]
 800b0f0:	6023      	str	r3, [r4, #0]
 800b0f2:	89a3      	ldrh	r3, [r4, #12]
 800b0f4:	f043 0308 	orr.w	r3, r3, #8
 800b0f8:	81a3      	strh	r3, [r4, #12]
 800b0fa:	6923      	ldr	r3, [r4, #16]
 800b0fc:	b94b      	cbnz	r3, 800b112 <__swsetup_r+0x7a>
 800b0fe:	89a3      	ldrh	r3, [r4, #12]
 800b100:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b104:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b108:	d003      	beq.n	800b112 <__swsetup_r+0x7a>
 800b10a:	4621      	mov	r1, r4
 800b10c:	4628      	mov	r0, r5
 800b10e:	f000 f83f 	bl	800b190 <__smakebuf_r>
 800b112:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b116:	f013 0201 	ands.w	r2, r3, #1
 800b11a:	d00a      	beq.n	800b132 <__swsetup_r+0x9a>
 800b11c:	2200      	movs	r2, #0
 800b11e:	60a2      	str	r2, [r4, #8]
 800b120:	6962      	ldr	r2, [r4, #20]
 800b122:	4252      	negs	r2, r2
 800b124:	61a2      	str	r2, [r4, #24]
 800b126:	6922      	ldr	r2, [r4, #16]
 800b128:	b942      	cbnz	r2, 800b13c <__swsetup_r+0xa4>
 800b12a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b12e:	d1c5      	bne.n	800b0bc <__swsetup_r+0x24>
 800b130:	bd38      	pop	{r3, r4, r5, pc}
 800b132:	0799      	lsls	r1, r3, #30
 800b134:	bf58      	it	pl
 800b136:	6962      	ldrpl	r2, [r4, #20]
 800b138:	60a2      	str	r2, [r4, #8]
 800b13a:	e7f4      	b.n	800b126 <__swsetup_r+0x8e>
 800b13c:	2000      	movs	r0, #0
 800b13e:	e7f7      	b.n	800b130 <__swsetup_r+0x98>
 800b140:	20000038 	.word	0x20000038

0800b144 <__swhatbuf_r>:
 800b144:	b570      	push	{r4, r5, r6, lr}
 800b146:	460c      	mov	r4, r1
 800b148:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b14c:	2900      	cmp	r1, #0
 800b14e:	b096      	sub	sp, #88	@ 0x58
 800b150:	4615      	mov	r5, r2
 800b152:	461e      	mov	r6, r3
 800b154:	da0d      	bge.n	800b172 <__swhatbuf_r+0x2e>
 800b156:	89a3      	ldrh	r3, [r4, #12]
 800b158:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b15c:	f04f 0100 	mov.w	r1, #0
 800b160:	bf14      	ite	ne
 800b162:	2340      	movne	r3, #64	@ 0x40
 800b164:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b168:	2000      	movs	r0, #0
 800b16a:	6031      	str	r1, [r6, #0]
 800b16c:	602b      	str	r3, [r5, #0]
 800b16e:	b016      	add	sp, #88	@ 0x58
 800b170:	bd70      	pop	{r4, r5, r6, pc}
 800b172:	466a      	mov	r2, sp
 800b174:	f000 f848 	bl	800b208 <_fstat_r>
 800b178:	2800      	cmp	r0, #0
 800b17a:	dbec      	blt.n	800b156 <__swhatbuf_r+0x12>
 800b17c:	9901      	ldr	r1, [sp, #4]
 800b17e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b182:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b186:	4259      	negs	r1, r3
 800b188:	4159      	adcs	r1, r3
 800b18a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b18e:	e7eb      	b.n	800b168 <__swhatbuf_r+0x24>

0800b190 <__smakebuf_r>:
 800b190:	898b      	ldrh	r3, [r1, #12]
 800b192:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b194:	079d      	lsls	r5, r3, #30
 800b196:	4606      	mov	r6, r0
 800b198:	460c      	mov	r4, r1
 800b19a:	d507      	bpl.n	800b1ac <__smakebuf_r+0x1c>
 800b19c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b1a0:	6023      	str	r3, [r4, #0]
 800b1a2:	6123      	str	r3, [r4, #16]
 800b1a4:	2301      	movs	r3, #1
 800b1a6:	6163      	str	r3, [r4, #20]
 800b1a8:	b003      	add	sp, #12
 800b1aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b1ac:	ab01      	add	r3, sp, #4
 800b1ae:	466a      	mov	r2, sp
 800b1b0:	f7ff ffc8 	bl	800b144 <__swhatbuf_r>
 800b1b4:	9f00      	ldr	r7, [sp, #0]
 800b1b6:	4605      	mov	r5, r0
 800b1b8:	4639      	mov	r1, r7
 800b1ba:	4630      	mov	r0, r6
 800b1bc:	f7ff f938 	bl	800a430 <_malloc_r>
 800b1c0:	b948      	cbnz	r0, 800b1d6 <__smakebuf_r+0x46>
 800b1c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b1c6:	059a      	lsls	r2, r3, #22
 800b1c8:	d4ee      	bmi.n	800b1a8 <__smakebuf_r+0x18>
 800b1ca:	f023 0303 	bic.w	r3, r3, #3
 800b1ce:	f043 0302 	orr.w	r3, r3, #2
 800b1d2:	81a3      	strh	r3, [r4, #12]
 800b1d4:	e7e2      	b.n	800b19c <__smakebuf_r+0xc>
 800b1d6:	89a3      	ldrh	r3, [r4, #12]
 800b1d8:	6020      	str	r0, [r4, #0]
 800b1da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b1de:	81a3      	strh	r3, [r4, #12]
 800b1e0:	9b01      	ldr	r3, [sp, #4]
 800b1e2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b1e6:	b15b      	cbz	r3, 800b200 <__smakebuf_r+0x70>
 800b1e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b1ec:	4630      	mov	r0, r6
 800b1ee:	f000 f81d 	bl	800b22c <_isatty_r>
 800b1f2:	b128      	cbz	r0, 800b200 <__smakebuf_r+0x70>
 800b1f4:	89a3      	ldrh	r3, [r4, #12]
 800b1f6:	f023 0303 	bic.w	r3, r3, #3
 800b1fa:	f043 0301 	orr.w	r3, r3, #1
 800b1fe:	81a3      	strh	r3, [r4, #12]
 800b200:	89a3      	ldrh	r3, [r4, #12]
 800b202:	431d      	orrs	r5, r3
 800b204:	81a5      	strh	r5, [r4, #12]
 800b206:	e7cf      	b.n	800b1a8 <__smakebuf_r+0x18>

0800b208 <_fstat_r>:
 800b208:	b538      	push	{r3, r4, r5, lr}
 800b20a:	4d07      	ldr	r5, [pc, #28]	@ (800b228 <_fstat_r+0x20>)
 800b20c:	2300      	movs	r3, #0
 800b20e:	4604      	mov	r4, r0
 800b210:	4608      	mov	r0, r1
 800b212:	4611      	mov	r1, r2
 800b214:	602b      	str	r3, [r5, #0]
 800b216:	f7f6 fb08 	bl	800182a <_fstat>
 800b21a:	1c43      	adds	r3, r0, #1
 800b21c:	d102      	bne.n	800b224 <_fstat_r+0x1c>
 800b21e:	682b      	ldr	r3, [r5, #0]
 800b220:	b103      	cbz	r3, 800b224 <_fstat_r+0x1c>
 800b222:	6023      	str	r3, [r4, #0]
 800b224:	bd38      	pop	{r3, r4, r5, pc}
 800b226:	bf00      	nop
 800b228:	20000c00 	.word	0x20000c00

0800b22c <_isatty_r>:
 800b22c:	b538      	push	{r3, r4, r5, lr}
 800b22e:	4d06      	ldr	r5, [pc, #24]	@ (800b248 <_isatty_r+0x1c>)
 800b230:	2300      	movs	r3, #0
 800b232:	4604      	mov	r4, r0
 800b234:	4608      	mov	r0, r1
 800b236:	602b      	str	r3, [r5, #0]
 800b238:	f7f6 fb07 	bl	800184a <_isatty>
 800b23c:	1c43      	adds	r3, r0, #1
 800b23e:	d102      	bne.n	800b246 <_isatty_r+0x1a>
 800b240:	682b      	ldr	r3, [r5, #0]
 800b242:	b103      	cbz	r3, 800b246 <_isatty_r+0x1a>
 800b244:	6023      	str	r3, [r4, #0]
 800b246:	bd38      	pop	{r3, r4, r5, pc}
 800b248:	20000c00 	.word	0x20000c00

0800b24c <_init>:
 800b24c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b24e:	bf00      	nop
 800b250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b252:	bc08      	pop	{r3}
 800b254:	469e      	mov	lr, r3
 800b256:	4770      	bx	lr

0800b258 <_fini>:
 800b258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b25a:	bf00      	nop
 800b25c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b25e:	bc08      	pop	{r3}
 800b260:	469e      	mov	lr, r3
 800b262:	4770      	bx	lr
